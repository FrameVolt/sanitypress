{
  "api/RTCube.Extensions.Algorithms.BufferExtensions.html": {
    "href": "api/RTCube.Extensions.Algorithms.BufferExtensions.html",
    "title": "Class BufferExtensions | RTCubeExtensions 文档",
    "keywords": "Class BufferExtensions Namespace RTCube.Extensions.Algorithms Provides extension methods for buffers. [Version(1, 0, 0)] public static class BufferExtensions Inheritance object BufferExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetCapacity<T>(IResizeableBuffer<T>, int) Sets the capacity of the buffer to the specified value. public static void SetCapacity<T>(this IResizeableBuffer<T> buffer, int newCapacity) Parameters buffer IResizeableBuffer<T> The buffer to set the capacity of. newCapacity int The new capacity of the buffer. Type Parameters T The type of elements in the buffer. Exceptions ArgumentOutOfRangeException The new capacity is negative."
  },
  "api/RTCube.Extensions.Algorithms.Capacity2Buffer-1.html": {
    "href": "api/RTCube.Extensions.Algorithms.Capacity2Buffer-1.html",
    "title": "Class Capacity2Buffer<T> | RTCubeExtensions 文档",
    "keywords": "Class Capacity2Buffer<T> Namespace RTCube.Extensions.Algorithms Represents a buffer with a fixed capacity of two items. [Version(1, 0, 0)] public sealed class Capacity2Buffer<T> : IBuffer<T>, IReadOnlyBuffer<T>, IEnumerable<T>, IEnumerable Type Parameters T The type of items contained in the buffer. Inheritance object Capacity2Buffer<T> Implements IBuffer<T> IReadOnlyBuffer<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) ThrowHelper.ThrowIfNull(object, string) Remarks This class has been optimized for the special case of buffer a value and its previous value. Properties Capacity Gets the maximum number of elements the buffer can hold. public int Capacity { get; } Property Value int Count Gets the current number of elements in the buffer. public int Count { get; } Property Value int First Represents a generic buffer interface. public T First { get; } Property Value T HasPreviousValue Gets a value indicating whether this buffer has a previous value. public bool HasPreviousValue { get; } Property Value bool HasValue Gets a value indicating whether this buffer has a value. public bool HasValue { get; } Property Value bool IsFull Gets a value indicating whether the buffer is full. public bool IsFull { get; } Property Value bool this[int] Gets the element at the specified index. public T this[int index] { get; } Parameters index int Property Value T Last Represents a generic buffer interface. public T Last { get; } Property Value T Methods Clear() Clears all items from the buffer. public void Clear() GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. Insert(T) Inserts an item into the buffer. public void Insert(T item) Parameters item T The item to insert into the buffer."
  },
  "api/RTCube.Extensions.Algorithms.CollectionExtensions.html": {
    "href": "api/RTCube.Extensions.Algorithms.CollectionExtensions.html",
    "title": "Class CollectionExtensions | RTCubeExtensions 文档",
    "keywords": "Class CollectionExtensions Namespace RTCube.Extensions.Algorithms This class provides useful extension methods for collections, mostly IEnumerable. [Version(1, 0, 0)] public static class CollectionExtensions Inheritance object CollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddRange<T>(ICollection<T>, IEnumerable<T>) Add all elements of other to the given source. public static void AddRange<T>(this ICollection<T> collection, IEnumerable<T> other) Parameters collection ICollection<T> other IEnumerable<T> Type Parameters T Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) Aggregates the source collection using two different aggregation functions. [Version(1, 0, 0)] public static (T, T) Aggregate<T>(this IEnumerable<T> source, Func<T, T, T> aggregator1, Func<T, T, T> aggregator2) Parameters source IEnumerable<T> The source collection to aggregate. aggregator1 Func<T, T, T> The first aggregation function. aggregator2 Func<T, T, T> The second aggregation function. Returns (T, T) A tuple containing the results of the two aggregation functions. Type Parameters T The type of elements in the source collection. AreSequencesEqual<T>(IEnumerable<T>, IEnumerable<T>) Checks whether the sequences are equal. [Version(1, 0, 0)] public static bool AreSequencesEqual<T>(IEnumerable<T> s1, IEnumerable<T> s2) where T : IComparable Parameters s1 IEnumerable<T> s2 IEnumerable<T> Returns bool true if the number of elements in the sequences are equal, and all the elements compared item by item are equal (using the CompareTo method), false otherwise. Type Parameters T AsCountable<T>(IEnumerable<T>) Converts the source to an IReadOnlyCollection<T>. [Version(1, 0, 0)] public static IReadOnlyCollection<T> AsCountable<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> The source to convert. Returns IReadOnlyCollection<T> The source as an IReadOnlyCollection<T>. Type Parameters T The type of elements in the source. Remarks Enumerate IEnumerable<T> using this to get a better solution for when you need only a count in addition to enumeration. If the source is already an IReadOnlyCollection<T>, it is casted, otherwise it is converted to an IReadOnlyCollection<T>. The resulting collection is enumerates multiple times, so if you want to avoid this e numerate the collection to something else. AsList<T>(IEnumerable<T>) Converts the source to an IReadOnlyList<T>. [Version(1, 0, 0)] public static IReadOnlyList<T> AsList<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> The source to convert. Returns IReadOnlyList<T> The source as an IReadOnlyList<T>. Type Parameters T The type of elements in the source. Remarks If the source is already an IList<T>, it is casted, otherwise it is converted to an List<T> using ToList<TSource>(IEnumerable<TSource>). BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>) Find an element in a collection by binary searching. This requires the collection to be sorted on the values returned by getSubElement This will compare some derived property of the elements in the collection, rather than the elements themselves. public static int BinarySearch<TCollection, TElement>(this ICollection<TCollection> source, TElement value, Func<TCollection, TElement> getSubElement) Parameters source ICollection<TCollection> value TElement getSubElement Func<TCollection, TElement> Returns int Type Parameters TCollection TElement BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, IComparer<TElement>) Find an element in a collection by binary searching. This requires the collection to be sorted on the values returned by getSubElement This will compare some derived property of the elements in the collection, rather than the elements themselves. public static int BinarySearch<TCollection, TElement>(this ICollection<TCollection> source, TElement value, Func<TCollection, TElement> getSubElement, IComparer<TElement> comparer) Parameters source ICollection<TCollection> value TElement getSubElement Func<TCollection, TElement> comparer IComparer<TElement> Returns int Type Parameters TCollection TElement BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int) Find an element in a collection by binary searching. This requires the collection to be sorted on the values returned by getSubElement This will compare some derived property of the elements in the collection, rather than the elements themselves. public static int BinarySearch<TCollection, TElement>(this ICollection<TCollection> source, TElement value, Func<TCollection, TElement> getSubElement, int index, int length) Parameters source ICollection<TCollection> value TElement getSubElement Func<TCollection, TElement> index int length int Returns int Type Parameters TCollection TElement BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int, IComparer<TElement>) Find an element in a collection by binary searching. This requires the collection to be sorted on the values returned by getSubElement This will compare some derived property of the elements in the collection, rather than the elements themselves. public static int BinarySearch<TCollection, TElement>(this ICollection<TCollection> source, TElement value, Func<TCollection, TElement> getSubElement, int index, int length, IComparer<TElement> comparer) Parameters source ICollection<TCollection> value TElement getSubElement Func<TCollection, TElement> index int length int comparer IComparer<TElement> Returns int Type Parameters TCollection TElement ButFirst<T>(IEnumerable<T>) Returns an enumerable of all elements of the given list but the first, keeping them in order. public static IEnumerable<T> ButFirst<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> Returns IEnumerable<T> Type Parameters T ButLast<T>(IEnumerable<T>) Returns an enumerable of all elements in the given list but the last, keeping them in order. public static IEnumerable<T> ButLast<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> Returns IEnumerable<T> Type Parameters T FillWithDefault<T>(IList<T>) Fills the list with the default value of the type. [Version(1, 0, 0)] public static void FillWithDefault<T>(this IList<T> list) Parameters list IList<T> The list to fill. Type Parameters T The type of items in the list. Fill<T>(IList<T>, T) Fills the list with the given value. [Version(1, 0, 0)] public static void Fill<T>(this IList<T> list, T value) Parameters list IList<T> The list to fill. value T The value to fill the list with. Type Parameters T The type of items in the list. FilterByType<T, TFilter>(IEnumerable<T>) Returns all elements of the source which are of FilterType. public static IEnumerable<TFilter> FilterByType<T, TFilter>(this IEnumerable<T> source) where T : class where TFilter : class, T Parameters source IEnumerable<T> Returns IEnumerable<TFilter> Type Parameters T TFilter HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) Checks if two lists have the same elements, regardless of their order. [Version(1, 0, 0)] public static bool HasSameElementsAs<T>(this IEnumerable<T> first, IEnumerable<T> second) Parameters first IEnumerable<T> The first collection to compare. second IEnumerable<T> The second collection to compare. Returns bool True if both collections contain the same elements, false otherwise. Type Parameters T The type of elements in the lists. HasSingle<T>(IEnumerable<T>) Determines whether the source collection contains exactly one element. [Version(1, 0, 0)] public static bool HasSingle<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> The source collection to check. Returns bool True if the source collection contains exactly one element, false otherwise. Type Parameters T The type of elements in the source collection. IsEmpty<T>(ICollection<T>) Returns whether this source is empty. public static bool IsEmpty<T>(this ICollection<T> collection) Parameters collection ICollection<T> Returns bool Type Parameters T ListToString<T>(IEnumerable<T>) Returns a pretty string representation of the given list. The resulting string looks something like [a, b, c]. public static string ListToString<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> Returns string Type Parameters T MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) Finds the minimum element in the source as scored by its projection. public static TSource MaxBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> selector) Parameters source IEnumerable<TSource> selector Func<TSource, TKey> Returns TSource Type Parameters TSource TKey MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) Finds the minimum element in the source as scored by the given function applied to a projection on the elements. public static TSource MaxBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> selector, IComparer<TKey> comparer) Parameters source IEnumerable<TSource> selector Func<TSource, TKey> comparer IComparer<TKey> Returns TSource Type Parameters TSource TKey MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) Returns the maximum elements in the source collection based on a selector function. This overload uses the default comparer for the type TComparable. [Version(1, 0, 0)] public static IEnumerable<T> MaxItemsBy<T, TComparable>(this IEnumerable<T> source, Func<T, TComparable> selector) where TComparable : IComparable<TComparable> Parameters source IEnumerable<T> The source collection. selector Func<T, TComparable> A function to extract a comparable value from each element. Returns IEnumerable<T> An IEnumerable<T> that contains the maximum elements in the source collection. Type Parameters T The type of elements in the source collection. TComparable The type of the value returned by the selector function. MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) Returns the maximum elements in the source collection based on a selector function and a specified comparer. [Version(1, 0, 0)] public static IEnumerable<T> MaxItemsBy<T, TComparable>(this IEnumerable<T> source, Func<T, TComparable> selector, Comparer<TComparable> comparer) where TComparable : IComparable<TComparable> Parameters source IEnumerable<T> The source collection. selector Func<T, TComparable> A function to extract a comparable value from each element. comparer Comparer<TComparable> The comparer to use when comparing elements. Returns IEnumerable<T> An IEnumerable<T> that contains the maximum elements in the source collection. Type Parameters T The type of elements in the source collection. TComparable The type of the value returned by the selector function. MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) Finds the minimum element in the source as scored by its projection. public static TSource MinBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> selector) Parameters source IEnumerable<TSource> selector Func<TSource, TKey> Returns TSource Type Parameters TSource TKey MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) Finds the minimum element in the source as scored by the given function applied to a projection on the elements. public static TSource MinBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> selector, IComparer<TKey> comparer) Parameters source IEnumerable<TSource> selector Func<TSource, TKey> comparer IComparer<TKey> Returns TSource Type Parameters TSource TKey MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) Returns the minimum elements in the source collection based on a selector function. This overload uses the default comparer for the type TComparable. [Version(1, 0, 0)] public static IEnumerable<T> MinItemsBy<T, TComparable>(this IEnumerable<T> source, Func<T, TComparable> selector) where TComparable : IComparable<TComparable> Parameters source IEnumerable<T> The source collection. selector Func<T, TComparable> A function to extract a comparable value from each element. Returns IEnumerable<T> An IEnumerable<T> that contains the minimum elements in the source collection. Type Parameters T The type of elements in the source collection. TComparable The type of the value returned by the selector function. MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) Returns the minimum elements in the source collection based on a selector function and a specified comparer. [Version(1, 0, 0)] public static IEnumerable<T> MinItemsBy<T, TComparable>(this IEnumerable<T> source, Func<T, TComparable> selector, Comparer<TComparable> comparer) where TComparable : IComparable<TComparable> Parameters source IEnumerable<T> The source collection. selector Func<T, TComparable> A function to extract a comparable value from each element. comparer Comparer<TComparable> The comparer to use when comparing elements. Returns IEnumerable<T> An IEnumerable<T> that contains the minimum elements in the source collection. Type Parameters T The type of elements in the source collection. TComparable The type of the value returned by the selector function. MinMax(IEnumerable<int>) Finds the minimum and maximum values in a collection of integers. [Version(1, 0, 0)] public static (int, int) MinMax(this IEnumerable<int> source) Parameters source IEnumerable<int> The source collection to find the minimum and maximum values in. Returns (int, int) A tuple containing the minimum and maximum values. MinMax(IEnumerable<float>) Finds the minimum and maximum values in a collection of floats. [Version(1, 0, 0)] public static (float, float) MinMax(this IEnumerable<float> source) Parameters source IEnumerable<float> The source collection to find the minimum and maximum values in. Returns (float min, float max) A tuple containing the minimum and maximum values. RandomItem<T>(IEnumerable<T>) Returns a random element from a source. public static T RandomItem<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> The list. Returns T An item randomly selected from the source. Type Parameters T The type of items generated from the source. RandomItem<T>(IEnumerable<T>, IRandom) Returns a random element from a source. public static T RandomItem<T>(this IEnumerable<T> source, IRandom random) Parameters source IEnumerable<T> The list. random IRandom The random generator to use. Returns T An item randomly selected from the source. Type Parameters T The type of items generated from the source. RemoveAllBut<T>(List<T>, Predicate<T>) Removes all the elements in the list that does not satisfy the predicate. public static void RemoveAllBut<T>(this List<T> source, Predicate<T> predicate) Parameters source List<T> The list to remove elements from. predicate Predicate<T> The predicate used to filter elements. All elements that don't satisfy the predicate will be matched. Type Parameters T The type of elements in the list. RotateLeft<T>(IEnumerable<T>) Returns an enumerable with elements in order, but the first element is moved to the end. public static IEnumerable<T> RotateLeft<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> Returns IEnumerable<T> Type Parameters T RotateRight<T>(IEnumerable<T>) Returns an enumerable with elements in order, but the last element is moved to the front. public static IEnumerable<T> RotateRight<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> Returns IEnumerable<T> Type Parameters T SampleRandom<T>(IEnumerable<T>, int) Returns a random sample from a source. public static IEnumerable<T> SampleRandom<T>(this IEnumerable<T> source, int sampleCount) Parameters source IEnumerable<T> The source from which to sample. sampleCount int The number of samples to return. Returns IEnumerable<T> Generates a ransom subset from a given source. Type Parameters T The type of elements of the source. SampleRandom<T>(IEnumerable<T>, int, IRandom) Returns a random sample from a source. public static IEnumerable<T> SampleRandom<T>(this IEnumerable<T> source, int sampleCount, IRandom random) Parameters source IEnumerable<T> The source from which to sample. sampleCount int The number of samples to return. random IRandom The random generator to use. Returns IEnumerable<T> Generates a ransom subset from a given source. Type Parameters T The type of elements of the source. Shuffle<T>(IList<T>) Shuffles a list. public static void Shuffle<T>(this IList<T> list) Parameters list IList<T> The list to shuffle. Type Parameters T The type of items in the list. Shuffle<T>(IList<T>, IRandom) Shuffles a list. public static void Shuffle<T>(this IList<T> list, IRandom random) Parameters list IList<T> The list to shuffle. random IRandom The random generator to use. Type Parameters T The type of items in the list. SlidingWindow<T>(IEnumerable<T>, int) Gives sliding window of the given size over the source. public static IEnumerable<IReadOnlyBuffer<T>> SlidingWindow<T>(this IEnumerable<T> source, int windowSize) Parameters source IEnumerable<T> The source to slide over. windowSize int The size of the window. Must be positive. Returns IEnumerable<IReadOnlyBuffer<T>> An IEnumerable<T> of buffers of the given size. Each item represents a window at a certain position. Only full windows are returned. Suppose the source is the sequence 1, 2, 3, 4, 5. If we run the sliding window width a size of three, we get the sequences (1, 2, 3), (2, 3, 4), (3, 4, 5). Type Parameters T The type of elements in the source. Exceptions ArgumentOutOfRangeException The windowSize is not positive. TakeHalf<T>(IEnumerable<T>) Returns the first half of elements from a source. [Version(1, 0, 0)] public static IEnumerable<T> TakeHalf<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> Returns IEnumerable<T> Type Parameters T TakeLast<T>(IEnumerable<T>, int) Returns the last n elements from a source. [Version(1, 0, 0)] public static IEnumerable<T> TakeLast<T>(this IEnumerable<T> source, int n) Parameters source IEnumerable<T> n int Returns IEnumerable<T> Type Parameters T TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) Try to get the first element of a sequence that satisfies a predicate, if it exists. [Version(1, 0, 0)] public static bool TryFirst<T>(this IEnumerable<T> source, Func<T, bool> predicate, out T first) Parameters source IEnumerable<T> The source to get the first element from. predicate Func<T, bool> The predicate to test the elements against. first T The first element of the source that satisfies the predicate, if it exists. Returns bool true if the source is not empty, false otherwise. Type Parameters T The type of elements in the source. TryFirst<T>(IEnumerable<T>, out T) Try to get the first element of a sequence, if it exists. [Version(1, 0, 0)] public static bool TryFirst<T>(this IEnumerable<T> source, out T first) Parameters source IEnumerable<T> The source to get the first element from. first T The first element of the source, if it exists. Returns bool true if the source is not empty, false otherwise. Type Parameters T The type of elements in the source. TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) Try to get the last element of a sequence that satisfies a predicate, if it exists. [Version(1, 0, 0)] public static bool TryLast<T>(this IEnumerable<T> source, Func<T, bool> predicate, out T last) Parameters source IEnumerable<T> The source to get the last element from. predicate Func<T, bool> The predicate to test the elements against. last T The last element of the source that satisfies the predicate, if it exists. Returns bool true if the source is not empty, false otherwise. Type Parameters T The type of elements in the source. TryLast<T>(IEnumerable<T>, out T) Try to get the last element of a sequence, if it exists. [Version(1, 0, 0)] public static bool TryLast<T>(this IEnumerable<T> source, out T last) Parameters source IEnumerable<T> The source to get the last element from. last T The last element of the source, if it exists. Returns bool true if the source is not empty, false otherwise. Type Parameters T The type of elements in the source. TrySingle<T>(IEnumerable<T>, out T) Tries to retrieve the single element from the source collection. [Version(1, 0, 0)] public static bool TrySingle<T>(this IEnumerable<T> source, out T result) Parameters source IEnumerable<T> The source collection to retrieve the element from. result T The single element from the source collection, if it exists. Returns bool True if the source collection contains exactly one element, false otherwise. If true, the single element is assigned to the out parameter 'result'. Type Parameters T The type of elements in the source collection. WithIndices<T>(IEnumerable<T>) Iterates over a collection, yielding each element along with its index. [Version(1, 0, 0)] public static IEnumerable<(T item, int index)> WithIndices<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> The source collection to iterate over. Returns IEnumerable<(T item, int index)> An enumerable of tuples containing the elements and their indices. Type Parameters T The type of elements in the collection."
  },
  "api/RTCube.Extensions.Algorithms.Combinatorial.html": {
    "href": "api/RTCube.Extensions.Algorithms.Combinatorial.html",
    "title": "Class Combinatorial | RTCubeExtensions 文档",
    "keywords": "Class Combinatorial Namespace RTCube.Extensions.Algorithms Combinatorial algorithms, including generating tuples, combinations, permutations and partitions. Except for PowerSet, all methods are implemented after Knuth, described in The Art of Computer Programming Volume 4. [Version(1, 0, 0)] public static class Combinatorial Inheritance object Combinatorial Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Combinations<T>(IEnumerable<T>, int) Generates all combinations of m elements selected from the list. public static IEnumerable<T[]> Combinations<T>(this IEnumerable<T> list, int m) Parameters list IEnumerable<T> The list to select from. m int The number of elements in each combination. Returns IEnumerable<T[]> IEnumerable<T[]>. Type Parameters T The type of elements in the list. Exceptions ArgumentOutOfRangeException m;must be nonnegative or m;must be smaller than n Combinations<T>(int, int, Func<int[], T>) public static IEnumerable<T> Combinations<T>(int m, int n, Func<int[], T> select) Parameters m int n int select Func<int[], T> Returns IEnumerable<T> Type Parameters T MultiRadixTuples(int[]) Generates all tuples with mixed radixes. public static IEnumerable<int[]> MultiRadixTuples(int[] radixes) Parameters radixes int[] The array of radixes for each position in the tuple. Returns IEnumerable<int[]> MultiRadixTuples<T>(IEnumerable<IEnumerable<T>>) public static IEnumerable<T[]> MultiRadixTuples<T>(this IEnumerable<IEnumerable<T>> elements) Parameters elements IEnumerable<IEnumerable<T>> Returns IEnumerable<T[]> Type Parameters T Partitions<T>(IEnumerable<T>) Returns a list of all the partitions of a list. public static IEnumerable<IEnumerable<IEnumerable<T>>> Partitions<T>(this IEnumerable<T> list) Parameters list IEnumerable<T> The list. Returns IEnumerable<IEnumerable<IEnumerable<T>>> IEnumerable<IEnumerable<IEnumerable<T>>>. Type Parameters T Remarks If the list is (a b c), then ((a) (b c)) and ((a) (b) (c)) would be examples of partitions. Permutations(int) Generates all permutations of the numbers 0 to n - 1. public static IEnumerable<int[]> Permutations(int n) Parameters n int Returns IEnumerable<int[]> Permutations<T>(IEnumerable<T>) Generates all permutations of the list of elements. public static IEnumerable<T[]> Permutations<T>(this IEnumerable<T> list) Parameters list IEnumerable<T> Returns IEnumerable<T[]> Type Parameters T PowerSet<T>(IEnumerable<T>) Returns the power set of the input, that is, the set of all subsets of the input. public static IEnumerable<IEnumerable<T>> PowerSet<T>(this IEnumerable<T> input) Parameters input IEnumerable<T> The input. Returns IEnumerable<IEnumerable<T>> IEnumerable<IEnumerable<T>>. Type Parameters T Tuples(int) Generate all possible tuples of length n with digits 0 to n-1. public static IEnumerable<int[]> Tuples(int n) Parameters n int The length of tuples to generate. All digits are also between 0 and n-1. Returns IEnumerable<int[]> Tuples<T>(IEnumerable<T>) public static IEnumerable<T[]> Tuples<T>(this IEnumerable<T> list) Parameters list IEnumerable<T> Returns IEnumerable<T[]> Type Parameters T Tuples<T>(int, Func<int[], T>) Generates n-tuples of integers 0 to n-1 and applies the selector to them. public static IEnumerable<T> Tuples<T>(int n, Func<int[], T> select) Parameters n int select Func<int[], T> Returns IEnumerable<T> Type Parameters T Exceptions ArgumentOutOfRangeException n;must be non negative"
  },
  "api/RTCube.Extensions.Algorithms.ComparerExtensions.html": {
    "href": "api/RTCube.Extensions.Algorithms.ComparerExtensions.html",
    "title": "Class ComparerExtensions | RTCubeExtensions 文档",
    "keywords": "Class ComparerExtensions Namespace RTCube.Extensions.Algorithms [Version(1, 0, 0)] public static class ComparerExtensions Inheritance object ComparerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Less<T>(IComparer<T>, T, T) public static bool Less<T>(this IComparer<T> comparer, T a, T b) Parameters comparer IComparer<T> a T b T Returns bool Type Parameters T"
  },
  "api/RTCube.Extensions.Algorithms.Differentiator.html": {
    "href": "api/RTCube.Extensions.Algorithms.Differentiator.html",
    "title": "Class Differentiator | RTCubeExtensions 文档",
    "keywords": "Class Differentiator Namespace RTCube.Extensions.Algorithms Represents a differentiator that calculates the difference between two consecutive float values. [Version(1, 0, 0)] public sealed class Differentiator : ValueSnapshot<float> Inheritance object ValueSnapshot<float> Differentiator Inherited Members ValueSnapshot<float>.PreviousValue ValueSnapshot<float>.HasValue ValueSnapshot<float>.HasPreviousValue ValueSnapshot<float>.Reset() ValueSnapshot<float>.Reset(float) ValueSnapshot<float>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks The differentiator assumes a constant sample rate. Therefore, while technically the derivative requires division by time, this constant can be absorbed by PidController, allowing the differentiator to focus solely on the difference between values. Constructors Differentiator() Initializes a new instance of the Differentiator class. public Differentiator() Properties Difference Gets the difference between the current and previous value of this Differentiator. public float Difference { get; } Property Value float Remarks Technically to be a derivative we need to divide by the time. If we assume a constant sample rate, this is a constant, that can be absorbed by the PID filter. Value Gets or sets the value of this Differentiator. public override float Value { get; set; } Property Value float"
  },
  "api/RTCube.Extensions.Algorithms.DitherResponse.html": {
    "href": "api/RTCube.Extensions.Algorithms.DitherResponse.html",
    "title": "Class DitherResponse | RTCubeExtensions 文档",
    "keywords": "Class DitherResponse Namespace RTCube.Extensions.Algorithms Dithers responses by adding noise before passing it to a step response. The noise is provided by an arbitrary generator, and errors are diffused over several calls. public class DitherResponse Inheritance object DitherResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors DitherResponse(IResponseCurve<float>, IGenerator<float>, float[]) Constructs a new DitherResponse. public DitherResponse(IResponseCurve<float> quantizer, IGenerator<float> noiseGenerator, float[] errorFactors) Parameters quantizer IResponseCurve<float> The response used to quantize values, such as an instance of StepResponse. noiseGenerator IGenerator<float> A generator that provides noise. For satisfactory results, the mean should be 0. errorFactors float[] An array of factors used to diffuse the error over several calls. For example, if the error factors are [0.6, 0.3, 0.1], then 60% of the error is given added to the next sample, 30% to the sample after that, and 10% to the sample after that. DitherResponse(IResponseCurve<float>, int, float, float[]) Dithers responses by adding noise before passing it to a step response. If the quality of the noise is 1, the noise is uniform noise. If the quality of the noise is 2, the noise is triangular noise. The higher the quality, the closer the noise follow a random distribution. public DitherResponse(IResponseCurve<float> quantizer, int quality, float noiseScale, float[] errorFactors) Parameters quantizer IResponseCurve<float> A response curve that converts inputs to discrete outputs. quality int The quality. noiseScale float The noise scale. errorFactors float[] An array of factors used to diffuse the error over several calls. For example, if the error factors are [0.6, 0.3, 0.1], then 60% of the error is given added to the next sample, 30% to the sample after that, and 10% to the sample after that. Properties this[float] Gives the quantized value of the given input. public float this[float input] { get; } Parameters input float Property Value float"
  },
  "api/RTCube.Extensions.Algorithms.Generator.AbstractGenerator-1.html": {
    "href": "api/RTCube.Extensions.Algorithms.Generator.AbstractGenerator-1.html",
    "title": "Class Generator.AbstractGenerator<TResult> | RTCubeExtensions 文档",
    "keywords": "Class Generator.AbstractGenerator<TResult> Namespace RTCube.Extensions.Algorithms This class provides a convenient base class to base an implementation of IGenerator on. public abstract class Generator.AbstractGenerator<TResult> : IGenerator<TResult>, IGenerator Type Parameters TResult The type of elements this generator generates. Inheritance object Generator.AbstractGenerator<TResult> Implements IGenerator<TResult> IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Generator.Cast<TResult>(IGenerator) Generator.OfType<TResult>(IGenerator) Generator.Aggregate<TSource>(IGenerator<TSource>, Func<TSource, TSource, TSource>) Generator.Aggregate<TSource>(IGenerator<TSource>, Func<TSource, TSource, TSource>, TSource) Generator.Aggregate<TSource, TResult>(IGenerator<TSource>, Func<TResult, TSource, TResult>, TResult) Generator.Apply<TSource>(IGenerator<TSource>, Action<TSource>) Generator.Group<TSource>(IGenerator<TSource>, IGenerator<int>) Generator.Group<TSource>(IGenerator<TSource>, int) Generator.InterpolateDither<TSource>(IGenerator<TSource>, IGenerator<int>) Generator.Interpolate<TSource>(IGenerator<TSource>, IGenerator<int>, Func<TSource, TSource, float, TSource>) Generator.Interpolate<TSource>(IGenerator<TSource>, int, Func<TSource, TSource, float, TSource>) Generator.Log<TSource>(IGenerator<TSource>) Generator.Log<TSource>(IGenerator<TSource>, Action<TSource>) Generator.MoveNext<TSource>(IGenerator<TSource>, int) Generator.NextWhile<TSource>(IGenerator<TSource>, Func<TSource, bool>) Generator.Next<TSource>(IGenerator<TSource>) Generator.Next<TSource>(IGenerator<TSource>, int) Generator.Pad<TSource>(IGenerator<TSource>, IEnumerable<TSource>) Generator.Pad<TSource>(IGenerator<TSource>, TSource, int) Generator.RepeatEach<TSource>(IGenerator<TSource>, IGenerator<int>) Generator.RepeatEach<TSource>(IGenerator<TSource>, int) Generator.SelectMany<TSource, TResult>(IGenerator<TSource>, Func<TSource, IEnumerable<TResult>>) Generator.Select<TSource, TResult>(IGenerator<TSource>, Func<TSource, TResult>) Generator.SkipAndTake<TSource>(IGenerator<TSource>, int, int) Generator.Skip<TSource>(IGenerator<TSource>, int) Generator.SwitchAfter<TSource>(IGenerator<TSource>, int, IGenerator<TSource>) Generator.SwitchWhen<TSource>(IGenerator<TSource>, Func<TSource, bool>, IGenerator<TSource>) Generator.TakeAndSkip<TSource>(IGenerator<TSource>, int, int) Generator.WhereWindow<TSource>(IGenerator<TSource>, int, Func<TSource[], bool>) Generator.Where<TSource>(IGenerator<TSource>, IGenerator<bool>) Generator.Where<T>(IGenerator<T>, IGenerator<bool>, int) Generator.Where<TSource>(IGenerator<TSource>, Func<TSource, bool>) Generator.Where<T>(IGenerator<T>, Func<T, bool>, int) Generator.Window<TSource>(IGenerator<TSource>, int) ThrowHelper.ThrowIfNull(object, string) Properties Current Gets the element last generated by this generator. public abstract TResult Current { get; } Property Value TResult Methods CloneAndRestart() Clones the generator and returns the clone in a restarted state. public abstract IGenerator<TResult> CloneAndRestart() Returns IGenerator<TResult> MoveNext() Generates the next element. public abstract void MoveNext() See Also IGenerator<TResult>"
  },
  "api/RTCube.Extensions.Algorithms.Generator.html": {
    "href": "api/RTCube.Extensions.Algorithms.Generator.html",
    "title": "Class Generator | RTCubeExtensions 文档",
    "keywords": "Class Generator Namespace RTCube.Extensions.Algorithms Contains static methods for creating generators, and extension methods to create generators from existing ones. [Version(1, 0, 0)] public static class Generator Inheritance object Generator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks A generator is a class that generates data on demand. In this implementation, generators implement the IGenerator interface, and through an extension method supports a Next method that returns an element every time it is called. Generators are infinite. Many methods make methods from existing generators. The existing generators are always cloned, so no derived generator will call the Next<TSource>(IGenerator<TSource>) or MoveNext() methods of an existing generator. Clones are always returned in the restarted state. Although Generators have almost the same interface as IEnumerator, there are some differences. Generators are always in a \"valid\" state, so calls to Current will always return a valid result, there is no \"before first\" and \"after last\" states. You can also implement your own generators. There are two ways to do this. The first is to simply use the static methods provided; they allow you to make new generators by manipulating existing ones. The second way is appropriate for more complicated situations, and that is to define your own class that implements the IGenerator<TResult> interface. Methods Aggregate<TSource>(IGenerator<TSource>, Func<TSource, TSource, TSource>) Makes a generator that generates a running aggregate of the source generator. public static IGenerator<TSource> Aggregate<TSource>(this IGenerator<TSource> source, Func<TSource, TSource, TSource> aggregator) Parameters source IGenerator<TSource> The source generator. aggregator Func<TSource, TSource, TSource> The aggregator. Returns IGenerator<TSource> A new generator. Type Parameters TSource The type of elements of the source generator. Remarks This overload uses the first item as the first element to generate. The resulting generator will generate the following sequence: result0 = source[0] result1 = aggregator(result0, source[1]) result2 = aggregator(result1, source[2]) Exceptions ArgumentNullException generator is null. ArgumentNullException aggregator is null. Aggregate<TSource>(IGenerator<TSource>, Func<TSource, TSource, TSource>, TSource) Makes a generator that generates a running aggregate of the source generator. public static IGenerator<TSource> Aggregate<TSource>(this IGenerator<TSource> source, Func<TSource, TSource, TSource> aggregator, TSource initialValue) Parameters source IGenerator<TSource> The source generator. aggregator Func<TSource, TSource, TSource> The aggregator function. The two parameters, in order, is the aggregation so far, the next value of source. The result is the new aggregation. initialValue TSource The initial value. Returns IGenerator<TSource> A new generator. Type Parameters TSource The type of elements of the source generator. Remarks The resulting generator will generate the following sequence: result0 = aggregator(initialValue, source[0]) result1 = aggregator(result0, source[1]) result2 = aggregator(result1, source[2]) Aggregate<TSource, TResult>(IGenerator<TSource>, Func<TResult, TSource, TResult>, TResult) Makes a generator that generates a running aggregate of the source generator. public static IGenerator<TResult> Aggregate<TSource, TResult>(this IGenerator<TSource> source, Func<TResult, TSource, TResult> aggregator, TResult initialValue) Parameters source IGenerator<TSource> The source generator. aggregator Func<TResult, TSource, TResult> The aggregator function. The two parameters, in order, is the aggregation so far, the next value of source. The result is the new aggregation. initialValue TResult The initial value. Returns IGenerator<TResult> A new generator. Type Parameters TSource The type of elements of the source generator. TResult The type of elements to generate. Examples The following will generate the maximum element generated by source so far: var generator = source.Aggregate((x, y) = Max(x, y)); For example, if source generates 0 1 2 0 1 2..., then generator will generate 0 1 2 2 2 2... Remarks The resulting generator will generate the following sequence: result0 = aggregator(initialValue, source[0]) result1 = aggregator(result0, source[1]) result2 = aggregator(result1, source[2]) Apply<TSource>(IGenerator<TSource>, Action<TSource>) Makes a generator that applies an Action<T> on the elements it generates. public static IGenerator<TSource> Apply<TSource>(this IGenerator<TSource> source, Action<TSource> action) Parameters source IGenerator<TSource> The source generator. action Action<TSource> The action to apply to generated elements. Returns IGenerator<TSource> A new generator. Type Parameters TSource The type of the elements to generate. Examples The following will generate a generator that generates 0 1 2 3 0 1 2 ... and print the values to the console. var generator = Generator.Count(4).Apply((x) => {Debug.Log(x);}); The following will generate a monster, and sets its properties based on the player's current level: var monsterGenerator = Generator .Constant(monsterTemplate) .Apply(m => m.SetProperties(GetPlayerLevel()); Exceptions ArgumentNullException generator is $(null). ArgumentNullException action is $(null). Average(IGenerator<int>) Makes a generator the will generate the average of elements generated by another generator. public static IGenerator<int> Average(this IGenerator<int> source) Parameters source IGenerator<int> The generator. Returns IGenerator<int> A new generator. Examples The following generator will generate 4, 4, 4, 4, .... var generator = Generator.Constant(4).Average() Exceptions ArgumentNullException source is null Average(IGenerator<float>) Makes a generator the will generate the average of elements generated by another generator. public static IGenerator<float> Average(this IGenerator<float> source) Parameters source IGenerator<float> The generator. Returns IGenerator<float> A new generator. Examples The following generator will generate 0, 0.5f, 0.33f, 0.5f, 0.4f, ... var generator = Generator.Count(2).Average() Exceptions ArgumentNullException source is null Cast<TResult>(IGenerator) Makes a generator that will generate elements by casting the elements of a source generator. public static IGenerator<TResult> Cast<TResult>(this IGenerator generator) Parameters generator IGenerator The source generator. Returns IGenerator<TResult> A new generator. Type Parameters TResult The type of elements of the source generator. ChooseUniformRandom<TSource>(params IGenerator<TSource>[]) Chooses the from the given generators selected uniform randomly. [Obsolete(\"Use an appropriate overload instead.\")] public static IGenerator<TSource> ChooseUniformRandom<TSource>(params IGenerator<TSource>[] source) Parameters source IGenerator<TSource>[] Returns IGenerator<TSource> IGenerator<TSource>. Type Parameters TSource ChooseUniformRandom<TSource>(IList<IGenerator<TSource>>) Makes a generator that selects a random generator from a given element to generate an element from. public static IGenerator<TSource> ChooseUniformRandom<TSource>(IList<IGenerator<TSource>> source) Parameters source IList<IGenerator<TSource>> The list of generators to choose from. Returns IGenerator<TSource> A new generator. Type Parameters TSource The type of elements to generate. Exceptions ArgumentNullException list is $(null). ArgumentException list is empty or has null elements. ChooseUniformRandom<TSource>(IList<IGenerator<TSource>>, int) Chooses the random. public static IGenerator<TSource> ChooseUniformRandom<TSource>(IList<IGenerator<TSource>> source, int seed) Parameters source IList<IGenerator<TSource>> The list. seed int The seed. Returns IGenerator<TSource> IGenerator<TSource>. Type Parameters TSource The type of the t source. Exceptions ArgumentNullException list is $(null). ArgumentException list is empty or has null elements. ChooseUniformRandom<TSource>(IList<TSource>) Make a generator that randomly generates elements from a list. public static IGenerator<TSource> ChooseUniformRandom<TSource>(IList<TSource> source) Parameters source IList<TSource> The source list. Returns IGenerator<TSource> A new generator. Type Parameters TSource The type of elements to generate. Exceptions ArgumentNullException source is null ArgumentException sourceis empty. ChooseUniformRandom<TSource>(IList<TSource>, int) Make a generator that randomly generates elements from a list. Can be seeded. public static IGenerator<TSource> ChooseUniformRandom<TSource>(IList<TSource> source, int seed) Parameters source IList<TSource> The source list. seed int The seed of the random number generator to use. Returns IGenerator<TSource> A new generator. Type Parameters TSource The type of elements to generate. Exceptions ArgumentNullException source is null ArgumentException sourceis empty. Choose<TSource>(IList<IGenerator<TSource>>, IGenerator<int>) Makes a generator that uses an index generator to choose a generator to generate an element from. public static IGenerator<TSource> Choose<TSource>(IList<IGenerator<TSource>> sourceGenerators, IGenerator<int> indexGenerator) Parameters sourceGenerators IList<IGenerator<TSource>> The source generators. indexGenerator IGenerator<int> The index generator. Returns IGenerator<TSource> A new generator. Type Parameters TSource The type of element to generate. Examples The following generator will interleave the given generators: //generators is a IEnumerable of generators var generator = Generator.Choose(generators, Generator.Count(generators.Count()); Exceptions ArgumentNullException generators or indexGenerator ArgumentException Cannot contain null elements;generators Choose<TSource>(IList<TSource>, IGenerator<int>) Makes a generator that chooses elements from a list using an index generator. public static IGenerator<TSource> Choose<TSource>(IList<TSource> source, IGenerator<int> indexGenerator) Parameters source IList<TSource> The source list. indexGenerator IGenerator<int> The index generator. Returns IGenerator<TSource> A new generator. Type Parameters TSource The type of elements to generate. Examples The following will generate \"cat\" \"dog\" \"cat\" \"dog\": var generator = Generator.Choose(new[] {\"cat\", \"dog\"}, Generator.Count(2)); Exceptions ArgumentNullException list or indexGenerator ArgumentException List must have at least one element;list ClosedSawTooth(int) Makes a generator that produces evenly spaced floats from 0 to 1, both limits included, and repeats the result. public static IGenerator<float> ClosedSawTooth(int sampleCount) Parameters sampleCount int The number of samples per cycle. Returns IGenerator<float> A new generator. Remarks This generator is designed to be used with Select<TSource, TResult>(IGenerator<TSource>, Func<TSource, TResult>) to generate outputs of periodic functions. Exceptions ArgumentOutOfRangeException sampleCountis not bigger than 1. See Also OpenSawTooth(int) Combine<TSource, TResult>(IEnumerable<IGenerator<TSource>>, Func<IList<TSource>, TResult>) Makes a generator that combines the elements of specified generators. public static IGenerator<TResult> Combine<TSource, TResult>(IEnumerable<IGenerator<TSource>> sources, Func<IList<TSource>, TResult> resultSelector) Parameters sources IEnumerable<IGenerator<TSource>> The generators. resultSelector Func<IList<TSource>, TResult> The result selector. Returns IGenerator<TResult> A new generator. Type Parameters TSource The type of elements of the source generators. TResult The type of elements this generator will generate. Exceptions ArgumentNullException generators ArgumentException Cannot contain null elements;generators Combine<T1, T2, TResult>(IGenerator<T1>, IGenerator<T2>, Func<T1, T2, TResult>) Combines the specified generators by applying a result selector function to the elements of each generator. public static IGenerator<TResult> Combine<T1, T2, TResult>(IGenerator<T1> source1, IGenerator<T2> source2, Func<T1, T2, TResult> resultSelector) Parameters source1 IGenerator<T1> The first generator. source2 IGenerator<T2> The second generator. resultSelector Func<T1, T2, TResult> The result selector function. Returns IGenerator<TResult> A new generator Type Parameters T1 The type of elements of the first generator. T2 The type of elements of the second generator. TResult The type of the elements of the result generator. Examples The following will code will add the elements of two generators to form its elements. var generator1 = Generator.Count(3); //generates 0 1 2 0 1 2 0 1 2... var generator2 = Generator.Count(2); //generates 0 1 0 1 0 1 0 1 0... var generator = Generator.Combine(generator1, generator2, (x, y) => x + y); //generates 0 2 2 1 1 3 0 2 2...</code></pre> Exceptions ArgumentNullException generator1 or generator2 or resultSelector ArgumentNullException generator1 is null. ArgumentNullException generator2 is null. ArgumentNullException resultSelector is null. Combine<T1, T2, T3, TResult>(IGenerator<T1>, IGenerator<T2>, IGenerator<T3>, Func<T1, T2, T3, TResult>) Combines the specified generators by applying a result selector function to the elements of each generator. public static IGenerator<TResult> Combine<T1, T2, T3, TResult>(IGenerator<T1> source1, IGenerator<T2> source2, IGenerator<T3> source3, Func<T1, T2, T3, TResult> resultSelector) Parameters source1 IGenerator<T1> The first generator. source2 IGenerator<T2> The second generator. source3 IGenerator<T3> The third generator. resultSelector Func<T1, T2, T3, TResult> The result selector function. Returns IGenerator<TResult> A new generator Type Parameters T1 The type of elements of the first generator. T2 The type of elements of the second generator. T3 The type of elements of the third generator. TResult The type of the elements of the result generator. Exceptions ArgumentNullException generator1 is null. ArgumentNullException generator2 is null. ArgumentNullException generator3 is null. ArgumentNullException resultSelector is null. Combine<T1, T2, T3, T4, TResult>(IGenerator<T1>, IGenerator<T2>, IGenerator<T3>, IGenerator<T4>, Func<T1, T2, T3, T4, TResult>) Combines the specified generators by applying a result selector function to the elements of each generator. public static IGenerator<TResult> Combine<T1, T2, T3, T4, TResult>(IGenerator<T1> source1, IGenerator<T2> source2, IGenerator<T3> source3, IGenerator<T4> source4, Func<T1, T2, T3, T4, TResult> resultSelector) Parameters source1 IGenerator<T1> The first generator. source2 IGenerator<T2> The second generator. source3 IGenerator<T3> The third generator. source4 IGenerator<T4> The fourth generator. resultSelector Func<T1, T2, T3, T4, TResult> The result selector function. Returns IGenerator<TResult> A new generator Type Parameters T1 The type of elements of the first generator. T2 The type of elements of the second generator. T3 The type of elements of the third generator. T4 The type of elements of the fourth generator. TResult The type of the elements of the result generator. Exceptions ArgumentNullException generator1 is null. ArgumentNullException generator2 is null. ArgumentNullException generator3 is null. ArgumentNullException generator4 is null. ArgumentNullException resultSelector is null. Constant<TSource>(TSource) Makes a generator that generates the same item each time. public static IGenerator<TSource> Constant<TSource>(TSource item) Parameters item TSource The item to generate. Returns IGenerator<TSource> Type Parameters TSource The type of the item to generate. Count(int) Makes a generator that generates consecutive integers starting from zero up to a limit, and repeats the cycle. public static IGenerator<int> Count(int upperLimitExcluded) Parameters upperLimitExcluded int The upper limit (excluded). Returns IGenerator<int> A new generator Exceptions ArgumentOutOfRangeException upperLimitExcluded is not positive. Dither(IGenerator<float>, int, IEnumerable<float>) Takes the source generator's output, and generate a dithered sequence of integers in the range 0 to levels - 1. Uses error diffusion. public static IGenerator<int> Dither(this IGenerator<float> source, int levels, IEnumerable<float> errorFactors) Parameters source IGenerator<float> The source. levels int The levels. errorFactors IEnumerable<float> The error factors. Returns IGenerator<int> IGenerator<System.Int32>. FrequencyRandomInt(IEnumerable<float>) Generates random integers at relative frequencies provided. public static IGenerator<int> FrequencyRandomInt(IEnumerable<float> frequencies) Parameters frequencies IEnumerable<float> The relative frequencies of each integer. If the array of frequencies has three elements, then the integers produced will be 0, 1, 2 (provided all frequencies are positive). All frequencies must be non-negative, and at least one must be positive. Returns IGenerator<int> A new generator. FrequencyRandomInt(IEnumerable<float>, int) Generates random integers at relative frequencies provided. public static IGenerator<int> FrequencyRandomInt(IEnumerable<float> frequencies, int seed) Parameters frequencies IEnumerable<float> The relative frequencies of each integer. If the array of frequencies has three elements, then the integers produced will be 0, 1, 2 (provided all frequencies are positive). All frequencies must be non-negative, and at least one must be positive. seed int A seed to use for the random number generator. Returns IGenerator<int> A new generator. FromFunc<TResult>(Func<TResult>) Makes a new generator from a generator function. public static IGenerator<TResult> FromFunc<TResult>(Func<TResult> source) Parameters source Func<TResult> The generator function that will be called to generate new elements. Returns IGenerator<TResult> Type Parameters TResult The type of elements to generate. Exceptions ArgumentNullException generator GaussianRandomFloat(float, float) Makes a generator that generates floats with a Gaussian distribution. public static IGenerator<float> GaussianRandomFloat(float mean, float standardDeviation) Parameters mean float The mean of the distribution. Values generated will be centered around this point. standardDeviation float The standard deviation of the distribution. The bigger this value, the flatter the distribution curve will be. Returns IGenerator<float> A new generator. Group<TSource>(IGenerator<TSource>, IGenerator<int>) Makes a generator that generates groups of items from the source generator. public static IGenerator<IList<TSource>> Group<TSource>(this IGenerator<TSource> generator, IGenerator<int> groupSizeGenerator) Parameters generator IGenerator<TSource> The source generator. groupSizeGenerator IGenerator<int> The generator used to determine the size of the groups to return. Returns IGenerator<IList<TSource>> IGenerator<IEnumerable<TSource>>. Type Parameters TSource The type of the source generator. Exceptions ArgumentNullException generator ArgumentOutOfRangeException groupSizeGenerator;Argument must be positive. Group<TSource>(IGenerator<TSource>, int) Makes a generator that returns groups of elements from the source generator. public static IGenerator<IList<TSource>> Group<TSource>(this IGenerator<TSource> generator, int groupSize) Parameters generator IGenerator<TSource> The source generator. groupSize int The size of the groups. Returns IGenerator<IList<TSource>> IGenerator<IEnumerable<TSource>>. Type Parameters TSource The type of the source generator. Remarks For example, if the source generator generates 0, 1, 2, 3, ... and the group size is 2 then the result generator will return groups (0, 1), (2, 3), ... Exceptions ArgumentNullException generator ArgumentOutOfRangeException groupSize;Argument must be positive. Interleave<TSource>(IGenerator<TSource>, params IGenerator<TSource>[]) Makes a generator that interleaves the elements of the specified generators. public static IGenerator<TSource> Interleave<TSource>(IGenerator<TSource> generator, params IGenerator<TSource>[] sources) Parameters generator IGenerator<TSource> The first generator. sources IGenerator<TSource>[] The other generators. Returns IGenerator<TSource> A new generator. Type Parameters TSource The type of elements to generate. Exceptions ArgumentNullException generator is $(null) ArgumentException Any of generators is null. Interleave<TSource>(IList<IGenerator<TSource>>) Makes a generator that interleaves the elements of the specified generators. public static IGenerator<TSource> Interleave<TSource>(IList<IGenerator<TSource>> sources) Parameters sources IList<IGenerator<TSource>> The source generators. Returns IGenerator<TSource> A new generator. Type Parameters TSource The type of elements to generate. Exceptions ArgumentNullException generators is null. ArgumentException generators is empty. ArgumentException Any of generators is null. InterpolateDither<TSource>(IGenerator<TSource>, IGenerator<int>) Interpolates a sequence, but applies dithering. public static IGenerator<TSource> InterpolateDither<TSource>(this IGenerator<TSource> generator, IGenerator<int> sampleCount) Parameters generator IGenerator<TSource> sampleCount IGenerator<int> Returns IGenerator<TSource> Type Parameters TSource Remarks For example, if the sequence is a binary sequence 1 0 1..., the result is a dithered sequence, something like 1 1 1 1 0 1 1 0 1 0 1 0 0 1 0 0 0 0 Interpolate<TSource>(IGenerator<TSource>, IGenerator<int>, Func<TSource, TSource, float, TSource>) Makes a generator that interpolates between values of a given generator. public static IGenerator<TSource> Interpolate<TSource>(this IGenerator<TSource> generator, IGenerator<int> sampleCount, Func<TSource, TSource, float, TSource> interpolater) Parameters generator IGenerator<TSource> sampleCount IGenerator<int> interpolater Func<TSource, TSource, float, TSource> Returns IGenerator<TSource> Type Parameters TSource Interpolate<TSource>(IGenerator<TSource>, int, Func<TSource, TSource, float, TSource>) Makes a generator that interpolates between values of a given generator. public static IGenerator<TSource> Interpolate<TSource>(this IGenerator<TSource> generator, int sampleCount, Func<TSource, TSource, float, TSource> interpolater) Parameters generator IGenerator<TSource> The source generator. sampleCount int The sample count per cycle. interpolater Func<TSource, TSource, float, TSource> The interpolater function. This function takes three arguments: the first two are the left and right endpoints, and the third is a fraction between 0 and 1. For typical interpolation, the function must return the left endpoint if this fraction is 0, and the right endpoint if the fraction is 1. Returns IGenerator<TSource> A new generator. Type Parameters TSource The type of elements to generate. Examples var baseGenerator = Generator.Count(2); //Generates 0 1 0 1 0 1... var interpolatedGenerator = baseGenerator.Interpolate(2, (x, y, t) => x*(1 - t) + y*t); //Generates 0 0.5f 1 0.5f 0 0.5f.... Remarks The expression (x, y, t) => x*(1 - t) + y*t) is standard linear interpolation. Exceptions ArgumentNullException generator is $(null). ArgumentOutOfRangeException sampleCount not positive. ArgumentNullException interpolater is $(null). Iterate<TSource>(IEnumerable<TSource>, Func<IList<TSource>, TSource>) Makes a generator that uses an iterator function to generate elements. public static IGenerator<TSource> Iterate<TSource>(IEnumerable<TSource> initialElements, Func<IList<TSource>, TSource> iterator) Parameters initialElements IEnumerable<TSource> The initial elements. iterator Func<IList<TSource>, TSource> The iterator function. Returns IGenerator<TSource> Type Parameters TSource The type of elements to generate. Remarks Uses the last n elements to generate the next one, where n is the same number of elements as is provided initially. Exceptions ArgumentNullException iterator Iterate<TSource>(TSource, Func<TSource, TSource>) Makes a generator that returns iterations of the specified initial element. public static IGenerator<TSource> Iterate<TSource>(TSource initialElement, Func<TSource, TSource> iterator) Parameters initialElement TSource The initial element. iterator Func<TSource, TSource> The iteration function. Returns IGenerator<TSource> IGenerator<TSource>. Type Parameters TSource The type of the source generator. Remarks If the iteration function is f and the initial element is x, then the result generator will generate x, f(x), f(f(x)), f(f(f(x))), ... Exceptions ArgumentNullException iterator Iterate<TSource>(TSource, TSource, Func<TSource, TSource, TSource>) Makes a generator that uses an iterator function to generate elements. public static IGenerator<TSource> Iterate<TSource>(TSource initialElement0, TSource initialElement1, Func<TSource, TSource, TSource> iterator) Parameters initialElement0 TSource The first element to generate. initialElement1 TSource The second element to generate. iterator Func<TSource, TSource, TSource> The iterator function. Returns IGenerator<TSource> Type Parameters TSource The type of the t source. Remarks The iterator function is applied the last two items generated to produce the next one. The first two elements are provided by the caller. For example, Iterate(0, 1, (x, y) => x + y); make a generator that produces the Fibonacci numbers. Exceptions ArgumentNullException iterator Iterate<TSource>(TSource, TSource, TSource, Func<TSource, TSource, TSource, TSource>) Makes a generator that uses an iterator function to generate elements. public static IGenerator<TSource> Iterate<TSource>(TSource initialElement0, TSource initialElement1, TSource initialElement2, Func<TSource, TSource, TSource, TSource> iterator) Parameters initialElement0 TSource The first element to generate. initialElement1 TSource The second element to generate. initialElement2 TSource The third element to generate. iterator Func<TSource, TSource, TSource, TSource> The iterator function. Returns IGenerator<TSource> Type Parameters TSource The type of the t source. Remarks The iterator function is applied the last three items generated to produce the next one. The first three elements are provided by the caller. For example, Iterate(0, 0, 1, (x, y, z) => x + y + z); make a generator that produces the Tribonacci numbers. Exceptions ArgumentNullException iterator Iterate<TSource>(TSource, TSource, TSource, TSource, Func<TSource, TSource, TSource, TSource, TSource>) Makes a generator that uses an iterator function to generate elements. public static IGenerator<TSource> Iterate<TSource>(TSource initialElement0, TSource initialElement1, TSource initialElement2, TSource initialElement3, Func<TSource, TSource, TSource, TSource, TSource> iterator) Parameters initialElement0 TSource The first element to generate. initialElement1 TSource The second element to generate. initialElement2 TSource The third element to generate. initialElement3 TSource The fourth element to generate. iterator Func<TSource, TSource, TSource, TSource, TSource> The iterator function. Returns IGenerator<TSource> Type Parameters TSource The type of the t source. Remarks The iterator function is applied the last four items generated to produce the next one. The first four elements are provided by the caller. For example, Iterate(0, 0, 0, 1, (x, y, z, w) => x + y + w + z); make a generator that produces the Tetranacci numbers. Exceptions ArgumentNullException iterator Iterate<TSource, TSource2>(TSource, IGenerator<TSource2>, Func<TSource, TSource2, TSource>) Applies a function on the last element to produce the next element. The function takes two parameters; the second parameter is supplied by a generator. public static IGenerator<TSource> Iterate<TSource, TSource2>(TSource initialElement, IGenerator<TSource2> source, Func<TSource, TSource2, TSource> iterator) Parameters initialElement TSource source IGenerator<TSource2> iterator Func<TSource, TSource2, TSource> Returns IGenerator<TSource> Type Parameters TSource TSource2 Log<TSource>(IGenerator<TSource>) A generator that generates the elements of the source generator, but also Logs the elements to the console. public static IGenerator<TSource> Log<TSource>(this IGenerator<TSource> generator) Parameters generator IGenerator<TSource> The base generator. Returns IGenerator<TSource> Type Parameters TSource The type of the generator's items. Log<TSource>(IGenerator<TSource>, Action<TSource>) A generator that generates the elements of the source generator, but applies a log function to each element as it is generated. public static IGenerator<TSource> Log<TSource>(this IGenerator<TSource> generator, Action<TSource> log) Parameters generator IGenerator<TSource> The generator. log Action<TSource> The log. Returns IGenerator<TSource> IGenerator<TSource>. Type Parameters TSource The type of the source generator. Examples var generator = Generator.Count(4).Log(x => Debug.Log(x.ToString())).Select(x => 2*x); Remarks This generator is useful for debugging, to inspect the results of a internal generator. It should not be used for other purposes. (Generators should generally not have side effects). MarkovRandomInt(float[,]) Generates a Markov chain of integers from a transition table. public static IGenerator<int> MarkovRandomInt(float[,] transitionTable) Parameters transitionTable float[,] The transition table to use. The value in the table at [i][j] is the relative probability that i will be followed by j. Note that values in a row need not add to 1, the values are normalized per row. In each row, there must be at least one positive value. All values must be non-negative. Returns IGenerator<int> A new generator. MarkovRandomInt(float[,], int) Generates a Markov chain of integers from a transition table. public static IGenerator<int> MarkovRandomInt(float[,] transitionTable, int seed) Parameters transitionTable float[,] The transition table to use. The value in the table at [i][j] is the relative probability that i will be followed by j. Note that values in a row need not add to 1, the values are normalized per row. In each row, there must be at least one positive value. All values must be non-negative. seed int The seed to use for the random number generator. Returns IGenerator<int> A new generator. MarkovRandomIntStartsWith(float[,], int) Makes a Markov generator that starts with the given value. public static IGenerator<int> MarkovRandomIntStartsWith(float[,] transitionTable, int initialValue) Parameters transitionTable float[,] initialValue int Returns IGenerator<int> MarkovRandomIntStartsWith(float[,], int, int) Makes a Markov generator that starts with the given value. public static IGenerator<int> MarkovRandomIntStartsWith(float[,] transitionTable, int initialValue, int seed) Parameters transitionTable float[,] initialValue int seed int Returns IGenerator<int> MoveNext<TSource>(IGenerator<TSource>, int) Moves the generator by a specified amount forward. public static void MoveNext<TSource>(this IGenerator<TSource> generator, int count) Parameters generator IGenerator<TSource> The generator. count int The number of times to move the generator forward. Type Parameters TSource The type of the t source. Exceptions ArgumentNullException generator ArgumentOutOfRangeException count;Argument cannot be smaller than 0. NextWhile<TSource>(IGenerator<TSource>, Func<TSource, bool>) Generates the elements from the generator while the predicate applied to elements hold an return them in an enumerable. After calling this method, the next element returned by Next (or the current value of Current) will not satisfy the predicate. public static IEnumerable<TSource> NextWhile<TSource>(this IGenerator<TSource> source, Func<TSource, bool> predicate) Parameters source IGenerator<TSource> The source generator. predicate Func<TSource, bool> The predicate. Returns IEnumerable<TSource> A new enumerator. Type Parameters TSource The type of the source generator. Examples The enumerable in the following will contain the elements 0, 1, 2, 3: var list = Generator.Count(100).NextWhile(x => x < 4); Next<TSource>(IGenerator<TSource>) Returns the next element of the specified generator. public static TSource Next<TSource>(this IGenerator<TSource> generator) Parameters generator IGenerator<TSource> The generator. Returns TSource TSource. Type Parameters TSource The type of the source generator. Exceptions ArgumentNullException generator Next<TSource>(IGenerator<TSource>, int) Returns a list of the next n items from the generator. public static IEnumerable<TSource> Next<TSource>(this IGenerator<TSource> generator, int count) Parameters generator IGenerator<TSource> The generator. count int How many items to return. Returns IEnumerable<TSource> IEnumerable<TResult>. Type Parameters TSource The type of the source. Exceptions ArgumentNullException generator ArgumentOutOfRangeException count;Argument must be positive. OfType<TResult>(IGenerator) Makes a generator that will generate elements of a source generator that is of the given type. public static IGenerator<TResult> OfType<TResult>(this IGenerator generator) where TResult : class Parameters generator IGenerator The source generator. Returns IGenerator<TResult> A new generator. Type Parameters TResult The type of the elements the generator must generate. OpenSawTooth(IGenerator<int>) Makes a generator that produces evenly spaced floats from 0 (included) to 1 (excluded), and repeats the result (but with the number of samples each time given by a generator). public static IGenerator<float> OpenSawTooth(IGenerator<int> sampleCount) Parameters sampleCount IGenerator<int> The number of samples per cycle. Returns IGenerator<float> A new generator. Remarks This generator is designed to be used with Select<TSource, TResult>(IGenerator<TSource>, Func<TSource, TResult>) to generate outputs of periodic functions. Exceptions ArgumentOutOfRangeException sampleCountis not positive. OpenSawTooth(int) Makes a generator that produces evenly spaced floats from 0 (included) to 1 (excluded), and repeats the result. public static IGenerator<float> OpenSawTooth(int sampleCount) Parameters sampleCount int The number of samples per cycle. Returns IGenerator<float> A new generator. Remarks This generator is designed to be used with Select<TSource, TResult>(IGenerator<TSource>, Func<TSource, TResult>) to generate outputs of periodic functions. var generator = Generator.OpenSawTooth(100).Select(x => Math.Sin(2*Math.PI * x)); Exceptions ArgumentOutOfRangeException sampleCountis not positive. Pad<TSource>(IGenerator<TSource>, IEnumerable<TSource>) Pads the specified generator with elements from a given list. public static IGenerator<TSource> Pad<TSource>(this IGenerator<TSource> generator, IEnumerable<TSource> padding) Parameters generator IGenerator<TSource> The source generator. padding IEnumerable<TSource> The padding. Returns IGenerator<TSource> IGenerator<TSource>. Type Parameters TSource The type of elements to generate. Examples var paddedGenerator = Generator.Count(4).Pad(new List(){7, 8}); //will generate 7 8 0 1 2 3 0 1 2 3... Exceptions ArgumentNullException generator is null. ArgumentNullException padding is null. Pad<TSource>(IGenerator<TSource>, TSource, int) Pads the specified generator with a constant element repeated a specified number of times. public static IGenerator<TSource> Pad<TSource>(this IGenerator<TSource> generator, TSource padding, int padCount) Parameters generator IGenerator<TSource> The source generator. padding TSource The padding value. padCount int The number of values to pad. Returns IGenerator<TSource> A new generator. Type Parameters TSource The type of elements to generate. Examples var generator = Generator.Count(4).Pad(0, 3); //will generate 0 0 0 0 1 2 0 1 2 ... Poisson(int, int) A boolean generator that returns true at intervals uniformly distributed between minRadius and maxRadius. public static IGenerator<bool> Poisson(int minRadius, int maxRadius) Parameters minRadius int The minimum radius. maxRadius int The maximum radius. Returns IGenerator<bool> RandomBoolGenerator(float) Makes a generator that returns random boolean values, true with the specified probability. public static IGenerator<bool> RandomBoolGenerator(float probability) Parameters probability float The probability of generating $(true). Returns IGenerator<bool> A new generator. Exceptions ArgumentException probability does not lie between 0 and 1 (inclusive) RandomBoolGenerator(float, int) Makes a generator that returns random boolean values, true with the specified probability. public static IGenerator<bool> RandomBoolGenerator(float probability, int seed) Parameters probability float The probability of generating $(true). seed int The seed to use for the random num ber generator. Returns IGenerator<bool> A new generator. Exceptions ArgumentException probability does not lie between 0 and 1 (inclusive) RepeatEach<TSource>(IGenerator<TSource>, IGenerator<int>) Makes a new generator that will repeat each of the given generators elements a number of times. public static IGenerator<TSource> RepeatEach<TSource>(this IGenerator<TSource> generator, IGenerator<int> repeatCountGenerator) Parameters generator IGenerator<TSource> The source generator. repeatCountGenerator IGenerator<int> A generator used to get the number of times each element will be generated. Returns IGenerator<TSource> A new generator. Type Parameters TSource The type of the elements of the source generator. Exceptions ArgumentNullException generator ArgumentNullException repeatCountGenerator is null. RepeatEach<TSource>(IGenerator<TSource>, int) Makes a new generator that will repeat each of the given generators elements a number of times. public static IGenerator<TSource> RepeatEach<TSource>(this IGenerator<TSource> generator, int repeatCount) Parameters generator IGenerator<TSource> The source generator. repeatCount int The number of times each element will be generated. Returns IGenerator<TSource> A new generator. Type Parameters TSource The type of the elements of the source generator. Exceptions ArgumentNullException generator is null ArgumentOutOfRangeException repeatCount is not positive. Repeat<TSource>(IEnumerable<TSource>) Makes a generator that repeats elements of the given list over and over. public static IGenerator<TSource> Repeat<TSource>(IEnumerable<TSource> list) Parameters list IEnumerable<TSource> The list from which elements are generated. Returns IGenerator<TSource> A new generator. Type Parameters TSource The type of elements in the given list and the type of elements that will be generated. Exceptions ArgumentNullException list SelectMany<TSource, TResult>(IGenerator<TSource>, Func<TSource, IEnumerable<TResult>>) For each item in the source generator, a list of items is generated, but the items are generated one by one (and not as a list of items). public static IGenerator<TResult> SelectMany<TSource, TResult>(this IGenerator<TSource> generator, Func<TSource, IEnumerable<TResult>> selector) Parameters generator IGenerator<TSource> The generator. selector Func<TSource, IEnumerable<TResult>> The function that transform elements of the source generator to a list of items. Returns IGenerator<TResult> IGenerator<TResult>. Type Parameters TSource The type of the source generator. TResult The type of the result generator. Exceptions ArgumentNullException generator or selector Select<TResult>(IGenerator<float>, ResponseCurveBase<TResult>) Makes a new generator by transforming the elements of a given float generator using a response curve. public static IGenerator<TResult> Select<TResult>(this IGenerator<float> generator, ResponseCurveBase<TResult> selector) Parameters generator IGenerator<float> The source generator. selector ResponseCurveBase<TResult> The selector function, used to transform floats to elements. Returns IGenerator<TResult> IGenerator<TResult>. Type Parameters TResult The type of elements this generator will generate. Exceptions ArgumentNullException generator or selector is null Select<TSource, TResult>(IGenerator<TSource>, Func<TSource, TResult>) Makes a generator which generates items that are transformed, generated from a given generator. public static IGenerator<TResult> Select<TSource, TResult>(this IGenerator<TSource> generator, Func<TSource, TResult> selector) Parameters generator IGenerator<TSource> The generator. selector Func<TSource, TResult> The function used to transform elements of the source generator. Returns IGenerator<TResult> IGenerator<TResult>. Type Parameters TSource The type of the source generator. TResult The type of the result generator. Exceptions ArgumentNullException generator or selector SkipAndTake<TSource>(IGenerator<TSource>, int, int) Makes a generator that repeatedly skips over and takes elements from a given generator. public static IGenerator<TSource> SkipAndTake<TSource>(this IGenerator<TSource> generator, int skipCount, int takeCount) Parameters generator IGenerator<TSource> The source generator. skipCount int The number of elements to skip each cycle. takeCount int The number of elements to take each cycle. Returns IGenerator<TSource> A new generator. Type Parameters TSource The type of elements of the source generator. Examples The following generator will generate 0 1 2 4 5 6 8 9 10... var generator = Generator .Count(100) .TakeAndSkip(3, 1); Exceptions ArgumentNullException generator is null. ArgumentOutOfRangeException takeCount is not larger than 0. ArgumentOutOfRangeException skipCount is negative. Skip<TSource>(IGenerator<TSource>, int) Makes a generator that skips over the specified number of elements from the source generator. public static IGenerator<TSource> Skip<TSource>(this IGenerator<TSource> source, int count) Parameters source IGenerator<TSource> The source generator. count int The number of elements to skip. Returns IGenerator<TSource> A new generator. Type Parameters TSource The type of elements of the source generator. Examples The following generator will generate 3 4 0 1 2 3 4 0 ... var generator = Generator.Count(5).Skip(3); Exceptions ArgumentNullException generator is null. ArgumentOutOfRangeException count is negative. Sum(IGenerator<int>) Makes a generator that will generate partial sums of a given generator. public static IGenerator<int> Sum(this IGenerator<int> source) Parameters source IGenerator<int> The generator. Returns IGenerator<int> A new generator. Examples The following generator will generate 0, 1, 2, 3, 4, 5... var generator = Generator.Constant(1).Sum(); Exceptions ArgumentNullException source is null Sum(IGenerator<float>) Makes a generator that will generate partial sums of a given generator. public static IGenerator<float> Sum(this IGenerator<float> source) Parameters source IGenerator<float> The generator. Returns IGenerator<float> A new generator. Examples The following generator will generate 0f, 1f, 2f, 3f, 4f, 5f... var generator = Generator.Constant(1f).Sum(); Exceptions ArgumentNullException source is null SwitchAfter<TSource>(IGenerator<TSource>, int, IGenerator<TSource>) Generates elements from a source generator for the given number of steps, then switches to a second generator. public static IGenerator<TSource> SwitchAfter<TSource>(this IGenerator<TSource> initialSource, int steps, IGenerator<TSource> newSource) Parameters initialSource IGenerator<TSource> The source generator that will be used before the switch. steps int The number of steps before switching. newSource IGenerator<TSource> The new generator that will be used after the switch. Returns IGenerator<TSource> A new generator. Type Parameters TSource The type of the source generator. Exceptions ArgumentNullException source is null ArgumentNullException newGenerator is null SwitchWhen<TSource>(IGenerator<TSource>, Func<TSource, bool>, IGenerator<TSource>) Generates elements from the source generator until a condition is met, then generate elements from a second generator. public static IGenerator<TSource> SwitchWhen<TSource>(this IGenerator<TSource> initialSource, Func<TSource, bool> predicate, IGenerator<TSource> newSource) Parameters initialSource IGenerator<TSource> The source. predicate Func<TSource, bool> The predicate. newSource IGenerator<TSource> The new generator. Returns IGenerator<TSource> A new generator Type Parameters TSource The type of the source generator. Exceptions ArgumentNullException source is null ArgumentNullException predicate is null ArgumentNullException newGenerator is null TakeAndSkip<TSource>(IGenerator<TSource>, int, int) Makes a generator that repeatedly takes and skips over elements from a given generator. public static IGenerator<TSource> TakeAndSkip<TSource>(this IGenerator<TSource> generator, int takeCount, int skipCount) Parameters generator IGenerator<TSource> The source generator. takeCount int The number of elements to take each cycle. skipCount int The number of elements to skip each cycle. Returns IGenerator<TSource> A new generator. Type Parameters TSource The type of elements of the source generator. Examples The following generator will generate 0 1 2 4 5 6 8 9 10... var generator = Generator .Count(100) .TakeAndSkip(3, 1); Exceptions ArgumentNullException generator is null. ArgumentOutOfRangeException takeCount is not larger than 0. ArgumentOutOfRangeException skipCount is negative. UniformRandomFloat() Makes a generator hat generates floats uniformly between 0 and 1. public static IGenerator<float> UniformRandomFloat() Returns IGenerator<float> A new generator. UniformRandomFloat(int) Makes a generator that generates floats uniformly between 0 and 1. public static IGenerator<float> UniformRandomFloat(int seed) Parameters seed int Returns IGenerator<float> A new generator. UniformRandomInt(int) Makes a generator that generates integers uniformly distributed between 0 (included) and the specified limit (excluded). public static IGenerator<int> UniformRandomInt(int upperLimitExcluded) Parameters upperLimitExcluded int The upper limit (excluded). Returns IGenerator<int> IGenerator<System.Int32>. Exceptions ArgumentOutOfRangeException upperLimitExcludedis not positive. UniformRandomInt(int, int) Makes a generator hat generates integers uniformly distributed between 0 (included) and the specified limit (excluded). public static IGenerator<int> UniformRandomInt(int upperLimitExcluded, int seed) Parameters upperLimitExcluded int The upper limit (excluded). seed int The seed to use for the random number generator. Returns IGenerator<int> A new generator. Exceptions ArgumentOutOfRangeException upperLimitExcludedis not positive. UniformVector2InCircle(float) Generates vectors uniformly distributed in a given circle. public static IGenerator<Vector2> UniformVector2InCircle(float radius) Parameters radius float Returns IGenerator<Vector2> UniformVector2InRect(Vector2) Generates vectors uniformly distributed in a given rectangle. public static IGenerator<Vector2> UniformVector2InRect(Vector2 dimensions) Parameters dimensions Vector2 The dimensions of the rectangle. Returns IGenerator<Vector2> WhereWindow<TSource>(IGenerator<TSource>, int, Func<TSource[], bool>) Only generates an item if the window of the item passes the predicate. public static IGenerator<TSource> WhereWindow<TSource>(this IGenerator<TSource> generator, int windowSize, Func<TSource[], bool> predicate) Parameters generator IGenerator<TSource> The generator. windowSize int Size of the window. predicate Func<TSource[], bool> The predicate. Returns IGenerator<TSource> IGenerator<TSource>. Type Parameters TSource The type of the source generator. Remarks The window of an item is the element and a number of elements after the element (together, the number of elements is windowSize). Exceptions ArgumentNullException generator or predicate ArgumentOutOfRangeException windowSize;Argument must be positive. Where<TSource>(IGenerator<TSource>, IGenerator<bool>) Makes a generator that will only generate elements that pass the predicate generated by the predicate generator. public static IGenerator<TSource> Where<TSource>(this IGenerator<TSource> generator, IGenerator<bool> predicateGenerator) Parameters generator IGenerator<TSource> predicateGenerator IGenerator<bool> Returns IGenerator<TSource> Type Parameters TSource Where<T>(IGenerator<T>, IGenerator<bool>, int) Makes a generator that will only generate elements that pass the predicate generated by the predicate generator. If the source elements does not provide elements that pass the predicate for the given number of maximum iterations, an exception is thrown. This is to prevent a stalling the generator forever. public static IGenerator<T> Where<T>(this IGenerator<T> generator, IGenerator<bool> predicateGenerator, int maxIterations) Parameters generator IGenerator<T> predicateGenerator IGenerator<bool> maxIterations int Returns IGenerator<T> Type Parameters T Where<TSource>(IGenerator<TSource>, Func<TSource, bool>) Makes a generator that will only generate elements that pass the predicate. public static IGenerator<TSource> Where<TSource>(this IGenerator<TSource> generator, Func<TSource, bool> predicate) Parameters generator IGenerator<TSource> The generator. predicate Func<TSource, bool> The predicate. Returns IGenerator<TSource> IGenerator<TSource>. Type Parameters TSource The type of the source generator. Where<T>(IGenerator<T>, Func<T, bool>, int) Makes a generator that will only generate elements that pass the predicate. If the source elements does not provide elements that pass the predicate for the given number of maximum iterations, an exception is thrown. This is to prevent a stalling the generator forever. public static IGenerator<T> Where<T>(this IGenerator<T> generator, Func<T, bool> predicate, int maxIterations) Parameters generator IGenerator<T> predicate Func<T, bool> maxIterations int Returns IGenerator<T> Type Parameters T Window<TSource>(IGenerator<TSource>, int) Makes a generator that generates a moving window of elements over a given generator. public static IGenerator<TSource[]> Window<TSource>(this IGenerator<TSource> source, int windowSize) Parameters source IGenerator<TSource> The source generator. windowSize int Size of the window. Returns IGenerator<TSource[]> A new generator. Type Parameters TSource The type of the source generator. Examples In the following example, var generator = Generator.Count(4).Window(2); the generator will generate (0 1) (1 2) (2 3) (3 0) (0 1)... The window of size 2 move one element (of the original generator) at a time. The following is an implementation of a box blur on the given sequence: public static IGenerator<float> BoxBlur(IGenerator<float> generator) { return generator.Window(3).Select(w => (w[0] + w[1] + w[2])/3f); } Exceptions ArgumentOutOfRangeException windowSize;Argument must be positive."
  },
  "api/RTCube.Extensions.Algorithms.IBuffer-1.html": {
    "href": "api/RTCube.Extensions.Algorithms.IBuffer-1.html",
    "title": "Interface IBuffer<T> | RTCubeExtensions 文档",
    "keywords": "Interface IBuffer<T> Namespace RTCube.Extensions.Algorithms Represents a generic buffer interface. [Version(4, 1, 0)] public interface IBuffer<T> : IReadOnlyBuffer<T>, IEnumerable<T>, IEnumerable Type Parameters T The type of elements in the buffer. Inherited Members IReadOnlyBuffer<T>.Capacity IReadOnlyBuffer<T>.Count IReadOnlyBuffer<T>.First IReadOnlyBuffer<T>.IsFull IReadOnlyBuffer<T>.Last IReadOnlyBuffer<T>.this[int] IEnumerable<T>.GetEnumerator() Extension Methods CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) ThrowHelper.ThrowIfNull(object, string) Methods Clear() Clears all items from the buffer. void Clear() Insert(T) Inserts an item into the buffer. void Insert(T item) Parameters item T The item to insert into the buffer."
  },
  "api/RTCube.Extensions.Algorithms.IGenerator-1.html": {
    "href": "api/RTCube.Extensions.Algorithms.IGenerator-1.html",
    "title": "Interface IGenerator<TResult> | RTCubeExtensions 文档",
    "keywords": "Interface IGenerator<TResult> Namespace RTCube.Extensions.Algorithms All generic generators implement this interface. [Version(1, 0, 0)] public interface IGenerator<out TResult> : IGenerator Type Parameters TResult The type of the elements the generator generates. Inherited Members IGenerator.MoveNext() Extension Methods Generator.Cast<TResult>(IGenerator) Generator.OfType<TResult>(IGenerator) Generator.Aggregate<TSource>(IGenerator<TSource>, Func<TSource, TSource, TSource>) Generator.Aggregate<TSource>(IGenerator<TSource>, Func<TSource, TSource, TSource>, TSource) Generator.Aggregate<TSource, TResult>(IGenerator<TSource>, Func<TResult, TSource, TResult>, TResult) Generator.Apply<TSource>(IGenerator<TSource>, Action<TSource>) Generator.Group<TSource>(IGenerator<TSource>, IGenerator<int>) Generator.Group<TSource>(IGenerator<TSource>, int) Generator.InterpolateDither<TSource>(IGenerator<TSource>, IGenerator<int>) Generator.Interpolate<TSource>(IGenerator<TSource>, IGenerator<int>, Func<TSource, TSource, float, TSource>) Generator.Interpolate<TSource>(IGenerator<TSource>, int, Func<TSource, TSource, float, TSource>) Generator.Log<TSource>(IGenerator<TSource>) Generator.Log<TSource>(IGenerator<TSource>, Action<TSource>) Generator.MoveNext<TSource>(IGenerator<TSource>, int) Generator.NextWhile<TSource>(IGenerator<TSource>, Func<TSource, bool>) Generator.Next<TSource>(IGenerator<TSource>) Generator.Next<TSource>(IGenerator<TSource>, int) Generator.Pad<TSource>(IGenerator<TSource>, IEnumerable<TSource>) Generator.Pad<TSource>(IGenerator<TSource>, TSource, int) Generator.RepeatEach<TSource>(IGenerator<TSource>, IGenerator<int>) Generator.RepeatEach<TSource>(IGenerator<TSource>, int) Generator.SelectMany<TSource, TResult>(IGenerator<TSource>, Func<TSource, IEnumerable<TResult>>) Generator.Select<TSource, TResult>(IGenerator<TSource>, Func<TSource, TResult>) Generator.SkipAndTake<TSource>(IGenerator<TSource>, int, int) Generator.Skip<TSource>(IGenerator<TSource>, int) Generator.SwitchAfter<TSource>(IGenerator<TSource>, int, IGenerator<TSource>) Generator.SwitchWhen<TSource>(IGenerator<TSource>, Func<TSource, bool>, IGenerator<TSource>) Generator.TakeAndSkip<TSource>(IGenerator<TSource>, int, int) Generator.WhereWindow<TSource>(IGenerator<TSource>, int, Func<TSource[], bool>) Generator.Where<TSource>(IGenerator<TSource>, IGenerator<bool>) Generator.Where<T>(IGenerator<T>, IGenerator<bool>, int) Generator.Where<TSource>(IGenerator<TSource>, Func<TSource, bool>) Generator.Where<T>(IGenerator<T>, Func<T, bool>, int) Generator.Window<TSource>(IGenerator<TSource>, int) ThrowHelper.ThrowIfNull(object, string) Remarks Instances of IGenerator<TResult> are usually obtained from the static methods in the Generator. See [Generators](../content/Generators.md) for more information. To correctly implement this interface: A call to Current immediately after constructing the class must give the first element of the generator. This is in contrast to IEnumerator, where a call to MoveNext() must be made first. Calls to Current must always give a valid element, no matter how many times MoveNext() has been called. Generators never end. Calls to Current must always give the same value until the next call to MoveNext() is made. MoveNext() must make all computations to generate the next element. In general, a private variable holds the current value, is calculated in this method, and returned by Current. Generators that are built from other generators must CloneAndRestart() the generators and store the clones. This ensures calls to MoveNext() in this generator won't affect elements generated by a generated passed in as an argument in the constructor. The generator must store all information needed to be able to produce an equivalent generator in CloneAndRestart(). Generally, generators are equivalent when they generate the same elements (in the same order). There are some exceptions, for example, unseeded random number generators. It is not necessary to CloneAndRestart() generators stored internally when creating a new instance of the generator, since that should be done in the constructor. Properties Current Gets the element last generated by this generator. TResult Current { get; } Property Value TResult Methods CloneAndRestart() Clones the generator and returns the clone in a restarted state. IGenerator<out TResult> CloneAndRestart() Returns IGenerator<TResult>"
  },
  "api/RTCube.Extensions.Algorithms.IGenerator.html": {
    "href": "api/RTCube.Extensions.Algorithms.IGenerator.html",
    "title": "Interface IGenerator | RTCubeExtensions 文档",
    "keywords": "Interface IGenerator Namespace RTCube.Extensions.Algorithms A generator can produce an infinite sequence of objects. [Version(1, 0, 0)] public interface IGenerator Extension Methods Generator.Cast<TResult>(IGenerator) Generator.OfType<TResult>(IGenerator) ThrowHelper.ThrowIfNull(object, string) Properties Current Gets the element last generated by this generator. object Current { get; } Property Value object Remarks It is always (in theory) valid to query this property. When called right after the generator is constructed (before calls to move next), it gives the first element of this generator. In practice, it is possible for a generator to overflow. Methods CloneAndRestart() Clones the generator and returns the clone in a restarted state. IGenerator CloneAndRestart() Returns IGenerator MoveNext() Generates the next element. void MoveNext() See Also IGenerator<TResult>"
  },
  "api/RTCube.Extensions.Algorithms.IReadOnlyBuffer-1.html": {
    "href": "api/RTCube.Extensions.Algorithms.IReadOnlyBuffer-1.html",
    "title": "Interface IReadOnlyBuffer<T> | RTCubeExtensions 文档",
    "keywords": "Interface IReadOnlyBuffer<T> Namespace RTCube.Extensions.Algorithms Represents a generic buffer interface that only supports reading capabilities. public interface IReadOnlyBuffer<out T> : IEnumerable<T>, IEnumerable Type Parameters T Inherited Members IEnumerable<T>.GetEnumerator() Extension Methods CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) ThrowHelper.ThrowIfNull(object, string) Properties Capacity Gets the maximum number of elements the buffer can hold. int Capacity { get; } Property Value int Count Gets the current number of elements in the buffer. int Count { get; } Property Value int First Gets the first element in the buffer. T First { get; } Property Value T IsFull Gets a value indicating whether the buffer is full. bool IsFull { get; } Property Value bool this[int] Gets the element at the specified index. T this[int index] { get; } Parameters index int Property Value T Last Gets the last element in the buffer. T Last { get; } Property Value T"
  },
  "api/RTCube.Extensions.Algorithms.IResizeableBuffer-1.html": {
    "href": "api/RTCube.Extensions.Algorithms.IResizeableBuffer-1.html",
    "title": "Interface IResizeableBuffer<T> | RTCubeExtensions 文档",
    "keywords": "Interface IResizeableBuffer<T> Namespace RTCube.Extensions.Algorithms A buffer that can change its capacity. public interface IResizeableBuffer<T> : IBuffer<T>, IReadOnlyBuffer<T>, IEnumerable<T>, IEnumerable Type Parameters T Inherited Members IBuffer<T>.Clear() IBuffer<T>.Insert(T) IReadOnlyBuffer<T>.Capacity IReadOnlyBuffer<T>.Count IReadOnlyBuffer<T>.First IReadOnlyBuffer<T>.IsFull IReadOnlyBuffer<T>.Last IReadOnlyBuffer<T>.this[int] IEnumerable<T>.GetEnumerator() Extension Methods BufferExtensions.SetCapacity<T>(IResizeableBuffer<T>, int) CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) ThrowHelper.ThrowIfNull(object, string) Methods DecreaseCapacity(int) Decreases the capacity of this IResizeableBuffer<T> by the specified decrement (up to the current capacity). int DecreaseCapacity(int decrement) Parameters decrement int How much to decrease the capacity by. Returns int The actual amount by which the capacity was decreased. Remarks If the capacity is lower than the current Count, elements are removed from the buffer until the capacity is reached. Exceptions ArgumentOutOfRangeException The decrement is negative. IncreaseCapacity(int) Increases the capacity of this IResizeableBuffer<T> by the specified increment. void IncreaseCapacity(int increment) Parameters increment int How much to increase the capacity by. Exceptions ArgumentOutOfRangeException The increment is negative."
  },
  "api/RTCube.Extensions.Algorithms.IResponseCurve-1.html": {
    "href": "api/RTCube.Extensions.Algorithms.IResponseCurve-1.html",
    "title": "Interface IResponseCurve<T> | RTCubeExtensions 文档",
    "keywords": "Interface IResponseCurve<T> Namespace RTCube.Extensions.Algorithms This interface represents a piecewise linear curve, with input-output pairs at the bends. [Version(1, 0, 0)] public interface IResponseCurve<out T> Type Parameters T The type of the output, usually a type that can be interpolated. Extension Methods ResponseCurve.Select<TSource, TResult>(IResponseCurve<TSource>, Func<TSource, TResult>) ThrowHelper.ThrowIfNull(object, string) Remarks This class is the base of the that described in AI Programming Wisdom 1, \"The Beauty of Response Curves\", by Bob Alexander. The inputs need not be spread uniformly. You can implement this interface directly, or use the ResponseCurveBase<T> class as a base, which is often more convenient for interpolatable types. It can make sense to implement this interface for discrete types, although often broader concept is needed, making this interface unsuitable. For example, you could implement a class InRange that maps inputs to true if they are in a given range, and false otherwise. But this class would make sense for other inputs than float too, so limiting it by implementing this interface is not good. Properties this[float] Evaluates the curve at the given input and returns the result. T this[float input] { get; } Parameters input float The input for which output is sought. Property Value T Remarks If the input is below the inputMin given in the constructor, the output is clamped to the first output sample. If the input is above the inputMax given in the constructor, the output is clamped to the last output sample. Otherwise, an index is calculated, and the output is interpolated between outputSample[index] and outputSample[index + 1]. Methods Evaluate(float) Evaluates the curve at the given input and returns the result. T Evaluate(float input) Parameters input float The input for which output is sought. Returns T Remarks If the input is below the inputMin given in the constructor, the output is clamped to the first output sample. If the input is above the inputMax given in the constructor, the output is clamped to the last output sample. Otherwise, an index is calculated, and the output is interpolated between outputSample[index] and outputSample[index + 1]."
  },
  "api/RTCube.Extensions.Algorithms.IndexPriorityQueue-2.html": {
    "href": "api/RTCube.Extensions.Algorithms.IndexPriorityQueue-2.html",
    "title": "Class IndexPriorityQueue<TElement, TPriority> | RTCubeExtensions 文档",
    "keywords": "Class IndexPriorityQueue<TElement, TPriority> Namespace RTCube.Extensions.Algorithms Represents a generic index-based priority queue where elements are ordered based on their priority determined by an IComparer<T>. [Version(1, 0, 0)] [Obsolete(\"Use RandomAccessPriorityQueue instead.\")] public class IndexPriorityQueue<TElement, TPriority> Type Parameters TElement The type of elements in the priority queue. TPriority The type of the priority of elements in the priority queue. Inheritance object IndexPriorityQueue<TElement, TPriority> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks This implementation of a priority queue uses an array-based binary heap. It associates each value with an index, allowing for efficient updates of the queue based on index. The index should be between 0 (inclusive) and the given capacity (exclusive). Constructors IndexPriorityQueue(int, IComparer<TPriority>) Initializes a new instance of the IndexPriorityQueue<TElement, TPriority> class with a specified capacity and comparer. public IndexPriorityQueue(int capacity, IComparer<TPriority> comparer) Parameters capacity int The maximum number of elements the priority queue can hold. comparer IComparer<TPriority> The IComparer to determine the priority of elements. Properties Count Gets the number of elements currently in the priority queue. public int Count { get; } Property Value int IsEmpty Gets a value indicating whether the priority queue is empty. public bool IsEmpty { get; } Property Value bool true if the queue is empty; otherwise, false. Methods Clear() Clears all elements from the priority queue. public void Clear() Contains(int) Determines whether the priority queue contains the specified index. public bool Contains(int index) Parameters index int The index to check for presence in the queue. Returns bool true if the index is in the queue; otherwise, false. Dequeue() Removes and returns the minimum element from the priority queue. public (int index, TElement value) Dequeue() Returns (int index, TElement value) A tuple containing the index and value of the minimum element that was removed. Enqueue(int, TElement, TPriority) Inserts a value with an associated index into the priority queue. public void Enqueue(int index, TElement value, TPriority priority) Parameters index int The index associated with the value. value TElement The value to insert. priority TPriority The priority of the value. Peek() Returns the minimum element of the priority queue without removing it. public (int index, TElement value) Peek() Returns (int index, TElement value) A tuple containing the index and value of the minimum element. Remove(int) Removes the element at the specified index from the priority queue. public void Remove(int index) Parameters index int The index of the element to remove. TryDequeue(out (int index, TElement value)) Dequeues the minimum element from the priority queue if it is not empty. public bool TryDequeue(out (int index, TElement value) result) Parameters result (int index, TElement value) A tuple containing the index and value of the minimum element that was removed. Returns bool true if the queue was not empty and an element was removed; false otherwise. TryPeek(out (int index, TElement value)) Peeks at the minimum element of the priority queue if it is not empty. public bool TryPeek(out (int index, TElement value) result) Parameters result (int index, TElement value) A tuple containing the index and value of the minimum element. Returns bool true if the queue was not empty; otherwise, false. UpdateValue(int, TElement, TPriority) Updates the value of the element at the specified index. public void UpdateValue(int index, TElement element, TPriority priority) Parameters index int The index of the element to update. element TElement The new value to replace the current value. priority TPriority The new priority of the element."
  },
  "api/RTCube.Extensions.Algorithms.Integrator.html": {
    "href": "api/RTCube.Extensions.Algorithms.Integrator.html",
    "title": "Class Integrator | RTCubeExtensions 文档",
    "keywords": "Class Integrator Namespace RTCube.Extensions.Algorithms Represents an integrator that calculates the sum of float values over a specified window. [Version(1, 0, 0)] public sealed class Integrator Inheritance object Integrator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks The integrator assumes a constant sample rate. Therefore, while technically the integral requires scaling each interval by the time between samples, this constant can be absorbed by PidController, allowing the integrator to focus solely on the sum of values. Constructors Integrator(int) Initializes a new instance of the Integrator class. public Integrator(int sumWindow) Parameters sumWindow int The number of values to consider in the sum. Properties Count Gets the number of values in this Integrator. public int Count { get; } Property Value int Sum Gets the sum of the values in the buffer. public float Sum { get; } Property Value float Remarks Technically, we need to scale each interval by the time between samples. We assume the sample rate is constant, and that it can be absorbed by the factor in PidController. Value Gets or sets the value of this Integrator. public float Value { get; set; } Property Value float"
  },
  "api/RTCube.Extensions.Algorithms.LSystem-1.html": {
    "href": "api/RTCube.Extensions.Algorithms.LSystem-1.html",
    "title": "Class LSystem<TSymbol> | RTCubeExtensions 文档",
    "keywords": "Class LSystem<TSymbol> Namespace RTCube.Extensions.Algorithms A lightweight implementation of an L-system. [Version(1, 0, 0)] public class LSystem<TSymbol> Type Parameters TSymbol This type must be comparable using ==, or you should feed an IEqualityComparer. Inheritance object LSystem<TSymbol> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors LSystem() Creates a new empty LSystem. public LSystem() LSystem(IEqualityComparer<TSymbol>) Constructs a new empty L-System that will use the given comparer to compare symbols. public LSystem(IEqualityComparer<TSymbol> comparer) Parameters comparer IEqualityComparer<TSymbol> The comparer to use to compare symbols. Methods AddRewriteRule(TSymbol, IEnumerable<TSymbol>) Adds a new rewrite rule to the system. public void AddRewriteRule(TSymbol symbol, IEnumerable<TSymbol> replacement) Parameters symbol TSymbol replacement IEnumerable<TSymbol> Rewrite(IEnumerable<TSymbol>) Rewrites a string using the rewrite rules. public IEnumerable<TSymbol> Rewrite(IEnumerable<TSymbol> str) Parameters str IEnumerable<TSymbol> The string to rewrite. Returns IEnumerable<TSymbol> The rewritten string. Rewrite(IEnumerable<TSymbol>, int) Performs a rewrite on a string using the rewrite rules n times. public IEnumerable<TSymbol> Rewrite(IEnumerable<TSymbol> str, int n) Parameters str IEnumerable<TSymbol> The string to rewrite. n int The number of times to rewrite it. Returns IEnumerable<TSymbol> The rewritten string."
  },
  "api/RTCube.Extensions.Algorithms.PidController.html": {
    "href": "api/RTCube.Extensions.Algorithms.PidController.html",
    "title": "Class PidController | RTCubeExtensions 文档",
    "keywords": "Class PidController Namespace RTCube.Extensions.Algorithms Represents a Proportional-Integral-Derivative (PID) controller that calculates control values based on the difference between a desired set point and a measured process variable. [Version(1, 0, 0)] public sealed class PidController Inheritance object PidController Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors PidController(int, float, float, float) Initializes a new instance of the PidController class with specified gains and integration window. public PidController(int integrationWindow, float proportionalGain, float derivativeGain, float integralGain) Parameters integrationWindow int The number of values to consider in the integrator's sum. proportionalGain float The gain for the proportional part of the PID controller. derivativeGain float The gain for the derivative part of the PID controller. integralGain float The gain for the integral part of the PID controller. Properties FilteredValue Gets the filtered control value based on the PID gains and the current, differentiated, and integrated values. public float FilteredValue { get; } Property Value float Value Gets or sets the current value of the PID controller. Setting this value updates both the differentiator and integrator. public float Value { get; set; } Property Value float"
  },
  "api/RTCube.Extensions.Algorithms.RandomAccessPriorityQueue-2.html": {
    "href": "api/RTCube.Extensions.Algorithms.RandomAccessPriorityQueue-2.html",
    "title": "Class RandomAccessPriorityQueue<TElement, TPriority> | RTCubeExtensions 文档",
    "keywords": "Class RandomAccessPriorityQueue<TElement, TPriority> Namespace RTCube.Extensions.Algorithms Represents a generic index-based priority queue where elements are ordered based on their priority determined by an IComparer<T>. [Version(1, 0, 0)] public sealed class RandomAccessPriorityQueue<TElement, TPriority> Type Parameters TElement The type of elements in the priority queue. TPriority The type of the priority of elements in the priority queue. Inheritance object RandomAccessPriorityQueue<TElement, TPriority> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks This implementation of a priority queue uses an array-based binary heap. It associates each value with an index, allowing for efficient updates of the queue based on index. The index should be between 0 (inclusive) and the given capacity (exclusive). Constructors RandomAccessPriorityQueue(int, IComparer<TPriority>) Initializes a new instance of the IndexPriorityQueue<TElement, TPriority> class with a specified capacity and comparer. public RandomAccessPriorityQueue(int capacity, IComparer<TPriority> comparer) Parameters capacity int The maximum number of elements the priority queue can hold. comparer IComparer<TPriority> The IComparer to determine the priority of elements. Properties Count Gets the number of elements currently in the priority queue. public int Count { get; } Property Value int IsEmpty Gets a value indicating whether the priority queue is empty. public bool IsEmpty { get; } Property Value bool true if the queue is empty; otherwise, false. Methods Clear() Clears all elements from the priority queue. public void Clear() Contains(int) Determines whether the priority queue contains the specified index. public bool Contains(int index) Parameters index int The index to check for presence in the queue. Returns bool true if the index is in the queue; otherwise, false. Dequeue() Removes and returns the minimum element from the priority queue. public (int index, TElement value) Dequeue() Returns (int index, TElement value) A tuple containing the index and value of the minimum element that was removed. Enqueue(int, TElement, TPriority) Inserts a value with an associated index into the priority queue. public void Enqueue(int index, TElement value, TPriority priority) Parameters index int The index associated with the value. value TElement The value to insert. priority TPriority The priority of the value. Peek() Returns the minimum element of the priority queue without removing it. public (int index, TElement value) Peek() Returns (int index, TElement value) A tuple containing the index and value of the minimum element. Remove(int) Removes the element at the specified index from the priority queue. public void Remove(int index) Parameters index int The index of the element to remove. TryDequeue(out (int index, TElement value)) Dequeues the minimum element from the priority queue if it is not empty. public bool TryDequeue(out (int index, TElement value) result) Parameters result (int index, TElement value) A tuple containing the index and value of the minimum element that was removed. Returns bool true if the queue was not empty and an element was removed; false otherwise. TryPeek(out (int index, TElement value)) Peeks at the minimum element of the priority queue if it is not empty. public bool TryPeek(out (int index, TElement value) result) Parameters result (int index, TElement value) A tuple containing the index and value of the minimum element. Returns bool true if the queue was not empty; otherwise, false. UpdateValue(int, TElement, TPriority) Updates the value of the element at the specified index. public void UpdateValue(int index, TElement element, TPriority priority) Parameters index int The index of the element to update. element TElement The new value to replace the current value. priority TPriority The new priority of the element."
  },
  "api/RTCube.Extensions.Algorithms.RandomAccessQueue-1.html": {
    "href": "api/RTCube.Extensions.Algorithms.RandomAccessQueue-1.html",
    "title": "Class RandomAccessQueue<T> | RTCubeExtensions 文档",
    "keywords": "Class RandomAccessQueue<T> Namespace RTCube.Extensions.Algorithms Represents a queue that allows random access to its elements. [Version(1, 0, 0)] public class RandomAccessQueue<T> : IReadOnlyCollection<T>, IEnumerable<T>, ICollection, IEnumerable Type Parameters T The type of elements in the queue. Inheritance object RandomAccessQueue<T> Implements IReadOnlyCollection<T> IEnumerable<T> ICollection IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) ThrowHelper.ThrowIfNull(object, string) Remarks This RandomAccessQueue<T> follows the design of Queue<T> very closely, and can be used as a drop-in replacement for it. Constructors RandomAccessQueue(IEnumerable<T>) Initializes a new instance of the RandomAccessQueue<T> class that contains elements copied from the specified collection. public RandomAccessQueue(IEnumerable<T> collection) Parameters collection IEnumerable<T> RandomAccessQueue(int) Initializes a new instance of the RandomAccessQueue<T> class that is empty and has the specified capacity. public RandomAccessQueue(int capacity = 8) Parameters capacity int The initial capacity of the queue. If omitted, the default capacity will be used. Properties Count Gets the number of elements contained in the ICollection. public int Count { get; } Property Value int The number of elements contained in the ICollection. IsEmpty Gets a value indicating whether the queue is empty. public bool IsEmpty { get; } Property Value bool IsFull Gets a value indicating whether the queue is full, that is, Count is equal to the capapcity. public bool IsFull { get; } Property Value bool IsSynchronized Gets a value indicating whether access to the ICollection is synchronized (thread safe). public bool IsSynchronized { get; } Property Value bool true if access to the ICollection is synchronized (thread safe); otherwise, false. this[int] Returns the element at the specified index, where the head of the queue is at index 0. public T this[int index] { get; } Parameters index int The index of the element to retrieve. Property Value T The element at the specified index. Exceptions ArgumentOutOfRangeException The index is out of range. SyncRoot Gets an object that can be used to synchronize access to the ICollection. public object SyncRoot { get; } Property Value object An object that can be used to synchronize access to the ICollection. Methods Clear() Represents a first-in, first-out collection of objects. public void Clear() Contains(T) Represents a first-in, first-out collection of objects. public bool Contains(T element) Parameters element T Returns bool CopyTo(Array, int) Represents a first-in, first-out collection of objects. public void CopyTo(Array array, int index) Parameters array Array index int Dequeue() Represents a first-in, first-out collection of objects. public T Dequeue() Returns T Enqueue(T) Represents a first-in, first-out collection of objects. public void Enqueue(T item) Parameters item T EnsureCapacity(int) Represents a first-in, first-out collection of objects. public void EnsureCapacity(int capacity) Parameters capacity int GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. Peek() Represents a first-in, first-out collection of objects. public T Peek() Returns T ToArray() Represents a first-in, first-out collection of objects. public T[] ToArray() Returns T[] TrimExcess() Represents a first-in, first-out collection of objects. public void TrimExcess() TryDequeue(out T) Represents a first-in, first-out collection of objects. public bool TryDequeue(out T item) Parameters item T Returns bool TryPeek(out T) Represents a first-in, first-out collection of objects. public bool TryPeek(out T item) Parameters item T Returns bool"
  },
  "api/RTCube.Extensions.Algorithms.ResponseCurve.html": {
    "href": "api/RTCube.Extensions.Algorithms.ResponseCurve.html",
    "title": "Class ResponseCurve | RTCubeExtensions 文档",
    "keywords": "Class ResponseCurve Namespace RTCube.Extensions.Algorithms Contains extension methods for Response curves. public static class ResponseCurve Inheritance object ResponseCurve Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Select<TSource, TResult>(IResponseCurve<TSource>, Func<TSource, TResult>) Creates a response curve that transforms the output of the given curve using the given function. [Version(1, 0, 0)] public static IResponseCurve<TResult> Select<TSource, TResult>(this IResponseCurve<TSource> source, Func<TSource, TResult> selector) Parameters source IResponseCurve<TSource> The source curve. selector Func<TSource, TResult> The selector used to transform results from the source curve. Returns IResponseCurve<TResult> IResponseCurve<TResult>. Type Parameters TSource The type of the source response curve. TResult The type of the result response curve. Examples The following makes a response curve that returns string representation of the results of a float response curve: Warning It looks like the sample you are looking for does not exist."
  },
  "api/RTCube.Extensions.Algorithms.ResponseCurveBase-1.html": {
    "href": "api/RTCube.Extensions.Algorithms.ResponseCurveBase-1.html",
    "title": "Class ResponseCurveBase<T> | RTCubeExtensions 文档",
    "keywords": "Class ResponseCurveBase<T> Namespace RTCube.Extensions.Algorithms A class that can be used as the base of the implementation of a response curve. [Version(1, 0, 0)] public abstract class ResponseCurveBase<T> : IResponseCurve<T> Type Parameters T Inheritance object ResponseCurveBase<T> Implements IResponseCurve<T> Derived ResponseCurveColor ResponseCurveFloat ResponseCurveFloatSequence ResponseCurveInt ResponseCurveVector2 ResponseCurveVector3 ResponseCurveVector4 StepResponse<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ResponseCurve.Select<TSource, TResult>(IResponseCurve<TSource>, Func<TSource, TResult>) ThrowHelper.ThrowIfNull(object, string) Remarks This is a more convenient way to implement the IResponseCurve<T> interface, since all you need to do is specify how the type is interpolated by implementing the Lerp(T, T, float) method. There are cases where it makes sense to implement IResponseCurve<T> for a discrete type T, but in those cases this class is not a suitable base, as it is obscure to describe the mapping using interpolation. Constructors ResponseCurveBase(IEnumerable<float>, IEnumerable<T>) Initializes a new instance of the ResponseCurveBase<T> class. protected ResponseCurveBase(IEnumerable<float> inputSamples, IEnumerable<T> outputSamples) Parameters inputSamples IEnumerable<float> Samples of input. Assumes input is monotonically increasing. outputSamples IEnumerable<T> Samples of outputs. Properties this[float] Evaluates the curve at the given input and returns the result. public T this[float input] { get; } Parameters input float The input for which output is sought. Property Value T Remarks If the input is below the inputMin given in the constructor, the output is clamped to the first output sample. If the input is above the inputMax given in the constructor, the output is clamped to the last output sample. Otherwise, an index is calculated, and the output is interpolated between outputSample[index] and outputSample[index + 1]. Methods Evaluate(float) Evaluates the curve at the specified value. public T Evaluate(float t) Parameters t float The value at which to evaluate the curve. Returns T Remarks Equivalent to curve[t]. Lerp(T, T, float) Linearly interpolates between the two given samples. protected abstract T Lerp(T outputSampleMin, T outputSampleMax, float t) Parameters outputSampleMin T The value when t is less than or equal to 0. outputSampleMax T The value when t is greater than or equal to 1. t float The fraction of the minimum sample to use. Returns T"
  },
  "api/RTCube.Extensions.Algorithms.ResponseCurveColor.html": {
    "href": "api/RTCube.Extensions.Algorithms.ResponseCurveColor.html",
    "title": "Class ResponseCurveColor | RTCubeExtensions 文档",
    "keywords": "Class ResponseCurveColor Namespace RTCube.Extensions.Algorithms A response curve with outputs of Color. [Version(1, 0, 0)] public class ResponseCurveColor : ResponseCurveBase<Color>, IResponseCurve<Color> Inheritance object ResponseCurveBase<Color> ResponseCurveColor Implements IResponseCurve<Color> Inherited Members ResponseCurveBase<Color>.this[float] ResponseCurveBase<Color>.Evaluate(float) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ResponseCurve.Select<TSource, TResult>(IResponseCurve<TSource>, Func<TSource, TResult>) ThrowHelper.ThrowIfNull(object, string) Constructors ResponseCurveColor(IEnumerable<float>, IEnumerable<Color>) public ResponseCurveColor(IEnumerable<float> inputSamples, IEnumerable<Color> outputSamples) Parameters inputSamples IEnumerable<float> outputSamples IEnumerable<Color> Methods GetLerp(float, float, Color, Color) public static ResponseCurveColor GetLerp(float x0, float x1, Color y0, Color y1) Parameters x0 float x1 float y0 Color y1 Color Returns ResponseCurveColor Lerp(Color, Color, float) Linearly interpolates between the two given samples. protected override Color Lerp(Color outputSampleMin, Color outputSampleMax, float t) Parameters outputSampleMin Color The value when t is less than or equal to 0. outputSampleMax Color The value when t is greater than or equal to 1. t float The fraction of the minimum sample to use. Returns Color"
  },
  "api/RTCube.Extensions.Algorithms.ResponseCurveFloat.html": {
    "href": "api/RTCube.Extensions.Algorithms.ResponseCurveFloat.html",
    "title": "Class ResponseCurveFloat | RTCubeExtensions 文档",
    "keywords": "Class ResponseCurveFloat Namespace RTCube.Extensions.Algorithms A response curve with outputs of float. [Version(1, 0, 0)] public class ResponseCurveFloat : ResponseCurveBase<float>, IResponseCurve<float> Inheritance object ResponseCurveBase<float> ResponseCurveFloat Implements IResponseCurve<float> Inherited Members ResponseCurveBase<float>.this[float] ResponseCurveBase<float>.Evaluate(float) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ResponseCurve.Select<TSource, TResult>(IResponseCurve<TSource>, Func<TSource, TResult>) ThrowHelper.ThrowIfNull(object, string) Constructors ResponseCurveFloat(IEnumerable<float>, IEnumerable<float>) public ResponseCurveFloat(IEnumerable<float> inputSamples, IEnumerable<float> outputSamples) Parameters inputSamples IEnumerable<float> outputSamples IEnumerable<float> Methods GetLerp(float, float, float, float) public static ResponseCurveFloat GetLerp(float x0, float x1, float y0, float y1) Parameters x0 float x1 float y0 float y1 float Returns ResponseCurveFloat Lerp(float, float, float) Linearly interpolates between the two given samples. protected override float Lerp(float outputSampleMin, float outputSampleMax, float t) Parameters outputSampleMin float The value when t is less than or equal to 0. outputSampleMax float The value when t is greater than or equal to 1. t float The fraction of the minimum sample to use. Returns float"
  },
  "api/RTCube.Extensions.Algorithms.ResponseCurveFloatSequence.html": {
    "href": "api/RTCube.Extensions.Algorithms.ResponseCurveFloatSequence.html",
    "title": "Class ResponseCurveFloatSequence | RTCubeExtensions 文档",
    "keywords": "Class ResponseCurveFloatSequence Namespace RTCube.Extensions.Algorithms A response curve where the outputs are sequences of floats. [Version(1, 0, 0)] public class ResponseCurveFloatSequence : ResponseCurveBase<IList<float>>, IResponseCurve<IList<float>> Inheritance object ResponseCurveBase<IList<float>> ResponseCurveFloatSequence Implements IResponseCurve<IList<float>> Inherited Members ResponseCurveBase<IList<float>>.this[float] ResponseCurveBase<IList<float>>.Evaluate(float) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ResponseCurve.Select<TSource, TResult>(IResponseCurve<TSource>, Func<TSource, TResult>) ThrowHelper.ThrowIfNull(object, string) Constructors ResponseCurveFloatSequence(IEnumerable<float>, IEnumerable<IList<float>>) Constructs a new ResponseCurveFloatSequence with the given input and output samples. public ResponseCurveFloatSequence(IEnumerable<float> inputSamples, IEnumerable<IList<float>> outputSamples) Parameters inputSamples IEnumerable<float> outputSamples IEnumerable<IList<float>> Each item in the output samples should have the same number of elements. Methods Lerp(IList<float>, IList<float>, float) Interpolates two sequences of floats by interpolating corresponding pairs. protected override IList<float> Lerp(IList<float> outputSampleMin, IList<float> outputSampleMax, float t) Parameters outputSampleMin IList<float> outputSampleMax IList<float> t float Returns IList<float> Examples If the min sequence is (0, 1, 2) and the max sequence is (9, 7, 5), the interpolation at t = 0.1f is (.9f, 1.6f, 2.3f)."
  },
  "api/RTCube.Extensions.Algorithms.ResponseCurveInt.html": {
    "href": "api/RTCube.Extensions.Algorithms.ResponseCurveInt.html",
    "title": "Class ResponseCurveInt | RTCubeExtensions 文档",
    "keywords": "Class ResponseCurveInt Namespace RTCube.Extensions.Algorithms A response curve with outputs of float. [Version(1, 0, 0)] public class ResponseCurveInt : ResponseCurveBase<int>, IResponseCurve<int> Inheritance object ResponseCurveBase<int> ResponseCurveInt Implements IResponseCurve<int> Inherited Members ResponseCurveBase<int>.this[float] ResponseCurveBase<int>.Evaluate(float) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ResponseCurve.Select<TSource, TResult>(IResponseCurve<TSource>, Func<TSource, TResult>) ThrowHelper.ThrowIfNull(object, string) Constructors ResponseCurveInt(IEnumerable<float>, IEnumerable<int>) public ResponseCurveInt(IEnumerable<float> inputSamples, IEnumerable<int> outputSamples) Parameters inputSamples IEnumerable<float> outputSamples IEnumerable<int> Methods GetLerp(float, float, int, int) public static ResponseCurveInt GetLerp(float x0, float x1, int y0, int y1) Parameters x0 float x1 float y0 int y1 int Returns ResponseCurveInt Lerp(int, int, float) Linearly interpolates between the two given samples. protected override int Lerp(int outputSampleMin, int outputSampleMax, float t) Parameters outputSampleMin int The value when t is less than or equal to 0. outputSampleMax int The value when t is greater than or equal to 1. t float The fraction of the minimum sample to use. Returns int"
  },
  "api/RTCube.Extensions.Algorithms.ResponseCurveVector2.html": {
    "href": "api/RTCube.Extensions.Algorithms.ResponseCurveVector2.html",
    "title": "Class ResponseCurveVector2 | RTCubeExtensions 文档",
    "keywords": "Class ResponseCurveVector2 Namespace RTCube.Extensions.Algorithms A response curve with outputs of Vector2. [Version(1, 0, 0)] public class ResponseCurveVector2 : ResponseCurveBase<Vector2>, IResponseCurve<Vector2> Inheritance object ResponseCurveBase<Vector2> ResponseCurveVector2 Implements IResponseCurve<Vector2> Inherited Members ResponseCurveBase<Vector2>.this[float] ResponseCurveBase<Vector2>.Evaluate(float) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ResponseCurve.Select<TSource, TResult>(IResponseCurve<TSource>, Func<TSource, TResult>) ThrowHelper.ThrowIfNull(object, string) Constructors ResponseCurveVector2(IEnumerable<float>, IEnumerable<Vector2>) public ResponseCurveVector2(IEnumerable<float> inputSamples, IEnumerable<Vector2> outputSamples) Parameters inputSamples IEnumerable<float> outputSamples IEnumerable<Vector2> Methods Lerp(Vector2, Vector2, float) Linearly interpolates between the two given samples. protected override Vector2 Lerp(Vector2 outputSampleMin, Vector2 outputSampleMax, float t) Parameters outputSampleMin Vector2 The value when t is less than or equal to 0. outputSampleMax Vector2 The value when t is greater than or equal to 1. t float The fraction of the minimum sample to use. Returns Vector2"
  },
  "api/RTCube.Extensions.Algorithms.ResponseCurveVector3.html": {
    "href": "api/RTCube.Extensions.Algorithms.ResponseCurveVector3.html",
    "title": "Class ResponseCurveVector3 | RTCubeExtensions 文档",
    "keywords": "Class ResponseCurveVector3 Namespace RTCube.Extensions.Algorithms A response curve with outputs of Vector3. [Version(1, 0, 0)] public class ResponseCurveVector3 : ResponseCurveBase<Vector3>, IResponseCurve<Vector3> Inheritance object ResponseCurveBase<Vector3> ResponseCurveVector3 Implements IResponseCurve<Vector3> Inherited Members ResponseCurveBase<Vector3>.this[float] ResponseCurveBase<Vector3>.Evaluate(float) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ResponseCurve.Select<TSource, TResult>(IResponseCurve<TSource>, Func<TSource, TResult>) ThrowHelper.ThrowIfNull(object, string) Constructors ResponseCurveVector3(IEnumerable<float>, IEnumerable<Vector3>) public ResponseCurveVector3(IEnumerable<float> inputSamples, IEnumerable<Vector3> outputSamples) Parameters inputSamples IEnumerable<float> outputSamples IEnumerable<Vector3> Methods Lerp(Vector3, Vector3, float) Linearly interpolates between the two given samples. protected override Vector3 Lerp(Vector3 outputSampleMin, Vector3 outputSampleMax, float t) Parameters outputSampleMin Vector3 The value when t is less than or equal to 0. outputSampleMax Vector3 The value when t is greater than or equal to 1. t float The fraction of the minimum sample to use. Returns Vector3"
  },
  "api/RTCube.Extensions.Algorithms.ResponseCurveVector4.html": {
    "href": "api/RTCube.Extensions.Algorithms.ResponseCurveVector4.html",
    "title": "Class ResponseCurveVector4 | RTCubeExtensions 文档",
    "keywords": "Class ResponseCurveVector4 Namespace RTCube.Extensions.Algorithms A response curve with outputs of Vector4. [Version(1, 0, 0)] public class ResponseCurveVector4 : ResponseCurveBase<Vector4>, IResponseCurve<Vector4> Inheritance object ResponseCurveBase<Vector4> ResponseCurveVector4 Implements IResponseCurve<Vector4> Inherited Members ResponseCurveBase<Vector4>.this[float] ResponseCurveBase<Vector4>.Evaluate(float) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ResponseCurve.Select<TSource, TResult>(IResponseCurve<TSource>, Func<TSource, TResult>) ThrowHelper.ThrowIfNull(object, string) Constructors ResponseCurveVector4(IEnumerable<float>, IEnumerable<Vector4>) public ResponseCurveVector4(IEnumerable<float> inputSamples, IEnumerable<Vector4> outputSamples) Parameters inputSamples IEnumerable<float> outputSamples IEnumerable<Vector4> Methods Lerp(Vector4, Vector4, float) Linearly interpolates between the two given samples. protected override Vector4 Lerp(Vector4 outputSampleMin, Vector4 outputSampleMax, float t) Parameters outputSampleMin Vector4 The value when t is less than or equal to 0. outputSampleMax Vector4 The value when t is greater than or equal to 1. t float The fraction of the minimum sample to use. Returns Vector4"
  },
  "api/RTCube.Extensions.Algorithms.RingBuffer-1.html": {
    "href": "api/RTCube.Extensions.Algorithms.RingBuffer-1.html",
    "title": "Class RingBuffer<T> | RTCubeExtensions 文档",
    "keywords": "Class RingBuffer<T> Namespace RTCube.Extensions.Algorithms Represents buffer with a fixed capacity. [Version(4, 1, 0)] public sealed class RingBuffer<T> : IResizeableBuffer<T>, IBuffer<T>, IReadOnlyBuffer<T>, IEnumerable<T>, IEnumerable Type Parameters T The type of elements this buffer can hold. Inheritance object RingBuffer<T> Implements IResizeableBuffer<T> IBuffer<T> IReadOnlyBuffer<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods BufferExtensions.SetCapacity<T>(IResizeableBuffer<T>, int) CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) ThrowHelper.ThrowIfNull(object, string) Remarks See IBuffer<T> and IResizeableBuffer<T>. Constructors RingBuffer(int) Initializes a new instance of the RingBuffer<T> class. public RingBuffer(int capacity) Parameters capacity int The capacity of this the new instance. Properties Capacity Gets the maximum number of elements the buffer can hold. public int Capacity { get; } Property Value int Count Gets the current number of elements in the buffer. public int Count { get; } Property Value int First Gets the first element in the buffer. public T First { get; } Property Value T IsFull Gets a value indicating whether the buffer is full. public bool IsFull { get; } Property Value bool this[int] Gets the element at the specified index. public T this[int index] { get; } Parameters index int Property Value T Last Gets the last element in the buffer. public T Last { get; } Property Value T Methods Clear() Clears all items from the buffer. public void Clear() DecreaseCapacity(int) Decreases the capacity of this IResizeableBuffer<T> by the specified decrement (up to the current capacity). public int DecreaseCapacity(int decrement) Parameters decrement int How much to decrease the capacity by. Returns int The actual amount by which the capacity was decreased. Remarks If the capacity is lower than the current Count, elements are removed from the buffer until the capacity is reached. Exceptions ArgumentOutOfRangeException The decrement is negative. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. IncreaseCapacity(int) Increases the capacity of this IResizeableBuffer<T> by the specified increment. public void IncreaseCapacity(int increment) Parameters increment int How much to increase the capacity by. Exceptions ArgumentOutOfRangeException The increment is negative. Insert(T) Inserts an item into the buffer. public void Insert(T item) Parameters item T The item to insert into the buffer."
  },
  "api/RTCube.Extensions.Algorithms.StepResponse-1.html": {
    "href": "api/RTCube.Extensions.Algorithms.StepResponse-1.html",
    "title": "Class StepResponse<T> | RTCubeExtensions 文档",
    "keywords": "Class StepResponse<T> Namespace RTCube.Extensions.Algorithms A response curve with a step response. public class StepResponse<T> : ResponseCurveBase<T>, IResponseCurve<T> Type Parameters T Inheritance object ResponseCurveBase<T> StepResponse<T> Implements IResponseCurve<T> Inherited Members ResponseCurveBase<T>.this[float] ResponseCurveBase<T>.Evaluate(float) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ResponseCurve.Select<TSource, TResult>(IResponseCurve<TSource>, Func<TSource, TResult>) ThrowHelper.ThrowIfNull(object, string) Constructors StepResponse(IEnumerable<float>, IEnumerable<T>, StepType) public StepResponse(IEnumerable<float> inputSamples, IEnumerable<T> outputSamples, StepResponse.StepType stepType = StepType.Left) Parameters inputSamples IEnumerable<float> outputSamples IEnumerable<T> stepType StepResponse.StepType Methods GetStep(float, T, T) Gets the step response that returns y0 for all inputs less than x, and y1 for all inputs greater than or equal to x. public static StepResponse<T> GetStep(float x, T y0, T y1) Parameters x float The x. y0 T The y0. y1 T The y1. Returns StepResponse<T> StepResponse. Lerp(T, T, float) Linearly interpolates between the two given samples. protected override T Lerp(T outputSampleMin, T outputSampleMax, float t) Parameters outputSampleMin T The value when t is less than or equal to 0. outputSampleMax T The value when t is greater than or equal to 1. t float The fraction of the minimum sample to use. Returns T See Also ResponseCurveBase<T>"
  },
  "api/RTCube.Extensions.Algorithms.StepResponse.StepType.html": {
    "href": "api/RTCube.Extensions.Algorithms.StepResponse.StepType.html",
    "title": "Enum StepResponse.StepType | RTCubeExtensions 文档",
    "keywords": "Enum StepResponse.StepType Namespace RTCube.Extensions.Algorithms Used to indicate whether steps are to the left, middle or right of samples. public enum StepResponse.StepType Extension Methods ThrowHelper.ThrowIfNull(object, string) Fields Left = 0 Mid = 1 Right = 2"
  },
  "api/RTCube.Extensions.Algorithms.StepResponse.html": {
    "href": "api/RTCube.Extensions.Algorithms.StepResponse.html",
    "title": "Class StepResponse | RTCubeExtensions 文档",
    "keywords": "Class StepResponse Namespace RTCube.Extensions.Algorithms A response curve with a step response. public class StepResponse Inheritance object StepResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Methods GetStep<T>(float, T, T) Gets the step response that returns y0 for all inputs less than x, and y1 for all inputs greater than or equal to x. public static StepResponse<T> GetStep<T>(float x, T y0, T y1) Parameters x float The x. y0 T The y0. y1 T The y1. Returns StepResponse<T> StepResponse. Type Parameters T See Also ResponseCurveBase<T>"
  },
  "api/RTCube.Extensions.Algorithms.html": {
    "href": "api/RTCube.Extensions.Algorithms.html",
    "title": "Namespace RTCube.Extensions.Algorithms | RTCubeExtensions 文档",
    "keywords": "Namespace RTCube.Extensions.Algorithms Classes BufferExtensions Provides extension methods for buffers. Capacity2Buffer<T> Represents a buffer with a fixed capacity of two items. CollectionExtensions This class provides useful extension methods for collections, mostly IEnumerable. Combinatorial Combinatorial algorithms, including generating tuples, combinations, permutations and partitions. Except for PowerSet, all methods are implemented after Knuth, described in The Art of Computer Programming Volume 4. ComparerExtensions Differentiator Represents a differentiator that calculates the difference between two consecutive float values. DitherResponse Dithers responses by adding noise before passing it to a step response. The noise is provided by an arbitrary generator, and errors are diffused over several calls. Generator Contains static methods for creating generators, and extension methods to create generators from existing ones. Generator.AbstractGenerator<TResult> This class provides a convenient base class to base an implementation of IGenerator on. IndexPriorityQueue<TElement, TPriority> Represents a generic index-based priority queue where elements are ordered based on their priority determined by an IComparer<T>. Integrator Represents an integrator that calculates the sum of float values over a specified window. LSystem<TSymbol> A lightweight implementation of an L-system. PidController Represents a Proportional-Integral-Derivative (PID) controller that calculates control values based on the difference between a desired set point and a measured process variable. RandomAccessPriorityQueue<TElement, TPriority> Represents a generic index-based priority queue where elements are ordered based on their priority determined by an IComparer<T>. RandomAccessQueue<T> Represents a queue that allows random access to its elements. ResponseCurve Contains extension methods for Response curves. ResponseCurveBase<T> A class that can be used as the base of the implementation of a response curve. ResponseCurveColor A response curve with outputs of Color. ResponseCurveFloat A response curve with outputs of float. ResponseCurveFloatSequence A response curve where the outputs are sequences of floats. ResponseCurveInt A response curve with outputs of float. ResponseCurveVector2 A response curve with outputs of Vector2. ResponseCurveVector3 A response curve with outputs of Vector3. ResponseCurveVector4 A response curve with outputs of Vector4. RingBuffer<T> Represents buffer with a fixed capacity. StepResponse A response curve with a step response. StepResponse<T> A response curve with a step response. Interfaces IBuffer<T> Represents a generic buffer interface. IGenerator A generator can produce an infinite sequence of objects. IGenerator<TResult> All generic generators implement this interface. IReadOnlyBuffer<T> Represents a generic buffer interface that only supports reading capabilities. IResizeableBuffer<T> A buffer that can change its capacity. IResponseCurve<T> This interface represents a piecewise linear curve, with input-output pairs at the bends. Enums StepResponse.StepType Used to indicate whether steps are to the left, middle or right of samples."
  },
  "api/RTCube.Extensions.AssetLoader.html": {
    "href": "api/RTCube.Extensions.AssetLoader.html",
    "title": "Class AssetLoader | RTCubeExtensions 文档",
    "keywords": "Class AssetLoader Namespace RTCube.Extensions public class AssetLoader : MonoSingleton<AssetLoader> Inheritance object MonoSingleton<AssetLoader> AssetLoader Inherited Members MonoSingleton<AssetLoader>.Instance MonoSingleton<AssetLoader>.Awake() Extension Methods ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.Clock.html": {
    "href": "api/RTCube.Extensions.Clock.html",
    "title": "Class Clock | RTCubeExtensions 文档",
    "keywords": "Class Clock Namespace RTCube.Extensions Represents a clock that expires after a given time. [Version(1, 0, 0)] public class Clock Inheritance object Clock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks To use this clock, instantiate it, call Reset with the right time value, and call Update it each frame. Any class that wants to be notified of events need to implement the IClockListener interface, and subscribe to events using the AddListener method. A listener can be removed with the RemoveListener event. Clocks can be paused independently of Time.timeScale using the Pause method (and started again using Unpause). Constructors Clock() Initializes a new instance of the Clock class. public Clock() Remarks The clock is initially paused, and set to expire immediately when unpaused. Properties IsDone Gets a value indicating whether this instance is done. public bool IsDone { get; } Property Value bool true if this instance is done; otherwise, false. IsPaused Gets a value indicating whether this clock is paused. public bool IsPaused { get; } Property Value bool true if this clock is paused; otherwise, false. Time The current time on this clock in seconds as a float. public float Time { get; } Property Value float The time. TimeInSeconds Gets the time in seconds of this clock as an integer. public int TimeInSeconds { get; } Property Value int The time in seconds. The time in seconds is the ceiling of the time left. Methods AddTime(float) Adds time to this clock. This will extend the time the clock expires by the given amount. public void AddTime(float timeIncrement) Parameters timeIncrement float The time increment. Pause() Pauses this clock. public void Pause() Reset(float) Resets the clock to the specified stat time. public void Reset(float startTime) Parameters startTime float The start time. Exceptions ArgumentException startTime is negative. Unpause() Unpauses this clock. public void Unpause() Update(float) Call this method repeatedly to update the time (typically, in a component's Update method). public void Update(float deltaTime) Parameters deltaTime float The delta time. Events OnClockExpired Occurs when the clock expired. public event Action OnClockExpired Event Type Action OnSecondsChanged Occurs when the seconds changed. Note that the seconds is the ceiling of the current time. public event Action OnSecondsChanged Event Type Action"
  },
  "api/RTCube.Extensions.ColorExtensions.html": {
    "href": "api/RTCube.Extensions.ColorExtensions.html",
    "title": "Class ColorExtensions | RTCubeExtensions 文档",
    "keywords": "Class ColorExtensions Namespace RTCube.Extensions Provides some utility functions for Colors. [Version(1, 0, 0)] public static class ColorExtensions Inheritance object ColorExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields HexStringBlack public const string HexStringBlack = \"000\" Field Value string Methods Brightness(Color) Returns the brightness of the color, defined as the average off the three color channels. public static float Brightness(this Color color) Parameters color Color Returns float Darker(Color) Returns a color darker than the given color. public static Color Darker(this Color color) Parameters color Color Returns Color Invert(Color) Returns a new color that is this color inverted. public static Color Invert(this Color color) Parameters color Color The color to invert. Returns Color IsApproximatelyBlack(Color) Returns whether the color is black or almost black. public static bool IsApproximatelyBlack(this Color color) Parameters color Color Returns bool IsApproximatelyWhite(Color) Returns whether the color is white or almost white. public static bool IsApproximatelyWhite(this Color color) Parameters color Color Returns bool Lighter(Color) Returns a color lighter than the given color. public static Color Lighter(this Color color) Parameters color Color Returns Color Opaque(Color) Returns an opaque version of the given color. public static Color Opaque(this Color color) Parameters color Color Returns Color ParseHex(string) Parses a Color from a hexadecimal string. public static Color ParseHex(string hex) Parameters hex string The hexadecimal string to parse. Returns Color The color that the string represents. Remarks See TryParseHex(string, out Color) for details on what formats are supported. Exceptions FormatException the string is not in a valid format. ToRGBAHex(Color) Converts a color to an eight-character string of the RGBA values of the color in hexadecimal. [Version(1, 0, 0)] public static string ToRGBAHex(Color color) Parameters color Color The color to convert. Returns string The color as a hexadecimal string. ToRGBHex(Color) Converts a color to a six-character string of the RGB values of the color in hexadecimal. [Version(1, 0, 0)] public static string ToRGBHex(Color color) Parameters color Color The color to convert. Returns string The color as a hexadecimal string. TryParseHex(string, out Color) Tries to parse a Color from a hexadecimal string. [Version(1, 0, 0)] public static bool TryParseHex(string hex, out Color color) Parameters hex string The hexadecimal string to parse. color Color The color if the parsing was successful, Color.black otherwise. Returns bool Whether the parsing was successful. Remarks The string may start with an optional # character. If the string is 3 or 4 characters long, the characters are each repeated to form a 6 or 8 character string. If the string has 6 characters, the first two characters are the red component, the next two are the green component, and the last two are the blue component. If the string has 8 characters, the last two characters are the alpha component. WithAlpha(Color, float) Returns the same color, but with the specified alpha. public static Color WithAlpha(this Color color, float alpha) Parameters color Color The color. alpha float The alpha. Returns Color Color. WithBrightness(Color, float) Returns a new color with the RGB values scaled so that the color has the given brightness. public static Color WithBrightness(this Color color, float brightness) Parameters color Color brightness float Returns Color Remarks If the color is too dark, a gray is returned with the right brightness. The alpha is left unchanged."
  },
  "api/RTCube.Extensions.ColorList.html": {
    "href": "api/RTCube.Extensions.ColorList.html",
    "title": "Class ColorList | RTCubeExtensions 文档",
    "keywords": "Class ColorList Namespace RTCube.Extensions An InspectorList of type Color. [Version(1, 0, 0)] [Serializable] public class ColorList : InspectorList<Color>, IList<Color>, ICollection<Color>, IEnumerable<Color>, IEnumerable Inheritance object InspectorList InspectorList<Color> ColorList Implements IList<Color> ICollection<Color> IEnumerable<Color> IEnumerable Inherited Members InspectorList<Color>.GetEnumerator() InspectorList<Color>.Add(Color) InspectorList<Color>.AddRange(IEnumerable<Color>) InspectorList<Color>.Clear() InspectorList<Color>.Contains(Color) InspectorList<Color>.CopyTo(Color[], int) InspectorList<Color>.Remove(Color) InspectorList<Color>.Count InspectorList<Color>.IsReadOnly InspectorList<Color>.IndexOf(Color) InspectorList<Color>.Insert(int, Color) InspectorList<Color>.RemoveAt(int) InspectorList<Color>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, IComparer<TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int, IComparer<TElement>) CollectionExtensions.IsEmpty<T>(ICollection<T>) PoolExtensions.AddAllAvailableFromPool<T>(ICollection<T>, IPool<T>) PoolExtensions.AddFromPool<T>(ICollection<T>, IPool<T>, int) PoolExtensions.TryAddFromPool<T>(ICollection<T>, IPool<T>, int) CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.FilterByType<T, TFilter>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) CollectionExtensions.FillWithDefault<T>(IList<T>) CollectionExtensions.Fill<T>(IList<T>, T) CollectionExtensions.Shuffle<T>(IList<T>) CollectionExtensions.Shuffle<T>(IList<T>, IRandom) ThrowHelper.ThrowIfNull(object, string) Constructors ColorList() public ColorList() ColorList(IEnumerable<Color>) public ColorList(IEnumerable<Color> defaultColors) Parameters defaultColors IEnumerable<Color>"
  },
  "api/RTCube.Extensions.ColorPopupAttribute.html": {
    "href": "api/RTCube.Extensions.ColorPopupAttribute.html",
    "title": "Class ColorPopupAttribute | RTCubeExtensions 文档",
    "keywords": "Class ColorPopupAttribute Namespace RTCube.Extensions An attribute used to mark a color field that should be drawn as a popup list in the Unity editor. public class ColorPopupAttribute : PopupListAttribute Inheritance object PopupListAttribute ColorPopupAttribute Inherited Members PopupListAttribute.PopupListData PopupListAttribute.RetrievalMethod Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors ColorPopupAttribute(string) Marks a color field that should be drawn as a popup list using the given key to retrieve the values. public ColorPopupAttribute(string key) Parameters key string The key used to retrieve the color values for the popup list. The retriever function should be registered with RegisterValuesRetriever<T>(string, Func<IEnumerable<T>>)."
  },
  "api/RTCube.Extensions.CommentAttribute.html": {
    "href": "api/RTCube.Extensions.CommentAttribute.html",
    "title": "Class CommentAttribute | RTCubeExtensions 文档",
    "keywords": "Class CommentAttribute Namespace RTCube.Extensions Used to mark a field to add a comment above the field in the inspector. [AttributeUsage(AttributeTargets.Field)] [Version(1, 0, 0)] public class CommentAttribute : PropertyAttribute Inheritance object CommentAttribute Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors CommentAttribute(string, string) Initializes a new instance of the CommentAttribute class. public CommentAttribute(string comment, string tooltip = \"\") Parameters comment string The comment to display in the inspector. tooltip string An optional tooltip to display when the user hovers over the comment. Fields content public readonly GUIContent content Field Value GUIContent"
  },
  "api/RTCube.Extensions.DiskCache-2.html": {
    "href": "api/RTCube.Extensions.DiskCache-2.html",
    "title": "Class DiskCache<TKey, TValue> | RTCubeExtensions 文档",
    "keywords": "Class DiskCache<TKey, TValue> Namespace RTCube.Extensions A cache maintained on disk. public class DiskCache<TKey, TValue> : ICache<TKey, TValue> Type Parameters TKey TValue Inheritance object DiskCache<TKey, TValue> Implements ICache<TKey, TValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors DiskCache(int) public DiskCache(int capacity) Parameters capacity int Fields capacity public readonly int capacity Field Value int Properties Count Gets the number of elements in the cache . public int Count { get; } Property Value int IsFull Gets a value indicating whether this cache is full. public bool IsFull { get; } Property Value bool true if this cache is full; otherwise, false. this[TKey] Gets or sets the value with the specified key. The method ContainsKey should always be called before getting the value of a key. public TValue this[TKey key] { get; set; } Parameters key TKey Property Value TValue Methods ContainsKey(TKey) Determines whether this cache contains the specified key. public bool ContainsKey(TKey key) Parameters key TKey Returns bool true if the cache contains the key; otherwise, false. Remove(TKey) Removes the element at the specified key from the cache. public TValue Remove(TKey key) Parameters key TKey The key. Returns TValue TValue. RemoveOldest() Removes the oldest item from the cache. public KeyValuePair<TKey, TValue> RemoveOldest() Returns KeyValuePair<TKey, TValue> KeyValuePair<TKey, TValue>."
  },
  "api/RTCube.Extensions.DummyAttribute.html": {
    "href": "api/RTCube.Extensions.DummyAttribute.html",
    "title": "Class DummyAttribute | RTCubeExtensions 文档",
    "keywords": "Class DummyAttribute Namespace RTCube.Extensions Used to mark the last field in a MonoBehaviour as a dummy so that it is not drawn. This is useful to add a decorator that should be displayed below all fields. public class DummyAttribute : PropertyAttribute Inheritance object DummyAttribute Extension Methods ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.FixedSizeMemoryCache-2.html": {
    "href": "api/RTCube.Extensions.FixedSizeMemoryCache-2.html",
    "title": "Class FixedSizeMemoryCache<TKey, TValue> | RTCubeExtensions 文档",
    "keywords": "Class FixedSizeMemoryCache<TKey, TValue> Namespace RTCube.Extensions A cache maintained in memory that stays fixed in size. public class FixedSizeMemoryCache<TKey, TValue> : ICache<TKey, TValue> Type Parameters TKey TValue Inheritance object FixedSizeMemoryCache<TKey, TValue> Implements ICache<TKey, TValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors FixedSizeMemoryCache(int) Initializes a new instance of the FixedSizeMemoryCache<TKey, TValue> class. public FixedSizeMemoryCache(int capacity) Parameters capacity int The capacity of the cache, must be positive. Properties Count Gets the number of elements in the cache . public int Count { get; } Property Value int IsFull Gets a value indicating whether this cache is full. public bool IsFull { get; } Property Value bool true if this cache is full; otherwise, false. this[TKey] Gets or sets the value with the specified key. The method ContainsKey should always be called before getting the value of a key. public TValue this[TKey key] { get; set; } Parameters key TKey Property Value TValue Methods ContainsKey(TKey) Determines whether this cache contains the specified key. public bool ContainsKey(TKey key) Parameters key TKey Returns bool true if the cache contains the key; otherwise, false. Remove(TKey) Removes the element at the specified key from the cache. public TValue Remove(TKey key) Parameters key TKey The key. Returns TValue TValue. RemoveOldest() Removes the oldest item from the cache. public KeyValuePair<TKey, TValue> RemoveOldest() Returns KeyValuePair<TKey, TValue> KeyValuePair<TKey, TValue>."
  },
  "api/RTCube.Extensions.FloatList.html": {
    "href": "api/RTCube.Extensions.FloatList.html",
    "title": "Class FloatList | RTCubeExtensions 文档",
    "keywords": "Class FloatList Namespace RTCube.Extensions An InspectorList of type float. [Version(1, 0, 0)] [Serializable] public class FloatList : InspectorList<float>, IList<float>, ICollection<float>, IEnumerable<float>, IEnumerable Inheritance object InspectorList InspectorList<float> FloatList Implements IList<float> ICollection<float> IEnumerable<float> IEnumerable Inherited Members InspectorList<float>.GetEnumerator() InspectorList<float>.Add(float) InspectorList<float>.AddRange(IEnumerable<float>) InspectorList<float>.Clear() InspectorList<float>.Contains(float) InspectorList<float>.CopyTo(float[], int) InspectorList<float>.Remove(float) InspectorList<float>.Count InspectorList<float>.IsReadOnly InspectorList<float>.IndexOf(float) InspectorList<float>.Insert(int, float) InspectorList<float>.RemoveAt(int) InspectorList<float>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, IComparer<TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int, IComparer<TElement>) CollectionExtensions.IsEmpty<T>(ICollection<T>) PoolExtensions.AddAllAvailableFromPool<T>(ICollection<T>, IPool<T>) PoolExtensions.AddFromPool<T>(ICollection<T>, IPool<T>, int) PoolExtensions.TryAddFromPool<T>(ICollection<T>, IPool<T>, int) CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinMax(IEnumerable<float>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) CollectionExtensions.FillWithDefault<T>(IList<T>) CollectionExtensions.Fill<T>(IList<T>, T) CollectionExtensions.Shuffle<T>(IList<T>) CollectionExtensions.Shuffle<T>(IList<T>, IRandom) ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.FpsCounter.html": {
    "href": "api/RTCube.Extensions.FpsCounter.html",
    "title": "Class FpsCounter | RTCubeExtensions 文档",
    "keywords": "Class FpsCounter Namespace RTCube.Extensions Component for displaying the median frame time, maximum frame time, and frame rate. [Version(1, 0, 0)] public class FpsCounter : MonoBehaviour Inheritance object FpsCounter Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks This is used in some examples, and is not intended for production use. Methods Update() public void Update()"
  },
  "api/RTCube.Extensions.GameObjectExtensions.html": {
    "href": "api/RTCube.Extensions.GameObjectExtensions.html",
    "title": "Class GameObjectExtensions | RTCubeExtensions 文档",
    "keywords": "Class GameObjectExtensions Namespace RTCube.Extensions Provides useful extension methods for GameObjects. [Version(1, 0, 0)] public static class GameObjectExtensions Inheritance object GameObjectExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetRequiredComponentInChildren<T>(GameObject) Gets a component of the given type in one of the children, or fail if no such component can be found. public static T GetRequiredComponentInChildren<T>(this GameObject go) where T : Component Parameters go GameObject The game object to check. Returns T A component of type T attached to the given game object if it exists. Type Parameters T The type of component to get. Remarks Use this method when you are sure that the component exists on the game object. Exceptions InvalidOperationException no component of the required type exist on any of the given game object's children. GetRequiredComponent<T>(GameObject) Gets a component of the given type on the game object, or fail if no such component can be found. public static T GetRequiredComponent<T>(this GameObject go) where T : Component Parameters go GameObject The game object to check. Returns T A component of type T attached to the given game object if it exists. Type Parameters T The type of component to get. Remarks Use this method when you are sure that the component exists on the game object. Exceptions InvalidOperationException no component of the required type exist on the given game object."
  },
  "api/RTCube.Extensions.Geometry.html": {
    "href": "api/RTCube.Extensions.Geometry.html",
    "title": "Class Geometry | RTCubeExtensions 文档",
    "keywords": "Class Geometry Namespace RTCube.Extensions Provides utility methods for doing geometry. [Version(1, 0, 0)] public static class Geometry Inheritance object Geometry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsInHalfPlane(Vector2, Vector2, Vector2) Determines whether a point is in the half plane described by a point and direction. public static bool IsInHalfPlane(Vector2 point, Vector2 halfPlanePoint, Vector2 halfPlaneDirection) Parameters point Vector2 The point to check. halfPlanePoint Vector2 The half plane point. halfPlaneDirection Vector2 The half plane direction. Returns bool true if the point is in the half plane; otherwise, false. IsInHalfPlane(Vector3, Vector3, Vector3) Determines whether a point is in the half (3D, hyper) plane described by a point and direction. public static bool IsInHalfPlane(Vector3 point, Vector3 halfPlanePoint, Vector3 halfPlaneDirection) Parameters point Vector3 The point to check. halfPlanePoint Vector3 The half plane point. halfPlaneDirection Vector3 The half plane direction. Returns bool true if the point is in the half plane; otherwise, false."
  },
  "api/RTCube.Extensions.HashPool-1.html": {
    "href": "api/RTCube.Extensions.HashPool-1.html",
    "title": "Class HashPool<T> | RTCubeExtensions 文档",
    "keywords": "Class HashPool<T> Namespace RTCube.Extensions A light-weight pool class for objects that can be hashed. [Version(1, 0, 0)] public class HashPool<T> : IPool<T> Type Parameters T Inheritance object HashPool<T> Implements IPool<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PoolExtensions.Clear<T>(IPool<T>, bool) PoolExtensions.SetCapacity<T>(IPool<T>, int, bool) PoolExtensions.Trim<T>(IPool<T>) PoolExtensions.TryGet<T>(IPool<T>, out T) ThrowHelper.ThrowIfNull(object, string) Constructors HashPool(int, Func<T>, Action<T>, Action<T>, Action<T>, IEqualityComparer<T>) public HashPool(int initialCapacity, Func<T> create, Action<T> destroy, Action<T> activate, Action<T> deactivate, IEqualityComparer<T> comparer = null) Parameters initialCapacity int create Func<T> destroy Action<T> activate Action<T> deactivate Action<T> comparer IEqualityComparer<T> Properties ActiveCount The number of objects that are currently active. public int ActiveCount { get; } Property Value int Capacity The total number of objects in the pool (active and inactive), the maximum number of objects that can be returned by Get(). public int Capacity { get; } Property Value int The capacity. HasAvailableObject Returns whether there is an inactive object available to get. public bool HasAvailableObject { get; } Property Value bool true if an inactive object is available; otherwise, false. Methods DecreaseCapacity(int, bool) Decreases the capacity of the pool. public int DecreaseCapacity(int decrement, bool deactivateFirst = false) Parameters decrement int The number of pool objects to destroy. deactivateFirst bool Whether to deactivate (active) objects before destroying them. Returns int Remarks This method may destroy active objects. Exceptions ArgumentOutOfRangeException decrement is negative. Get() Gets a new object from the pool. public T Get() Returns T A freshly activated object. Exceptions InvalidOperationException No inactive objects are available. IncreaseCapacity(int) Increases the capacity of the pool. public void IncreaseCapacity(int increment) Parameters increment int The number of new pool objects to add. Exceptions ArgumentOutOfRangeException increment is negative. Release(T) Releases the specified object back to the pool. public void Release(T obj) Parameters obj T The object to release. We do not restrict the pool from containing null objects, therefore obj can be null if the create action passed into the constructor can produce null elements. This is an unusual use case though. Exceptions ArgumentException obj is not in the pool. InvalidOperationException obj is already inactive. ReleaseAll() Releases all objects in the pool. public void ReleaseAll() See Also Pool<T>"
  },
  "api/RTCube.Extensions.HighlightAttribute.html": {
    "href": "api/RTCube.Extensions.HighlightAttribute.html",
    "title": "Class HighlightAttribute | RTCubeExtensions 文档",
    "keywords": "Class HighlightAttribute Namespace RTCube.Extensions Mark simple types to be highligted in the inspector. public class HighlightAttribute : PropertyAttribute Inheritance object HighlightAttribute Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors HighlightAttribute() Initializes a new instance of the HighlightAttribute class, which uses the default color. public HighlightAttribute() HighlightAttribute(string) Initializes a new instance of the HighlightAttribute class, which uses the specified color. public HighlightAttribute(string hexString) Parameters hexString string The hex string.TryParseHex(string, out Color) to see details of the format. Fields color public Color color Field Value Color"
  },
  "api/RTCube.Extensions.ICache-2.html": {
    "href": "api/RTCube.Extensions.ICache-2.html",
    "title": "Interface ICache<TKey, TValue> | RTCubeExtensions 文档",
    "keywords": "Interface ICache<TKey, TValue> Namespace RTCube.Extensions A data structure that can be used as a cache. public interface ICache<TKey, TValue> Type Parameters TKey The type of the t key. TValue The type of the t value. Extension Methods ThrowHelper.ThrowIfNull(object, string) Properties Count Gets the number of elements in the cache . int Count { get; } Property Value int IsFull Gets a value indicating whether this cache is full. bool IsFull { get; } Property Value bool true if this cache is full; otherwise, false. this[TKey] Gets or sets the value with the specified key. The method ContainsKey should always be called before getting the value of a key. TValue this[TKey key] { get; set; } Parameters key TKey Property Value TValue Methods ContainsKey(TKey) Determines whether this cache contains the specified key. bool ContainsKey(TKey key) Parameters key TKey Returns bool true if the cache contains the key; otherwise, false. Remove(TKey) Removes the element at the specified key from the cache. TValue Remove(TKey key) Parameters key TKey The key. Returns TValue TValue. RemoveOldest() Removes the oldest item from the cache. KeyValuePair<TKey, TValue> RemoveOldest() Returns KeyValuePair<TKey, TValue> KeyValuePair<TKey, TValue>."
  },
  "api/RTCube.Extensions.IFactory.html": {
    "href": "api/RTCube.Extensions.IFactory.html",
    "title": "Interface IFactory | RTCubeExtensions 文档",
    "keywords": "Interface IFactory Namespace RTCube.Extensions public interface IFactory Extension Methods ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.IInitializable.html": {
    "href": "api/RTCube.Extensions.IInitializable.html",
    "title": "Interface IInitializable | RTCubeExtensions 文档",
    "keywords": "Interface IInitializable Namespace RTCube.Extensions public interface IInitializable Extension Methods ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.IPool-1.html": {
    "href": "api/RTCube.Extensions.IPool-1.html",
    "title": "Interface IPool<T> | RTCubeExtensions 文档",
    "keywords": "Interface IPool<T> Namespace RTCube.Extensions Represents a pool of objects, with the idea to reuse objects instead of creating and destroying them. [Version(1, 0, 0)] public interface IPool<T> Type Parameters T The type of the objects to pool. Extension Methods PoolExtensions.Clear<T>(IPool<T>, bool) PoolExtensions.SetCapacity<T>(IPool<T>, int, bool) PoolExtensions.Trim<T>(IPool<T>) PoolExtensions.TryGet<T>(IPool<T>, out T) ThrowHelper.ThrowIfNull(object, string) Remarks Unity introduced its own pool objects in Unity 2020. The built-in pool is similar to the one provided here, but this interface gives a bit more control over managing objects. Here are some differences: Unity pools do not allow you to specify the creation or destruction of pool objects. Unity pools do not allow you to specify activation and deactivation actions. Unity pools do not offer ways to manage the capacity of the pool explicitly. What pool should I use? If your objects are safe to be hashed, use HashPool<T>. Otherwise, if your pool capacity is low, use Pool<T>. Otherwise, use the pool returned by GetHashPool<T>(int, Func<T>, Action<T>, Action<T>, Action<T>). When should I use a pool? When allocations of objects are expensive, such as creating game objects in the scene. When you do a lot of allocations and de-allocations of the same type of object, such as in custom a particle system We have several examples of how you can use our pools to build more sophisticated pools: Custom Pools. Properties ActiveCount The number of objects that are currently active. int ActiveCount { get; } Property Value int Capacity The total number of objects in the pool (active and inactive), the maximum number of objects that can be returned by Get(). int Capacity { get; } Property Value int The capacity. HasAvailableObject Returns whether there is an inactive object available to get. bool HasAvailableObject { get; } Property Value bool true if an inactive object is available; otherwise, false. Methods DecreaseCapacity(int, bool) Decreases the capacity of the pool. int DecreaseCapacity(int decrement, bool deactivateFirst = false) Parameters decrement int The number of pool objects to destroy. deactivateFirst bool Whether to deactivate (active) objects before destroying them. Returns int Remarks This method may destroy active objects. Exceptions ArgumentOutOfRangeException decrement is negative. Get() Gets a new object from the pool. T Get() Returns T A freshly activated object. Exceptions InvalidOperationException No inactive objects are available. IncreaseCapacity(int) Increases the capacity of the pool. void IncreaseCapacity(int increment) Parameters increment int The number of new pool objects to add. Exceptions ArgumentOutOfRangeException increment is negative. Release(T) Releases the specified object back to the pool. void Release(T obj) Parameters obj T The object to release. We do not restrict the pool from containing null objects, therefore obj can be null if the create action passed into the constructor can produce null elements. This is an unusual use case though. Exceptions ArgumentException obj is not in the pool. InvalidOperationException obj is already inactive. ReleaseAll() Releases all objects in the pool. void ReleaseAll()"
  },
  "api/RTCube.Extensions.IPoolObject-1.html": {
    "href": "api/RTCube.Extensions.IPoolObject-1.html",
    "title": "Interface IPoolObject<T> | RTCubeExtensions 文档",
    "keywords": "Interface IPoolObject<T> Namespace RTCube.Extensions public interface IPoolObject<out T> Type Parameters T Extension Methods ThrowHelper.ThrowIfNull(object, string) Properties IsActive bool IsActive { get; } Property Value bool Value T Value { get; } Property Value T"
  },
  "api/RTCube.Extensions.IRandom.html": {
    "href": "api/RTCube.Extensions.IRandom.html",
    "title": "Interface IRandom | RTCubeExtensions 文档",
    "keywords": "Interface IRandom Namespace RTCube.Extensions Represents a random generator. [Version(1, 0, 0)] public interface IRandom Extension Methods ThrowHelper.ThrowIfNull(object, string) Methods Next() Gets the next the random integer value. int Next() Returns int Next(int) Gets the next the random integer value below the given maximum. int Next(int maxValue) Parameters maxValue int Returns int Next(int, int) Gets the next the random integer value greater than or equal to the minimum and below the given maximum. int Next(int minValue, int maxValue) Parameters minValue int maxValue int Returns int NextBytes(byte[]) Fills the given array with random bytes. void NextBytes(byte[] bytes) Parameters bytes byte[] NextDouble() Gets the next the random double value. double NextDouble() Returns double RandomOnSphere(float) Returns a random value on the surface of a sphere with a given radius. Vector3 RandomOnSphere(float radius) Parameters radius float The radius. Returns Vector3 Vector3."
  },
  "api/RTCube.Extensions.IStateToken-1.html": {
    "href": "api/RTCube.Extensions.IStateToken-1.html",
    "title": "Interface IStateToken<TStateData> | RTCubeExtensions 文档",
    "keywords": "Interface IStateToken<TStateData> Namespace RTCube.Extensions When a new state is started in a tracker, a token is created that wraps custom data, and can be used to stop the state later. public interface IStateToken<out TStateData> Type Parameters TStateData The type of the t state data. Extension Methods ThrowHelper.ThrowIfNull(object, string) Properties State TStateData State { get; } Property Value TStateData"
  },
  "api/RTCube.Extensions.ImageExtensions.html": {
    "href": "api/RTCube.Extensions.ImageExtensions.html",
    "title": "Class ImageExtensions | RTCubeExtensions 文档",
    "keywords": "Class ImageExtensions Namespace RTCube.Extensions Provides extension methods for Unity's Image class. public static class ImageExtensions Inheritance object ImageExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetAlpha(Image, float) Sets the alpha value of the image. [Version(1, 0, 0)] public static void SetAlpha(this Image image, float alpha) Parameters image Image The image to modify. alpha float The alpha value to set. SetVisible(Image, bool, float, float) Sets the visibility of the image. [Version(1, 0, 0)] public static void SetVisible(this Image image, bool visible, float visibleAlpha = 1, float invisibleAlpha = 0) Parameters image Image The image to modify. visible bool A boolean value indicating whether the image should be visible. visibleAlpha float The alpha value to use when the image is visible. Default is 1.0f. invisibleAlpha float The alpha value to use when the image is invisible. Default is 0.0f."
  },
  "api/RTCube.Extensions.ImplementationFactory-1.html": {
    "href": "api/RTCube.Extensions.ImplementationFactory-1.html",
    "title": "Class ImplementationFactory<TBase> | RTCubeExtensions 文档",
    "keywords": "Class ImplementationFactory<TBase> Namespace RTCube.Extensions A factory class for creating instances of types derived from TBase. [Version(1, 0, 0)] public class ImplementationFactory<TBase> : IEnumerable<Func<TBase>>, IEnumerable Type Parameters TBase The base type that all created instances must derive from. Inheritance object ImplementationFactory<TBase> Implements IEnumerable<Func<TBase>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.FilterByType<T, TFilter>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) ThrowHelper.ThrowIfNull(object, string) Examples One use case is to make it easier to write unit tests for a set of types that share an interface. Warning It looks like the sample you are looking for does not exist. Remarks TBase is often a common interface or abstract type, and the registered instances of different types that implements the base type. This is useful when you want to choose the implementation based on a type parameter. Methods Add<TImplementation>(Func<TImplementation>) Registers a factory method for creating instances of TImplementation. public void Add<TImplementation>(Func<TImplementation> factory) where TImplementation : TBase Parameters factory Func<TImplementation> The factory method that creates instances of TImplementation. Type Parameters TImplementation The type of object to be created by the factory method. GetEnumerator() Returns an enumerator that iterates through the registered factory methods. public IEnumerator<Func<TBase>> GetEnumerator() Returns IEnumerator<Func<TBase>> An enumerator for the registered factory methods. GetInstance<TImplementation>() Gets an instance of TImplementation using the registered factory method. public TImplementation GetInstance<TImplementation>() where TImplementation : TBase Returns TImplementation An instance of TImplementation. Type Parameters TImplementation The type of object to be created. Exceptions InvalidOperationException Thrown when no factory method is registered for the specified type."
  },
  "api/RTCube.Extensions.ImplementationFactory-2.html": {
    "href": "api/RTCube.Extensions.ImplementationFactory-2.html",
    "title": "Class ImplementationFactory<T1, TBase> | RTCubeExtensions 文档",
    "keywords": "Class ImplementationFactory<T1, TBase> Namespace RTCube.Extensions A factory class for creating instances of types derived from TBase. [Version(3, 2, 0)] public class ImplementationFactory<T1, TBase> : IEnumerable<Func<T1, TBase>>, IEnumerable Type Parameters T1 The type of argument1 for factory methods. TBase The base type that all created instances must derive from. Inheritance object ImplementationFactory<T1, TBase> Implements IEnumerable<Func<T1, TBase>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.FilterByType<T, TFilter>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) ThrowHelper.ThrowIfNull(object, string) Examples One use case is to make it easier to write unit tests for a set of types that share an interface. Warning It looks like the sample you are looking for does not exist. Remarks TBase is often a common interface or abstract type, and the registered instances of different types that implements the base type. This is useful when you want to choose the implementation based on a type parameter. Methods Add<TImplementation>(Func<T1, TImplementation>) Registers a factory method for creating instances of TImplementation. public void Add<TImplementation>(Func<T1, TImplementation> factory) where TImplementation : TBase Parameters factory Func<T1, TImplementation> The factory method that creates instances of TImplementation. Type Parameters TImplementation The type of object to be created by the factory method. GetEnumerator() Returns an enumerator that iterates through the registered factory methods. public IEnumerator<Func<T1, TBase>> GetEnumerator() Returns IEnumerator<Func<T1, TBase>> An enumerator for the registered factory methods. GetInstance<TImplementation>(T1) Gets an instance of TImplementation using the registered factory method. public TImplementation GetInstance<TImplementation>(T1 arg1) where TImplementation : TBase Parameters arg1 T1 The first argument to pass to the factory method. Returns TImplementation An instance of TImplementation. Type Parameters TImplementation The type of object to be created. Exceptions InvalidOperationException Thrown when no factory method is registered for the specified type."
  },
  "api/RTCube.Extensions.ImplementationFactory-3.html": {
    "href": "api/RTCube.Extensions.ImplementationFactory-3.html",
    "title": "Class ImplementationFactory<T1, T2, TBase> | RTCubeExtensions 文档",
    "keywords": "Class ImplementationFactory<T1, T2, TBase> Namespace RTCube.Extensions A factory class for creating instances of types derived from TBase. [Version(3, 2, 0)] public class ImplementationFactory<T1, T2, TBase> : IEnumerable<Func<T1, T2, TBase>>, IEnumerable Type Parameters T1 The type of argument1 for factory methods. T2 The type of argument2 for factory methods. TBase The base type that all created instances must derive from. Inheritance object ImplementationFactory<T1, T2, TBase> Implements IEnumerable<Func<T1, T2, TBase>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.FilterByType<T, TFilter>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) ThrowHelper.ThrowIfNull(object, string) Examples One use case is to make it easier to write unit tests for a set of types that share an interface. Warning It looks like the sample you are looking for does not exist. Remarks TBase is often a common interface or abstract type, and the registered instances of different types that implements the base type. This is useful when you want to choose the implementation based on a type parameter. Methods Add<TImplementation>(Func<T1, T2, TImplementation>) Registers a factory method for creating instances of TImplementation. public void Add<TImplementation>(Func<T1, T2, TImplementation> factory) where TImplementation : TBase Parameters factory Func<T1, T2, TImplementation> The factory method that creates instances of TImplementation. Type Parameters TImplementation The type of object to be created by the factory method. GetEnumerator() Returns an enumerator that iterates through the registered factory methods. public IEnumerator<Func<T1, T2, TBase>> GetEnumerator() Returns IEnumerator<Func<T1, T2, TBase>> An enumerator for the registered factory methods. GetInstance<TImplementation>(T1, T2) Gets an instance of TImplementation using the registered factory method. public TImplementation GetInstance<TImplementation>(T1 arg1, T2 arg2) where TImplementation : TBase Parameters arg1 T1 The first argument to pass to the factory method. arg2 T2 The second argument to pass to the factory method. Returns TImplementation An instance of TImplementation. Type Parameters TImplementation The type of object to be created. Exceptions InvalidOperationException Thrown when no factory method is registered for the specified type."
  },
  "api/RTCube.Extensions.ImplementationFactory-4.html": {
    "href": "api/RTCube.Extensions.ImplementationFactory-4.html",
    "title": "Class ImplementationFactory<T1, T2, T3, TBase> | RTCubeExtensions 文档",
    "keywords": "Class ImplementationFactory<T1, T2, T3, TBase> Namespace RTCube.Extensions A factory class for creating instances of types derived from TBase. [Version(3, 2, 0)] public class ImplementationFactory<T1, T2, T3, TBase> : IEnumerable<Func<T1, T2, T3, TBase>>, IEnumerable Type Parameters T1 The type of argument1 for factory methods. T2 The type of argument2 for factory methods. T3 The type of argument3 for factory methods. TBase The base type that all created instances must derive from. Inheritance object ImplementationFactory<T1, T2, T3, TBase> Implements IEnumerable<Func<T1, T2, T3, TBase>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.FilterByType<T, TFilter>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) ThrowHelper.ThrowIfNull(object, string) Examples One use case is to make it easier to write unit tests for a set of types that share an interface. Warning It looks like the sample you are looking for does not exist. Remarks TBase is often a common interface or abstract type, and the registered instances of different types that implements the base type. This is useful when you want to choose the implementation based on a type parameter. Methods Add<TImplementation>(Func<T1, T2, T3, TImplementation>) Registers a factory method for creating instances of TImplementation. public void Add<TImplementation>(Func<T1, T2, T3, TImplementation> factory) where TImplementation : TBase Parameters factory Func<T1, T2, T3, TImplementation> The factory method that creates instances of TImplementation. Type Parameters TImplementation The type of object to be created by the factory method. GetEnumerator() Returns an enumerator that iterates through the registered factory methods. public IEnumerator<Func<T1, T2, T3, TBase>> GetEnumerator() Returns IEnumerator<Func<T1, T2, T3, TBase>> An enumerator for the registered factory methods. GetInstance<TImplementation>(T1, T2, T3) Gets an instance of TImplementation using the registered factory method. public TImplementation GetInstance<TImplementation>(T1 arg1, T2 arg2, T3 arg3) where TImplementation : TBase Parameters arg1 T1 The first argument to pass to the factory method. arg2 T2 The second argument to pass to the factory method. arg3 T3 The third argument to pass to the factory method. Returns TImplementation An instance of TImplementation. Type Parameters TImplementation The type of object to be created. Exceptions InvalidOperationException Thrown when no factory method is registered for the specified type."
  },
  "api/RTCube.Extensions.ImplementationFactory-5.html": {
    "href": "api/RTCube.Extensions.ImplementationFactory-5.html",
    "title": "Class ImplementationFactory<T1, T2, T3, T4, TBase> | RTCubeExtensions 文档",
    "keywords": "Class ImplementationFactory<T1, T2, T3, T4, TBase> Namespace RTCube.Extensions A factory class for creating instances of types derived from TBase. [Version(3, 2, 0)] public class ImplementationFactory<T1, T2, T3, T4, TBase> : IEnumerable<Func<T1, T2, T3, T4, TBase>>, IEnumerable Type Parameters T1 The type of argument1 for factory methods. T2 The type of argument2 for factory methods. T3 The type of argument3 for factory methods. T4 The type of argument4 for factory methods. TBase The base type that all created instances must derive from. Inheritance object ImplementationFactory<T1, T2, T3, T4, TBase> Implements IEnumerable<Func<T1, T2, T3, T4, TBase>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.FilterByType<T, TFilter>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) ThrowHelper.ThrowIfNull(object, string) Examples One use case is to make it easier to write unit tests for a set of types that share an interface. Warning It looks like the sample you are looking for does not exist. Remarks TBase is often a common interface or abstract type, and the registered instances of different types that implements the base type. This is useful when you want to choose the implementation based on a type parameter. Methods Add<TImplementation>(Func<T1, T2, T3, T4, TImplementation>) Registers a factory method for creating instances of TImplementation. public void Add<TImplementation>(Func<T1, T2, T3, T4, TImplementation> factory) where TImplementation : TBase Parameters factory Func<T1, T2, T3, T4, TImplementation> The factory method that creates instances of TImplementation. Type Parameters TImplementation The type of object to be created by the factory method. GetEnumerator() Returns an enumerator that iterates through the registered factory methods. public IEnumerator<Func<T1, T2, T3, T4, TBase>> GetEnumerator() Returns IEnumerator<Func<T1, T2, T3, T4, TBase>> An enumerator for the registered factory methods. GetInstance<TImplementation>(T1, T2, T3, T4) Gets an instance of TImplementation using the registered factory method. public TImplementation GetInstance<TImplementation>(T1 arg1, T2 arg2, T3 arg3, T4 arg4) where TImplementation : TBase Parameters arg1 T1 The first argument to pass to the factory method. arg2 T2 The second argument to pass to the factory method. arg3 T3 The third argument to pass to the factory method. arg4 T4 The fourth argument to pass to the factory method. Returns TImplementation An instance of TImplementation. Type Parameters TImplementation The type of object to be created. Exceptions InvalidOperationException Thrown when no factory method is registered for the specified type."
  },
  "api/RTCube.Extensions.InspectorButtonAttribute.html": {
    "href": "api/RTCube.Extensions.InspectorButtonAttribute.html",
    "title": "Class InspectorButtonAttribute | RTCubeExtensions 文档",
    "keywords": "Class InspectorButtonAttribute Namespace RTCube.Extensions RTCube.Extensions.Editor.Internal.GLEditor`1.DrawInspectorButtons draws a button for each method marked with this attribute. This is also used by RTCube.Extensions.Editor.GLMonoBehaviourEditor. [AttributeUsage(AttributeTargets.Method)] public class InspectorButtonAttribute : Attribute Inheritance object Attribute InspectorButtonAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) See Also Attribute"
  },
  "api/RTCube.Extensions.InspectorFlagsAttribute.html": {
    "href": "api/RTCube.Extensions.InspectorFlagsAttribute.html",
    "title": "Class InspectorFlagsAttribute | RTCubeExtensions 文档",
    "keywords": "Class InspectorFlagsAttribute Namespace RTCube.Extensions Mark fields that should be displayed as bit field mask in the inspector [Version(1, 0, 0)] public class InspectorFlagsAttribute : PropertyAttribute Inheritance object InspectorFlagsAttribute Extension Methods ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.InspectorList-1.html": {
    "href": "api/RTCube.Extensions.InspectorList-1.html",
    "title": "Class InspectorList<T> | RTCubeExtensions 文档",
    "keywords": "Class InspectorList<T> Namespace RTCube.Extensions Exactly the same as generic List, but has a custom property drawer that draws a re-orderable list in the inspector. [Version(1, 0, 0)] [Serializable] public class InspectorList<T> : InspectorList, IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters T The type of the contents of this list. Inheritance object InspectorList InspectorList<T> Implements IList<T> ICollection<T> IEnumerable<T> IEnumerable Derived ColorList FloatList IntList MonoBehaviourList ObjectList StringList Vector2List Vector3List Vector4List Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, IComparer<TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int, IComparer<TElement>) CollectionExtensions.IsEmpty<T>(ICollection<T>) PoolExtensions.AddAllAvailableFromPool<T>(ICollection<T>, IPool<T>) PoolExtensions.AddFromPool<T>(ICollection<T>, IPool<T>, int) PoolExtensions.TryAddFromPool<T>(ICollection<T>, IPool<T>, int) CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) CollectionExtensions.FillWithDefault<T>(IList<T>) CollectionExtensions.Fill<T>(IList<T>, T) CollectionExtensions.Shuffle<T>(IList<T>) CollectionExtensions.Shuffle<T>(IList<T>, IRandom) ThrowHelper.ThrowIfNull(object, string) Remarks This class should not be used directly (otherwise, it will not appear in the inspector). Instead, use either one of the provided subclasses, or define a new custom non-generic subclass and use that. Constructors InspectorList() public InspectorList() InspectorList(IEnumerable<T>) public InspectorList(IEnumerable<T> initialValues) Parameters initialValues IEnumerable<T> Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[int] Gets or sets the element at the specified index. public T this[int index] { get; set; } Parameters index int The zero-based index of the element to get or set. Property Value T The element at the specified index. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The property is set and the IList<T> is read-only. Methods Add(T) Adds an item to the ICollection<T>. public void Add(T item) Parameters item T The object to add to the ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. AddRange(IEnumerable<T>) public void AddRange(IEnumerable<T> item) Parameters item IEnumerable<T> Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Contains(T) Determines whether the ICollection<T> contains a specific value. public bool Contains(T item) Parameters item T The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. CopyTo(T[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(T[] array, int arrayIndex) Parameters array T[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. IndexOf(T) Determines the index of a specific item in the IList<T>. public int IndexOf(T item) Parameters item T The object to locate in the IList<T>. Returns int The index of item if found in the list; otherwise, -1. Insert(int, T) Inserts an item to the IList<T> at the specified index. public void Insert(int index, T item) Parameters index int The zero-based index at which item should be inserted. item T The object to insert into the IList<T>. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. Remove(T) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(T item) Parameters item T The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. RemoveAt(int) Removes the IList<T> item at the specified index. public void RemoveAt(int index) Parameters index int The zero-based index of the item to remove. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only."
  },
  "api/RTCube.Extensions.InspectorList.html": {
    "href": "api/RTCube.Extensions.InspectorList.html",
    "title": "Class InspectorList | RTCubeExtensions 文档",
    "keywords": "Class InspectorList Namespace RTCube.Extensions The base class for the generic InspectorList. This class exists so that a single property drawer can be used for all subclasses. [Version(1, 0, 0)] [Serializable] public class InspectorList Inheritance object InspectorList Derived InspectorList<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.IntList.html": {
    "href": "api/RTCube.Extensions.IntList.html",
    "title": "Class IntList | RTCubeExtensions 文档",
    "keywords": "Class IntList Namespace RTCube.Extensions An InspectorList of type int. [Version(1, 0, 0)] [Serializable] public class IntList : InspectorList<int>, IList<int>, ICollection<int>, IEnumerable<int>, IEnumerable Inheritance object InspectorList InspectorList<int> IntList Implements IList<int> ICollection<int> IEnumerable<int> IEnumerable Inherited Members InspectorList<int>.GetEnumerator() InspectorList<int>.Add(int) InspectorList<int>.AddRange(IEnumerable<int>) InspectorList<int>.Clear() InspectorList<int>.Contains(int) InspectorList<int>.CopyTo(int[], int) InspectorList<int>.Remove(int) InspectorList<int>.Count InspectorList<int>.IsReadOnly InspectorList<int>.IndexOf(int) InspectorList<int>.Insert(int, int) InspectorList<int>.RemoveAt(int) InspectorList<int>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, IComparer<TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int, IComparer<TElement>) CollectionExtensions.IsEmpty<T>(ICollection<T>) PoolExtensions.AddAllAvailableFromPool<T>(ICollection<T>, IPool<T>) PoolExtensions.AddFromPool<T>(ICollection<T>, IPool<T>, int) PoolExtensions.TryAddFromPool<T>(ICollection<T>, IPool<T>, int) CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinMax(IEnumerable<int>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) CollectionExtensions.FillWithDefault<T>(IList<T>) CollectionExtensions.Fill<T>(IList<T>, T) CollectionExtensions.Shuffle<T>(IList<T>) CollectionExtensions.Shuffle<T>(IList<T>, IRandom) ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.IntPopupAttribute.html": {
    "href": "api/RTCube.Extensions.IntPopupAttribute.html",
    "title": "Class IntPopupAttribute | RTCubeExtensions 文档",
    "keywords": "Class IntPopupAttribute Namespace RTCube.Extensions An attribute used to mark an int field that should be drawn as a popup list in the Unity editor. [Version(1, 0, 0)] public class IntPopupAttribute : PopupListAttribute Inheritance object PopupListAttribute IntPopupAttribute Inherited Members PopupListAttribute.PopupListData PopupListAttribute.RetrievalMethod Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors IntPopupAttribute(int[]) Marks an int field that should be drawn as a popup list using the given list of values. public IntPopupAttribute(int[] values) Parameters values int[] The list of integer values for the popup list. IntPopupAttribute(string) Marks an int field that should be drawn as a popup list using the given key to retrieve the values. public IntPopupAttribute(string key) Parameters key string The key used to retrieve the integer values for the popup list. The retriever function should be registered with RegisterValuesRetriever<T>(string, Func<IEnumerable<T>>)."
  },
  "api/RTCube.Extensions.Internal.AbstractAttribute.html": {
    "href": "api/RTCube.Extensions.Internal.AbstractAttribute.html",
    "title": "Class AbstractAttribute | RTCubeExtensions 文档",
    "keywords": "Class AbstractAttribute Namespace RTCube.Extensions.Internal Use to mark classes and methods that are abstract, but cannot be implemented as such because Unity does not serialize such classes properly, especially abstract ScriptableObjects. [Version(1, 0, 0)] [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct|AttributeTargets.Method|AttributeTargets.Property, Inherited = false)] public sealed class AbstractAttribute : Attribute Inheritance object Attribute AbstractAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.Internal.BinaryHeap.BinaryHeap-1.html": {
    "href": "api/RTCube.Extensions.Internal.BinaryHeap.BinaryHeap-1.html",
    "title": "Class BinaryHeap<T> | RTCubeExtensions 文档",
    "keywords": "Class BinaryHeap<T> Namespace RTCube.Extensions.Internal.BinaryHeap A binary heap, useful for sorting data and priority queues. public class BinaryHeap<T> : ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters T Type of item in the heap Inheritance object BinaryHeap<T> Implements ICollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, IComparer<TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int, IComparer<TElement>) CollectionExtensions.IsEmpty<T>(ICollection<T>) PoolExtensions.AddAllAvailableFromPool<T>(ICollection<T>, IPool<T>) PoolExtensions.AddFromPool<T>(ICollection<T>, IPool<T>, int) PoolExtensions.TryAddFromPool<T>(ICollection<T>, IPool<T>, int) CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) ThrowHelper.ThrowIfNull(object, string) Constructors BinaryHeap(Func<T, T, int>) Creates a new binary heap. public BinaryHeap(Func<T, T, int> compare) Parameters compare Func<T, T, int> Properties Capacity Gets or sets the capacity of the heap. public int Capacity { get; set; } Property Value int Count Gets the number of values in the heap. public int Count { get; } Property Value int IsReadOnly Gets whether or not the binary heap is readonly. public bool IsReadOnly { get; } Property Value bool Methods Add(T) Adds a key and value to the heap. public void Add(T item) Parameters item T The item to add to the heap. Clear() Removes all items from the heap. public void Clear() Contains(T) Checks to see if the binary heap contains the specified item. public bool Contains(T item) Parameters item T The item to search the binary heap for. Returns bool A boolean, true if binary heap contains item. Copy() Creates a new instance of an identical binary heap. public BinaryHeap<T> Copy() Returns BinaryHeap<T> A BinaryHeap. CopyTo(T[], int) Copies the binary heap to an array at the specified index. public void CopyTo(T[] array, int arrayIndex) Parameters array T[] One dimensional array that is the destination of the copied elements. arrayIndex int The zero-based index at which copying begins. GetEnumerator() Gets an enumerator for the binary heap. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An IEnumerator of type T. Peek() Gets the first value in the heap without removing it. public T Peek() Returns T The lowest value of type TValue. Remove() Removes and returns the first item in the heap. public T Remove() Returns T The next value in the heap. Remove(T) Removes an item from the heap. This utilizes the type T's Comparer and will not remove duplicates. public bool Remove(T item) Parameters item T The item to remove from the heap. Returns bool Boolean true if the item was removed."
  },
  "api/RTCube.Extensions.Internal.BinaryHeap.html": {
    "href": "api/RTCube.Extensions.Internal.BinaryHeap.html",
    "title": "Namespace RTCube.Extensions.Internal.BinaryHeap | RTCubeExtensions 文档",
    "keywords": "Namespace RTCube.Extensions.Internal.BinaryHeap Classes BinaryHeap<T> A binary heap, useful for sorting data and priority queues."
  },
  "api/RTCube.Extensions.Internal.EditorInternal.html": {
    "href": "api/RTCube.Extensions.Internal.EditorInternal.html",
    "title": "Class EditorInternal | RTCubeExtensions 文档",
    "keywords": "Class EditorInternal Namespace RTCube.Extensions.Internal Use to mark targets that are only supposed to be used by internal editor code. [Version(1, 0, 0)] [AttributeUsage(AttributeTargets.All, Inherited = false)] public sealed class EditorInternal : Attribute Inheritance object Attribute EditorInternal Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.Internal.ExperimentalAttribute.html": {
    "href": "api/RTCube.Extensions.Internal.ExperimentalAttribute.html",
    "title": "Class ExperimentalAttribute | RTCubeExtensions 文档",
    "keywords": "Class ExperimentalAttribute Namespace RTCube.Extensions.Internal This attribute is used to mark components as experimental. Typically, these are not thoroughly tested, or the design has not been thought out completely. They are likely to contain bugs and change. [AttributeUsage(AttributeTargets.All)] [Version(1, 0, 0)] public sealed class ExperimentalAttribute : Attribute Inheritance object Attribute ExperimentalAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.Internal.FriendAttribute.html": {
    "href": "api/RTCube.Extensions.Internal.FriendAttribute.html",
    "title": "Class FriendAttribute | RTCubeExtensions 文档",
    "keywords": "Class FriendAttribute Namespace RTCube.Extensions.Internal Use to mark targets that are only exposed because communication between classes is necessary to implement certain Unity features. Typically, when editor classes need private access to the classes they edit. [Version(1, 0, 0)] [AttributeUsage(AttributeTargets.All, Inherited = false)] public sealed class FriendAttribute : Attribute Inheritance object Attribute FriendAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.Internal.HashFunctions.HashFunction.html": {
    "href": "api/RTCube.Extensions.Internal.HashFunctions.HashFunction.html",
    "title": "Class HashFunction | RTCubeExtensions 文档",
    "keywords": "Class HashFunction Namespace RTCube.Extensions.Internal.HashFunctions Base class for representations of hash functions. public abstract class HashFunction Inheritance object HashFunction Derived MurmurHash XXHash Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Methods GetHash(int) Optional method that can be implemented to optimize this special case. public virtual uint GetHash(int data) Parameters data int Returns uint GetHash(int, int) Optional method that can be implemented to optimize this special case. public virtual uint GetHash(int x, int y) Parameters x int y int Returns uint GetHash(int, int, int) Optional method that can be implemented to optimize this special case. public virtual uint GetHash(int x, int y, int z) Parameters x int y int z int Returns uint GetHash(params int[]) Main hash function for any number of parameters. public abstract uint GetHash(params int[] data) Parameters data int[] The data to hash. Returns uint Range(int, int, int) Optional method that can be implemented to optimize this special case. public int Range(int min, int max, int data) Parameters min int max int data int Returns int Range(int, int, int, int) Optional method that can be implemented to optimize this special case. public int Range(int min, int max, int x, int y) Parameters min int max int x int y int Returns int Range(int, int, int, int, int) Optional method that can be implemented to optimize this special case. public int Range(int min, int max, int x, int y, int z) Parameters min int max int x int y int z int Returns int Range(int, int, params int[]) Gets a hash value in the given range (including the minimum value but exlcuding the maximum). public int Range(int min, int max, params int[] data) Parameters min int The minimum value (inclusive) that this method will return. max int The maximum value (exclusive) that this method will return. data int[] The data to hash. Returns int Range(float, float, int) Optional method that can be implemented to optimize this special case. public float Range(float min, float max, int data) Parameters min float max float data int Returns float Range(float, float, int, int) Optional method that can be implemented to optimize this special case. public float Range(float min, float max, int x, int y) Parameters min float max float x int y int Returns float Range(float, float, int, int, int) Optional method that can be implemented to optimize this special case. public float Range(float min, float max, int x, int y, int z) Parameters min float max float x int y int z int Returns float Range(float, float, params int[]) Gets a float presentation of the hash value in the given range. public float Range(float min, float max, params int[] data) Parameters min float The minimum value (inclusive) that this method will return. max float The maximum value (inclusive) that this method will return. data int[] The data to hash. Returns float Value(int) Optional method that can be implemented to optimize this special case. public float Value(int data) Parameters data int Returns float Value(int, int) Optional method that can be implemented to optimize this special case. public float Value(int x, int y) Parameters x int y int Returns float Value(int, int, int) Optional method that can be implemented to optimize this special case. public float Value(int x, int y, int z) Parameters x int y int z int Returns float Value(params int[]) Gets a floating point value representation (between 0 and 1) of the hash for the given data. public float Value(params int[] data) Parameters data int[] Returns float"
  },
  "api/RTCube.Extensions.Internal.HashFunctions.MurmurHash.html": {
    "href": "api/RTCube.Extensions.Internal.HashFunctions.MurmurHash.html",
    "title": "Class MurmurHash | RTCubeExtensions 文档",
    "keywords": "Class MurmurHash Namespace RTCube.Extensions.Internal.HashFunctions An implementation of HashFunction using MurmurHash3. See https://en.wikipedia.org/wiki/MurmurHash . public sealed class MurmurHash : HashFunction Inheritance object HashFunction MurmurHash Inherited Members HashFunction.GetHash(int, int) HashFunction.GetHash(int, int, int) HashFunction.Value(params int[]) HashFunction.Value(int) HashFunction.Value(int, int) HashFunction.Value(int, int, int) HashFunction.Range(int, int, params int[]) HashFunction.Range(int, int, int) HashFunction.Range(int, int, int, int) HashFunction.Range(int, int, int, int, int) HashFunction.Range(float, float, params int[]) HashFunction.Range(float, float, int) HashFunction.Range(float, float, int, int) HashFunction.Range(float, float, int, int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors MurmurHash(int) public MurmurHash(int seed) Parameters seed int Methods GetHash(int) Optional method that can be implemented to optimize this special case. public override uint GetHash(int data) Parameters data int Returns uint GetHash(params int[]) Main hash function for any number of parameters. public override uint GetHash(params int[] data) Parameters data int[] The data to hash. Returns uint GetHash(ReadOnlySpan<byte>) public uint GetHash(ReadOnlySpan<byte> data) Parameters data ReadOnlySpan<byte> Returns uint GetHashParallel(byte[]) public uint GetHashParallel(byte[] data) Parameters data byte[] Returns uint See Also HashFunction"
  },
  "api/RTCube.Extensions.Internal.HashFunctions.XXHash.html": {
    "href": "api/RTCube.Extensions.Internal.HashFunctions.XXHash.html",
    "title": "Class XXHash | RTCubeExtensions 文档",
    "keywords": "Class XXHash Namespace RTCube.Extensions.Internal.HashFunctions An implementation of HashFunction using xxHash. See http://cyan4973.github.io/xxHash/ . public class XXHash : HashFunction Inheritance object HashFunction XXHash Inherited Members HashFunction.GetHash(int, int) HashFunction.GetHash(int, int, int) HashFunction.Value(params int[]) HashFunction.Value(int) HashFunction.Value(int, int) HashFunction.Value(int, int, int) HashFunction.Range(int, int, params int[]) HashFunction.Range(int, int, int) HashFunction.Range(int, int, int, int) HashFunction.Range(int, int, int, int, int) HashFunction.Range(float, float, params int[]) HashFunction.Range(float, float, int) HashFunction.Range(float, float, int, int) HashFunction.Range(float, float, int, int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors XXHash(int) public XXHash(int seed) Parameters seed int Methods GetHash(byte[]) public uint GetHash(byte[] buf) Parameters buf byte[] Returns uint GetHash(int) Optional method that can be implemented to optimize this special case. public override uint GetHash(int buf) Parameters buf int Returns uint GetHash(params int[]) Main hash function for any number of parameters. public override uint GetHash(params int[] buf) Parameters buf int[] Returns uint GetHash(params uint[]) public uint GetHash(params uint[] buf) Parameters buf uint[] Returns uint See Also HashFunction"
  },
  "api/RTCube.Extensions.Internal.HashFunctions.html": {
    "href": "api/RTCube.Extensions.Internal.HashFunctions.html",
    "title": "Namespace RTCube.Extensions.Internal.HashFunctions | RTCubeExtensions 文档",
    "keywords": "Namespace RTCube.Extensions.Internal.HashFunctions Classes HashFunction Base class for representations of hash functions. MurmurHash An implementation of HashFunction using MurmurHash3. See https://en.wikipedia.org/wiki/MurmurHash . XXHash An implementation of HashFunction using xxHash. See http://cyan4973.github.io/xxHash/ ."
  },
  "api/RTCube.Extensions.Internal.HelpURLAttribute.html": {
    "href": "api/RTCube.Extensions.Internal.HelpURLAttribute.html",
    "title": "Class HelpURLAttribute | RTCubeExtensions 文档",
    "keywords": "Class HelpURLAttribute Namespace RTCube.Extensions.Internal A dummy attribute meant to mimic Unity 5's HelpURLAttribute so that scripts for Unity 5 can also compile under Unity 4. [Version(1, 0, 0)] [AttributeUsage(AttributeTargets.Class)] public class HelpURLAttribute : Attribute Inheritance object Attribute HelpURLAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors HelpURLAttribute(string) public HelpURLAttribute(string help) Parameters help string"
  },
  "api/RTCube.Extensions.Internal.ImmutableAttribute.html": {
    "href": "api/RTCube.Extensions.Internal.ImmutableAttribute.html",
    "title": "Class ImmutableAttribute | RTCubeExtensions 文档",
    "keywords": "Class ImmutableAttribute Namespace RTCube.Extensions.Internal Use to mark classes and structs that are immutable. In addition to providing this information to the programmer client, it also makes it possible to automate tests for ensuring a class or struct is indeed immutable. [Version(1, 0, 0)] [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct, Inherited = false)] public sealed class ImmutableAttribute : Attribute Inheritance object Attribute ImmutableAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.Internal.KDTree.ChebychevDistanceFunction.html": {
    "href": "api/RTCube.Extensions.Internal.KDTree.ChebychevDistanceFunction.html",
    "title": "Class ChebychevDistanceFunction | RTCubeExtensions 文档",
    "keywords": "Class ChebychevDistanceFunction Namespace RTCube.Extensions.Internal.KDTree A distance function for our KD-Tree which returns manhattan distances. public class ChebychevDistanceFunction : IDistanceFunction Inheritance object ChebychevDistanceFunction Implements IDistanceFunction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Methods Distance(Vector2, Vector2) Compute a distance between two n-dimensional points. public float Distance(Vector2 p1, Vector2 p2) Parameters p1 Vector2 The first point. p2 Vector2 The second point. Returns float The n-dimensional distance. DistanceToRectangle(Vector2, Vector2, Vector2) Find the shortest distance from a point to an axis aligned rectangle in n-dimensional space. public float DistanceToRectangle(Vector2 point, Vector2 min, Vector2 max) Parameters point Vector2 The point of interest. min Vector2 The minimum coordinate of the rectangle. max Vector2 The maximum coordinate of the rectangle. Returns float The shortest n-dimensional distance between the point and rectangle."
  },
  "api/RTCube.Extensions.Internal.KDTree.IDistanceFunction.html": {
    "href": "api/RTCube.Extensions.Internal.KDTree.IDistanceFunction.html",
    "title": "Interface IDistanceFunction | RTCubeExtensions 文档",
    "keywords": "Interface IDistanceFunction Namespace RTCube.Extensions.Internal.KDTree An interface which enables flexible distance functions. public interface IDistanceFunction Extension Methods ThrowHelper.ThrowIfNull(object, string) Methods Distance(Vector2, Vector2) Compute a distance between two n-dimensional points. float Distance(Vector2 p1, Vector2 p2) Parameters p1 Vector2 The first point. p2 Vector2 The second point. Returns float The n-dimensional distance. DistanceToRectangle(Vector2, Vector2, Vector2) Find the shortest distance from a point to an axis aligned rectangle in n-dimensional space. float DistanceToRectangle(Vector2 point, Vector2 min, Vector2 max) Parameters point Vector2 The point of interest. min Vector2 The minimum coordinate of the rectangle. max Vector2 The maximum coordinate of the rectangle. Returns float The shortest n-dimensional distance between the point and rectangle."
  },
  "api/RTCube.Extensions.Internal.KDTree.IntervalHeap-1.html": {
    "href": "api/RTCube.Extensions.Internal.KDTree.IntervalHeap-1.html",
    "title": "Class IntervalHeap<T> | RTCubeExtensions 文档",
    "keywords": "Class IntervalHeap<T> Namespace RTCube.Extensions.Internal.KDTree A binary interval heap is double-ended priority queue is a priority queue that it allows for efficient removal of both the maximum and minimum element. public class IntervalHeap<T> Type Parameters T The data type contained at each key. Inheritance object IntervalHeap<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks This is based on this: https://bitbucket.org/rednaxela/knn-benchmark/src/tip/ags/utils/dataStructures/trees/thirdGenKD/ Constructors IntervalHeap() Construct a new interval heap with the default capacity. public IntervalHeap() IntervalHeap(int) Construct a new interval heap with a custom capacity. public IntervalHeap(int capacity) Parameters capacity int Properties Capacity The current capacity of this interval heap. public int Capacity { get; } Property Value int Max Get the data with the largest key. public T Max { get; } Property Value T MaxKey Get the largest key. public float MaxKey { get; } Property Value float Min Get the data with the smallest key. public T Min { get; } Property Value T MinKey Get the smallest key. public float MinKey { get; } Property Value float Size The number of items in this interval heap. public int Size { get; } Property Value int Methods Insert(float, T) Insert a new data item at a given key. public void Insert(float key, T value) Parameters key float The value which represents our data (i.e. a distance). value T The data we want to store. RemoveMax() Remove the item with the largest key in the queue. public void RemoveMax() RemoveMin() Remove the item with the smallest key from the queue. public void RemoveMin() ReplaceMax(float, T) Swap out the item with the largest key in the queue. public void ReplaceMax(float key, T value) Parameters key float The new key for the largest item. value T The new data for the largest item. ReplaceMin(float, T) Replace the item with the smallest key in the queue. public void ReplaceMin(float key, T value) Parameters key float The new minimum key. value T The new minimum data value."
  },
  "api/RTCube.Extensions.Internal.KDTree.KDNode-1.html": {
    "href": "api/RTCube.Extensions.Internal.KDTree.KDNode-1.html",
    "title": "Class KDNode<T> | RTCubeExtensions 文档",
    "keywords": "Class KDNode<T> Namespace RTCube.Extensions.Internal.KDTree A KD-Tree node which supports a generic number of dimensions. All data items need the same number of dimensions. This node splits based on the largest range of any dimension. public class KDNode<T> Type Parameters T The generic data type this structure contains. Inheritance object KDNode<T> Derived KDTree<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks This is based on this: https://bitbucket.org/rednaxela/knn-benchmark/src/tip/ags/utils/dataStructures/trees/thirdGenKD/ Constructors KDNode(int, int) Protected method which constructs a new KDNode. protected KDNode(int iDimensions, int iBucketCapacity) Parameters iDimensions int The number of dimensions for this node (all the same in the tree). iBucketCapacity int The initial capacity of the bucket. Fields bSinglePoint Does this node represent only one point. protected bool bSinglePoint Field Value bool fSplitValue The split value (larger go into the right, smaller go into left) protected float fSplitValue Field Value float iBucketCapacity The maximum capacity of this node. protected int iBucketCapacity Field Value int iDimensions The number of dimensions for this node. protected int iDimensions Field Value int iSplitDimension The split dimension. protected int iSplitDimension Field Value int pLeft The left and right children. protected KDNode<T> pLeft Field Value KDNode<T> pRight The left and right children. protected KDNode<T> pRight Field Value KDNode<T> tData The array of data values. [index] protected T[] tData Field Value T[] tMaxBound The min and max bound for this node. All dimensions. protected Vector2 tMaxBound Field Value Vector2 tMinBound The min and max bound for this node. All dimensions. protected Vector2 tMinBound Field Value Vector2 tPoints The array of locations. [index][dimension] protected Vector2[] tPoints Field Value Vector2[] Properties IsLeaf Is this KDNode a leaf or not? public bool IsLeaf { get; } Property Value bool Size The number of items in this leaf node and all children. public int Size { get; } Property Value int Methods AddPoint(Vector2, T) Insert a new point into this leaf node. public void AddPoint(Vector2 tPoint, T kValue) Parameters tPoint Vector2 The position which represents the data. kValue T The value of the data."
  },
  "api/RTCube.Extensions.Internal.KDTree.KDTree-1.html": {
    "href": "api/RTCube.Extensions.Internal.KDTree.KDTree-1.html",
    "title": "Class KDTree<T> | RTCubeExtensions 文档",
    "keywords": "Class KDTree<T> Namespace RTCube.Extensions.Internal.KDTree A KDTree class represents the root of a variable-dimension KD-Tree. public class KDTree<T> : KDNode<T> Type Parameters T The generic data type we want this tree to contain. Inheritance object KDNode<T> KDTree<T> Inherited Members KDNode<T>.iDimensions KDNode<T>.iBucketCapacity KDNode<T>.tPoints KDNode<T>.tData KDNode<T>.pLeft KDNode<T>.pRight KDNode<T>.iSplitDimension KDNode<T>.fSplitValue KDNode<T>.tMinBound KDNode<T>.tMaxBound KDNode<T>.bSinglePoint KDNode<T>.Size KDNode<T>.IsLeaf KDNode<T>.AddPoint(Vector2, T) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks This is based on this: https://bitbucket.org/rednaxela/knn-benchmark/src/tip/ags/utils/dataStructures/trees/thirdGenKD/ Constructors KDTree(int) Create a new KD-Tree given a number of dimensions. public KDTree(int iDimensions) Parameters iDimensions int The number of data sorting dimensions. i.e. 3 for a 3D point. KDTree(int, int) Create a new KD-Tree given a number of dimensions and initial bucket capacity. public KDTree(int iDimensions, int iBucketCapacity) Parameters iDimensions int The number of data sorting dimensions. i.e. 3 for a 3D point. iBucketCapacity int The default number of items that can be stored in each node. Methods NearestNeighbors(Vector2, IDistanceFunction, int, float) Get the nearest neighbours to a point in the kd tree using a user defined distance function. public NearestNeighbour<T> NearestNeighbors(Vector2 tSearchPoint, IDistanceFunction kDistanceFunction, int iMaxReturned, float fDistance) Parameters tSearchPoint Vector2 The point of interest. kDistanceFunction IDistanceFunction The distance function to use. iMaxReturned int The maximum number of points which can be returned by the iterator. fDistance float A threshold distance to apply. Optional. Negative values mean that it is not applied. Returns NearestNeighbour<T> A new nearest neighbour iterator with the given parameters. NearestNeighbors(Vector2, int, float) Get the nearest neighbours to a point in the kd tree using a square euclidean distance function. public NearestNeighbour<T> NearestNeighbors(Vector2 tSearchPoint, int iMaxReturned, float fDistance = -1) Parameters tSearchPoint Vector2 The point of interest. iMaxReturned int The maximum number of points which can be returned by the iterator. fDistance float A threshold distance to apply. Optional. Negative values mean that it is not applied. Returns NearestNeighbour<T> A new nearest neighbour iterator with the given parameters."
  },
  "api/RTCube.Extensions.Internal.KDTree.ManhattanDistanceFunction.html": {
    "href": "api/RTCube.Extensions.Internal.KDTree.ManhattanDistanceFunction.html",
    "title": "Class ManhattanDistanceFunction | RTCubeExtensions 文档",
    "keywords": "Class ManhattanDistanceFunction Namespace RTCube.Extensions.Internal.KDTree A distance function for our KD-Tree which returns manhattan distances. public class ManhattanDistanceFunction : IDistanceFunction Inheritance object ManhattanDistanceFunction Implements IDistanceFunction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Methods Distance(Vector2, Vector2) Compute a distance between two n-dimensional points. public float Distance(Vector2 p1, Vector2 p2) Parameters p1 Vector2 The first point. p2 Vector2 The second point. Returns float The n-dimensional distance. DistanceToRectangle(Vector2, Vector2, Vector2) Find the shortest distance from a point to an axis aligned rectangle in n-dimensional space. public float DistanceToRectangle(Vector2 point, Vector2 min, Vector2 max) Parameters point Vector2 The point of interest. min Vector2 The minimum coordinate of the rectangle. max Vector2 The maximum coordinate of the rectangle. Returns float The shortest n-dimensional distance between the point and rectangle."
  },
  "api/RTCube.Extensions.Internal.KDTree.MinHeap-1.html": {
    "href": "api/RTCube.Extensions.Internal.KDTree.MinHeap-1.html",
    "title": "Class MinHeap<T> | RTCubeExtensions 文档",
    "keywords": "Class MinHeap<T> Namespace RTCube.Extensions.Internal.KDTree A MinHeap is a smallest-first queue based around a binary heap so it is quick to insert / remove items. public class MinHeap<T> Type Parameters T The type of data this MinHeap stores. Inheritance object MinHeap<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks This is based on this: https://bitbucket.org/rednaxela/knn-benchmark/src/tip/ags/utils/dataStructures/trees/thirdGenKD/ Constructors MinHeap() Create a new min heap with the default capacity. public MinHeap() MinHeap(int) Create a new min heap with a given capacity. public MinHeap(int iCapacity) Parameters iCapacity int Properties Capacity The amount of space in this queue. public int Capacity { get; } Property Value int Min Get the data stored at the minimum element. public T Min { get; } Property Value T MinKey Get the key which represents the minimum element. public float MinKey { get; } Property Value float Size The number of items in this queue. public int Size { get; } Property Value int Methods Insert(float, T) Insert a new element. public void Insert(float key, T value) Parameters key float The key which represents its position in the priority queue (ie. distance). value T The value to be stored at the key. RemoveMin() Remove the smallest element. public void RemoveMin()"
  },
  "api/RTCube.Extensions.Internal.KDTree.NearestNeighbour-1.html": {
    "href": "api/RTCube.Extensions.Internal.KDTree.NearestNeighbour-1.html",
    "title": "Class NearestNeighbour<T> | RTCubeExtensions 文档",
    "keywords": "Class NearestNeighbour<T> Namespace RTCube.Extensions.Internal.KDTree A NearestNeighbour iterator for the KD-tree which intelligently iterates and captures relevant data in the search space. public class NearestNeighbour<T> : IEnumerator Type Parameters T The type of data the iterator should handle. Inheritance object NearestNeighbour<T> Implements IEnumerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors NearestNeighbour(KDNode<T>, Vector2, IDistanceFunction, int, float) Construct a new nearest neighbour iterator. public NearestNeighbour(KDNode<T> pRoot, Vector2 tSearchPoint, IDistanceFunction kDistance, int iMaxPoints, float fThreshold) Parameters pRoot KDNode<T> The root of the tree to begin searching from. tSearchPoint Vector2 The point in n-dimensional space to search. kDistance IDistanceFunction The distance function used to evaluate the points. iMaxPoints int The max number of points which can be returned by this iterator. Capped to max in tree. fThreshold float Threshold to apply to the search space. Negative numbers indicate that no threshold is applied. Properties Current Return the current value referenced by the iterator. public T Current { get; } Property Value T CurrentDistance Return the distance of the current value to the search point. public float CurrentDistance { get; } Property Value float Methods MoveNext() Check for the next iterator item. public bool MoveNext() Returns bool True if we have one, false if not. Reset() Reset the iterator. public void Reset()"
  },
  "api/RTCube.Extensions.Internal.KDTree.SquareEuclideanDistanceFunction.html": {
    "href": "api/RTCube.Extensions.Internal.KDTree.SquareEuclideanDistanceFunction.html",
    "title": "Class SquareEuclideanDistanceFunction | RTCubeExtensions 文档",
    "keywords": "Class SquareEuclideanDistanceFunction Namespace RTCube.Extensions.Internal.KDTree A distance function for our KD-Tree which returns squared euclidean distances. public class SquareEuclideanDistanceFunction : IDistanceFunction Inheritance object SquareEuclideanDistanceFunction Implements IDistanceFunction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Methods Distance(Vector2, Vector2) Find the squared distance between two n-dimensional points. public float Distance(Vector2 p1, Vector2 p2) Parameters p1 Vector2 The first point. p2 Vector2 The second point. Returns float The n-dimensional squared distance. DistanceToRectangle(Vector2, Vector2, Vector2) Find the shortest distance from a point to an axis aligned rectangle in n-dimensional space. public float DistanceToRectangle(Vector2 point, Vector2 min, Vector2 max) Parameters point Vector2 The point of interest. min Vector2 The minimum coordinate of the rectangle. max Vector2 The maximum coordinate of the rectangle. Returns float The shortest squared n-dimensional squared distance between the point and rectangle."
  },
  "api/RTCube.Extensions.Internal.KDTree.html": {
    "href": "api/RTCube.Extensions.Internal.KDTree.html",
    "title": "Namespace RTCube.Extensions.Internal.KDTree | RTCubeExtensions 文档",
    "keywords": "Namespace RTCube.Extensions.Internal.KDTree Classes ChebychevDistanceFunction A distance function for our KD-Tree which returns manhattan distances. IntervalHeap<T> A binary interval heap is double-ended priority queue is a priority queue that it allows for efficient removal of both the maximum and minimum element. KDNode<T> A KD-Tree node which supports a generic number of dimensions. All data items need the same number of dimensions. This node splits based on the largest range of any dimension. KDTree<T> A KDTree class represents the root of a variable-dimension KD-Tree. ManhattanDistanceFunction A distance function for our KD-Tree which returns manhattan distances. MinHeap<T> A MinHeap is a smallest-first queue based around a binary heap so it is quick to insert / remove items. NearestNeighbour<T> A NearestNeighbour iterator for the KD-tree which intelligently iterates and captures relevant data in the search space. SquareEuclideanDistanceFunction A distance function for our KD-Tree which returns squared euclidean distances. Interfaces IDistanceFunction An interface which enables flexible distance functions."
  },
  "api/RTCube.Extensions.Internal.PrivateAttribute.html": {
    "href": "api/RTCube.Extensions.Internal.PrivateAttribute.html",
    "title": "Class PrivateAttribute | RTCubeExtensions 文档",
    "keywords": "Class PrivateAttribute Namespace RTCube.Extensions.Internal Use to mark targets that are private, but cannot be implemented as such because Unity it needs to be public to work with Unity. [Version(1, 0, 0)] [AttributeUsage(AttributeTargets.All, Inherited = false)] public sealed class PrivateAttribute : Attribute Inheritance object Attribute PrivateAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.Internal.TimedStateTracker-1.html": {
    "href": "api/RTCube.Extensions.Internal.TimedStateTracker-1.html",
    "title": "Class TimedStateTracker<TStateData> | RTCubeExtensions 文档",
    "keywords": "Class TimedStateTracker<TStateData> Namespace RTCube.Extensions.Internal The same as StateTracker, but states can also time out. public class TimedStateTracker<TStateData> Type Parameters TStateData The type of the t state data. Inheritance object TimedStateTracker<TStateData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks Time-outs are managed by this class: when the state times out, it is stopped, and an event is raised. This tracker must be updated (typically in a mono-behaviour Update method). This is a benchmark implementation. Constructors TimedStateTracker() Initializes a new instance of the TimedStateTracker<TStateData> class. public TimedStateTracker() Properties ActiveTokens Returns all the active tokens: tokens returned when states has been started that has not yet been stopped. public IEnumerable<IStateToken<TStateData>> ActiveTokens { get; } Property Value IEnumerable<IStateToken<TStateData>> The active tokens. IsActive Gets a value indicating whether this tracker is active, that is, whether any state has been started that has not been stopped. public bool IsActive { get; } Property Value bool true if this tracker is active; otherwise, false. Methods StartState(TStateData, float, float) Starts a state, and returns a token that can be used to stop it again. public IStateToken<TStateData> StartState(TStateData stateData, float currentTime, float maxTime) Parameters stateData TStateData Custom state data. This is useful in cases where all the active states needs to be examined. For example, this data can be used to identify states externally. currentTime float The current time. maxTime float The maximum amount of time this state should survive past the current time. Returns IStateToken<TStateData> A token that wraps the custom state data and can be used to stop the state started with this method. Remarks For a state to time out, it is necessary for the Update method to be called regularly (for example, in a MonoBehaviours Update method). StartState(TStateData, float, float, Action) Starts a state, and returns a token that can be used to stop it again. public IStateToken<TStateData> StartState(TStateData stateData, float currentTime, float maxTime, Action onTimeOut) Parameters stateData TStateData Custom state data. This is useful in cases where all the active states needs to be examined. For example, this data can be used to identify states externally. currentTime float The current time. maxTime float The maximum amount of time this state should survive past the current time. onTimeOut Action An action to call when this state times out. Returns IStateToken<TStateData> A token that wraps the custom state data and can be used to stop the state started with this method. Remarks For a state to time out, it is necessary for the Update method to be called regularly (for example, in a MonoBehaviours Update method). StopState(IStateToken<TStateData>) Stops the state associated with the token. The token must be one that was returned when the state was started. public void StopState(IStateToken<TStateData> token) Parameters token IStateToken<TStateData> The token of the state to stop. Exceptions ArgumentNullException token InvalidOperationException The given token is not from this state tracker or the given token is not active InvalidOperationException Invalid token Update(float) Updates this tracker with the specified current time. public void Update(float currentTime) Parameters currentTime float The current time. Events OnStateActive Occurs when this tracker is inactive and a state is started (so that this tracker becomes active). public event Action OnStateActive Event Type Action OnStateInactive Occurs when all active states are stopped, that is, when this tracker is active and becomes inactive. public event Action OnStateInactive Event Type Action"
  },
  "api/RTCube.Extensions.Internal.Utils.html": {
    "href": "api/RTCube.Extensions.Internal.Utils.html",
    "title": "Class Utils | RTCubeExtensions 文档",
    "keywords": "Class Utils Namespace RTCube.Extensions.Internal Contains some utility methods used to implement some of the RTCube tool features. public static class Utils Inheritance object Utils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Blue public static readonly Color Blue Field Value Color Green public static readonly Color Green Field Value Color Red public static readonly Color Red Field Value Color Yellow public static readonly Color Yellow Field Value Color Properties DefaultColors A palette of default colors. public static Color[] DefaultColors { get; } Property Value Color[]"
  },
  "api/RTCube.Extensions.Internal.VersionAttribute.html": {
    "href": "api/RTCube.Extensions.Internal.VersionAttribute.html",
    "title": "Class VersionAttribute | RTCubeExtensions 文档",
    "keywords": "Class VersionAttribute Namespace RTCube.Extensions.Internal An attribute to mark API versions. [Version(1, 0, 0)] [AttributeUsage(AttributeTargets.All, Inherited = false)] public class VersionAttribute : Attribute Inheritance object Attribute VersionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors VersionAttribute(int, int, int) public VersionAttribute(int mainVersion, int subVersion, int subSubVersion) Parameters mainVersion int subVersion int subSubVersion int Properties MainVersion The main version number of this element. public int MainVersion { get; } Property Value int SubSubVersion The sub-sub version of this element. public int SubSubVersion { get; } Property Value int SubVersion The sub version number of this element. public int SubVersion { get; } Property Value int"
  },
  "api/RTCube.Extensions.Internal.html": {
    "href": "api/RTCube.Extensions.Internal.html",
    "title": "Namespace RTCube.Extensions.Internal | RTCubeExtensions 文档",
    "keywords": "Namespace RTCube.Extensions.Internal Classes AbstractAttribute Use to mark classes and methods that are abstract, but cannot be implemented as such because Unity does not serialize such classes properly, especially abstract ScriptableObjects. EditorInternal Use to mark targets that are only supposed to be used by internal editor code. ExperimentalAttribute This attribute is used to mark components as experimental. Typically, these are not thoroughly tested, or the design has not been thought out completely. They are likely to contain bugs and change. FriendAttribute Use to mark targets that are only exposed because communication between classes is necessary to implement certain Unity features. Typically, when editor classes need private access to the classes they edit. HelpURLAttribute A dummy attribute meant to mimic Unity 5's HelpURLAttribute so that scripts for Unity 5 can also compile under Unity 4. ImmutableAttribute Use to mark classes and structs that are immutable. In addition to providing this information to the programmer client, it also makes it possible to automate tests for ensuring a class or struct is indeed immutable. PrivateAttribute Use to mark targets that are private, but cannot be implemented as such because Unity it needs to be public to work with Unity. TimedStateTracker<TStateData> The same as StateTracker, but states can also time out. Utils Contains some utility methods used to implement some of the RTCube tool features. VersionAttribute An attribute to mark API versions."
  },
  "api/RTCube.Extensions.LabelFieldAttribute.html": {
    "href": "api/RTCube.Extensions.LabelFieldAttribute.html",
    "title": "Class LabelFieldAttribute | RTCubeExtensions 文档",
    "keywords": "Class LabelFieldAttribute Namespace RTCube.Extensions Specifies a field to use as label for an item in the inspector. This is especially useful for arrays of compound types. [Version(1, 0, 0)] [AttributeUsage(AttributeTargets.Field)] public class LabelFieldAttribute : PropertyAttribute Inheritance object LabelFieldAttribute Extension Methods ThrowHelper.ThrowIfNull(object, string) Examples In this example, the \"type\" field of ArrayItem will be used as the item label for the array in the inspector. [Serializable] public enum EnumNames { Label1, Label2 } [Serializable] public class ArrayItem { public EnumNames type; public int value; } public class LabelFieldTest : MonoBehaviour { [LabelField(\"type\")] public ArrayItem[] items; }</code></pre> Constructors LabelFieldAttribute(string) Initializes a new instance of the LabelFieldAttribute class, indicating which field to use as labels in the inspector. public LabelFieldAttribute(string labelField) Parameters labelField string Properties LabelField Gets the field to use as label for the item in the inspector. public string LabelField { get; } Property Value string"
  },
  "api/RTCube.Extensions.LayerPopupAttribute.html": {
    "href": "api/RTCube.Extensions.LayerPopupAttribute.html",
    "title": "Class LayerPopupAttribute | RTCubeExtensions 文档",
    "keywords": "Class LayerPopupAttribute Namespace RTCube.Extensions An attribute used to mark a string field that should be drawn as a popup list of layers in the Unity editor. [Version(1, 0, 0)] public class LayerPopupAttribute : PopupListAttribute Inheritance object PopupListAttribute LayerPopupAttribute Inherited Members PopupListAttribute.PopupListData PopupListAttribute.RetrievalMethod Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors LayerPopupAttribute() Marks a string field that should be drawn as a popup list containing the layers defined in the Unity project. public LayerPopupAttribute()"
  },
  "api/RTCube.Extensions.LayeredCache-2.html": {
    "href": "api/RTCube.Extensions.LayeredCache-2.html",
    "title": "Class LayeredCache<TKey, TValue> | RTCubeExtensions 文档",
    "keywords": "Class LayeredCache<TKey, TValue> Namespace RTCube.Extensions Represents a cache made out of two layers: a fast primary cache and a slow secondary cache. Things requested that are in the slow cache gets moved to the fast cache, and the oldest item in the fast cache moves to the slow cache. New things are always added to the primary cache. The oldest item is moved to the slow cache if the primary cache is full. public class LayeredCache<TKey, TValue> : ICache<TKey, TValue> Type Parameters TKey The type of the t key. TValue The type of the t value. Inheritance object LayeredCache<TKey, TValue> Implements ICache<TKey, TValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors LayeredCache(int, int) public LayeredCache(int primaryCapacity, int secondaryCapacity) Parameters primaryCapacity int secondaryCapacity int Properties Count Gets the number of elements in the cache . public int Count { get; } Property Value int IsFull Gets a value indicating whether this cache is full. public bool IsFull { get; } Property Value bool true if this cache is full; otherwise, false. this[TKey] Gets or sets the value with the specified key. The method ContainsKey should always be called before getting the value of a key. public TValue this[TKey key] { get; set; } Parameters key TKey Property Value TValue Methods ContainsKey(TKey) Determines whether this cache contains the specified key. public bool ContainsKey(TKey key) Parameters key TKey Returns bool true if the cache contains the key; otherwise, false. Remove(TKey) Removes the element at the specified key from the cache. public TValue Remove(TKey key) Parameters key TKey The key. Returns TValue TValue. RemoveOldest() Removes the oldest item from the cache. public KeyValuePair<TKey, TValue> RemoveOldest() Returns KeyValuePair<TKey, TValue> KeyValuePair<TKey, TValue>. See Also ICache<TKey, TValue>"
  },
  "api/RTCube.Extensions.LifeCycleEvent.html": {
    "href": "api/RTCube.Extensions.LifeCycleEvent.html",
    "title": "Enum LifeCycleEvent | RTCubeExtensions 文档",
    "keywords": "Enum LifeCycleEvent Namespace RTCube.Extensions Flags for Unity lifecycle events. [Flags] public enum LifeCycleEvent Extension Methods LifeCycleEventExtensions.IfMatchesExecute(LifeCycleEvent, LifeCycleEvent, Action) LifeCycleEventExtensions.Matches(LifeCycleEvent, LifeCycleEvent) ThrowHelper.ThrowIfNull(object, string) Fields Awake = 1 FixedUpdate = 32 LateUpdate = 16 None = 0 OnDestroy = 128 OnDisable = 64 OnEnable = 2 Start = 4 Update = 8 UserDefined = 256 Remarks Use this to specify what events logic should execute in. This is useful when you want this to be configurable in the inspector. IfMatchesExecute(LifeCycleEvent, LifeCycleEvent, Action) for an example. See Also LifeCycleEventExtensions"
  },
  "api/RTCube.Extensions.LifeCycleEventExtensions.html": {
    "href": "api/RTCube.Extensions.LifeCycleEventExtensions.html",
    "title": "Class LifeCycleEventExtensions | RTCubeExtensions 文档",
    "keywords": "Class LifeCycleEventExtensions Namespace RTCube.Extensions Provides extension methods for LifeCycleEvent. public static class LifeCycleEventExtensions Inheritance object LifeCycleEventExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IfMatchesExecute(LifeCycleEvent, LifeCycleEvent, Action) Executes an action if the current event matches a given event. public static void IfMatchesExecute(this LifeCycleEvent eventToMatch, LifeCycleEvent currentEvent, Action action) Parameters eventToMatch LifeCycleEvent The event to match. currentEvent LifeCycleEvent The current event. action Action The action to execute. Examples In this example, the designer can configure in the inspector when to restart the game. Warning It looks like the sample you are looking for does not exist. Matches(LifeCycleEvent, LifeCycleEvent) public static bool Matches(this LifeCycleEvent eventToMatch, LifeCycleEvent currentEvent) Parameters eventToMatch LifeCycleEvent currentEvent LifeCycleEvent Returns bool"
  },
  "api/RTCube.Extensions.MappingGameObjectPool-1.html": {
    "href": "api/RTCube.Extensions.MappingGameObjectPool-1.html",
    "title": "Class MappingGameObjectPool<Key> | RTCubeExtensions 文档",
    "keywords": "Class MappingGameObjectPool<Key> Namespace RTCube.Extensions public abstract class MappingGameObjectPool<Key> : UnityGameObjectPool, IDisposable Type Parameters Key Inheritance object UnityGameObjectPool MappingGameObjectPool<Key> Implements IDisposable Inherited Members UnityGameObjectPool.m_Pool UnityGameObjectPool.assetPath UnityGameObjectPool.parentName UnityGameObjectPool.maxCount UnityGameObjectPool.defaultCap UnityGameObjectPool.collectionChecks UnityGameObjectPool.parent UnityGameObjectPool.Init() UnityGameObjectPool.Init(Transform) UnityGameObjectPool.Dispose() UnityGameObjectPool.CreatePooledItem() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Fields map public Dictionary<Key, GameObject> map Field Value Dictionary<Key, GameObject> Methods Contains(Key) public bool Contains(Key key) Parameters key Key Returns bool Get() [Obsolete(\"请使用Get(Key)\", true)] public override GameObject Get() Returns GameObject Get(Key) public GameObject Get(Key key) Parameters key Key Returns GameObject Release(GameObject) [Obsolete(\"请使用Release(Key)\", true)] public override void Release(GameObject obj) Parameters obj GameObject Release(Key) public void Release(Key key) Parameters key Key TryRelease(Key) public void TryRelease(Key key) Parameters key Key"
  },
  "api/RTCube.Extensions.MinMaxFloat.html": {
    "href": "api/RTCube.Extensions.MinMaxFloat.html",
    "title": "Class MinMaxFloat | RTCubeExtensions 文档",
    "keywords": "Class MinMaxFloat Namespace RTCube.Extensions Class for representing a bounded range. [Version(1, 0, 0)] [Serializable] public class MinMaxFloat Inheritance object MinMaxFloat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors MinMaxFloat() public MinMaxFloat() MinMaxFloat(float, float) public MinMaxFloat(float min, float max) Parameters min float max float Fields max public float max Field Value float min public float min Field Value float Methods Clamp(float) Clamps the value to the range [min, max]. [Version(1, 0, 0)] public float Clamp(float value) Parameters value float The value to clamp. Returns float The clamped value. InverseLerp(float) Calculates the inverse linear interpolation between min and max, that is the parameter t such that Lerp(t) = value. [Version(1, 0, 0)] public float InverseLerp(float value) Parameters value float The value to calculate the inverse lerp for. Returns float The inverse lerp value. Lerp(float) Calculates the linear interpolation between min and max. [Version(1, 0, 0)] public float Lerp(float t) Parameters t float The interpolation parameter, typically between 0 and 1. Returns float The interpolated value. LerpUnclamped(float) Calculates the linear interpolation between min and max without clamping the t parameter. [Version(1, 0, 0)] public float LerpUnclamped(float t) Parameters t float The interpolation parameter. Returns float The interpolated value."
  },
  "api/RTCube.Extensions.MinMaxInt.html": {
    "href": "api/RTCube.Extensions.MinMaxInt.html",
    "title": "Class MinMaxInt | RTCubeExtensions 文档",
    "keywords": "Class MinMaxInt Namespace RTCube.Extensions Class for representing a bounded range. [Version(1, 0, 0)] [Serializable] public class MinMaxInt Inheritance object MinMaxInt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors MinMaxInt() public MinMaxInt() MinMaxInt(int, int) public MinMaxInt(int min, int max) Parameters min int max int Fields max public int max Field Value int min public int min Field Value int"
  },
  "api/RTCube.Extensions.MinMaxRangeAttribute.html": {
    "href": "api/RTCube.Extensions.MinMaxRangeAttribute.html",
    "title": "Class MinMaxRangeAttribute | RTCubeExtensions 文档",
    "keywords": "Class MinMaxRangeAttribute Namespace RTCube.Extensions Use this attribute to specify the range for a MinMaxFloat field, property, parameter or return value. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field|AttributeTargets.Parameter|AttributeTargets.ReturnValue)] [Version(1, 0, 0)] public class MinMaxRangeAttribute : Attribute Inheritance object Attribute MinMaxRangeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors MinMaxRangeAttribute(int, int) public MinMaxRangeAttribute(int min, int max) Parameters min int max int MinMaxRangeAttribute(float, float) public MinMaxRangeAttribute(float min, float max) Parameters min float max float Methods GetRange() public (float min, float max) GetRange() Returns (float min, float max)"
  },
  "api/RTCube.Extensions.MonoBehaviourExtensions.html": {
    "href": "api/RTCube.Extensions.MonoBehaviourExtensions.html",
    "title": "Class MonoBehaviourExtensions | RTCubeExtensions 文档",
    "keywords": "Class MonoBehaviourExtensions Namespace RTCube.Extensions Provides useful extension methods for MonoBehaviours. [Version(1, 0, 0)] public static class MonoBehaviourExtensions Inheritance object MonoBehaviourExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CancelInvoke(MonoBehaviour, Action) Cancels the action if it was scheduled. [Obsolete(\"The new Invoke is implemented as a coroutine. Store and cancel the coroutine instead.\")] public static void CancelInvoke(this MonoBehaviour _1, Action _2) Parameters _1 MonoBehaviour _2 Action Clone<T>(T) Clones an object. public static T Clone<T>(this T obj) where T : MonoBehaviour Parameters obj T Returns T Type Parameters T Clone<T>(T, int) Clones an object. public static List<T> Clone<T>(this T obj, int count) where T : MonoBehaviour Parameters obj T count int Returns List<T> Type Parameters T FindChild(Component, string) public static GameObject FindChild(this Component component, string childName) Parameters component Component childName string Returns GameObject FindChild(Component, string, bool) public static GameObject FindChild(this Component component, string childName, bool recursive) Parameters component Component childName string recursive bool Returns GameObject GetComponentInChildrenAlways<T>(Component) Finds a component of the type T in on the same object, or on a child down the hierarchy. This method also works in the editor and when the game object is inactive. [Version(1, 0, 0)] public static T GetComponentInChildrenAlways<T>(this Component component) where T : Component Parameters component Component Returns T Type Parameters T GetComponentsInChildrenAlways<T>(Component) Finds all components of the type T on the same object and on a children down the hierarchy. This method also works in the editor and when the game object is inactive. [Version(1, 0, 0)] public static T[] GetComponentsInChildrenAlways<T>(this Component component) where T : Component Parameters component Component Returns T[] Type Parameters T GetInterfaceComponent<TInterface>(Component) Gets an attached component that implements the interface of the type parameter. public static TInterface GetInterfaceComponent<TInterface>(this Component component) where TInterface : class Parameters component Component The component to get the interface component from. Returns TInterface TInterface. Type Parameters TInterface The type of the t interface. GetRequiredComponentInChildren<T>(Component) Gets a component of the given type in one of the children, or fail if no such component is attached to the given component. public static T GetRequiredComponentInChildren<T>(this Component component) where T : Component Parameters component Component The component to check. Returns T A component of type T attached to the given component if it exists. Type Parameters T The type of component to get. Exceptions InvalidOperationException When the no component of the required type exist on any of the given components children. GetRequiredComponent<T>(Component) Gets a component of the given type, or fail if no such component is attached to the given component. public static T GetRequiredComponent<T>(this Component component) where T : Component Parameters component Component The component to check. Returns T A component of type T attached to the given component if it exists. Type Parameters T The type of component to get. Exceptions InvalidOperationException When the no component of the required type exist on the given component. Invoke(MonoBehaviour, Action, float) Invokes the given action after the given amount of time. public static Coroutine Invoke(this MonoBehaviour monoBehaviour, Action action, float time) Parameters monoBehaviour MonoBehaviour action Action time float Returns Coroutine InvokeRepeating(MonoBehaviour, Action, IGenerator<float>) Invokes the given action after the given amount of time, and repeats the action after every repeatTime seconds. public static Coroutine InvokeRepeating(this MonoBehaviour monoBehaviour, Action action, IGenerator<float> repeatTime) Parameters monoBehaviour MonoBehaviour action Action repeatTime IGenerator<float> Returns Coroutine InvokeRepeating(MonoBehaviour, Action, float, float) Invokes the given action after the given amount of time, and repeats the action after every repeatTime seconds. public static Coroutine InvokeRepeating(this MonoBehaviour monoBehaviour, Action action, float time, float repeatTime) Parameters monoBehaviour MonoBehaviour action Action time float repeatTime float Returns Coroutine IsInvoking(MonoBehaviour, Action) Returns whether an invoke is pending on an action. [Obsolete(\"The new Invoke is implemented as a coroutine. Store and cancel the coroutine instead.\")] public static bool IsInvoking(this MonoBehaviour _1, Action _2) Parameters _1 MonoBehaviour _2 Action Returns bool Tween<T>(MonoBehaviour, T, T, float, Func<T, T, float, T>, Action<T>) public static Coroutine Tween<T>(this MonoBehaviour monoBehaviour, T start, T finish, float totalTime, Func<T, T, float, T> lerp, Action<T> action) Parameters monoBehaviour MonoBehaviour start T finish T totalTime float lerp Func<T, T, float, T> action Action<T> Returns Coroutine Type Parameters T Tween<T>(MonoBehaviour, T, T, float, Func<T, T, float, T>, Action<T>, Func<float>) public static Coroutine Tween<T>(this MonoBehaviour monoBehaviour, T start, T finish, float totalTime, Func<T, T, float, T> lerp, Action<T> action, Func<float> deltaTime) Parameters monoBehaviour MonoBehaviour start T finish T totalTime float lerp Func<T, T, float, T> action Action<T> deltaTime Func<float> Returns Coroutine Type Parameters T"
  },
  "api/RTCube.Extensions.MonoBehaviourList.html": {
    "href": "api/RTCube.Extensions.MonoBehaviourList.html",
    "title": "Class MonoBehaviourList | RTCubeExtensions 文档",
    "keywords": "Class MonoBehaviourList Namespace RTCube.Extensions An InspectorList of type MonoBehaviour. [Version(1, 0, 0)] [Serializable] public class MonoBehaviourList : InspectorList<MonoBehaviour>, IList<MonoBehaviour>, ICollection<MonoBehaviour>, IEnumerable<MonoBehaviour>, IEnumerable Inheritance object InspectorList InspectorList<MonoBehaviour> MonoBehaviourList Implements IList<MonoBehaviour> ICollection<MonoBehaviour> IEnumerable<MonoBehaviour> IEnumerable Inherited Members InspectorList<MonoBehaviour>.GetEnumerator() InspectorList<MonoBehaviour>.Add(MonoBehaviour) InspectorList<MonoBehaviour>.AddRange(IEnumerable<MonoBehaviour>) InspectorList<MonoBehaviour>.Clear() InspectorList<MonoBehaviour>.Contains(MonoBehaviour) InspectorList<MonoBehaviour>.CopyTo(MonoBehaviour[], int) InspectorList<MonoBehaviour>.Remove(MonoBehaviour) InspectorList<MonoBehaviour>.Count InspectorList<MonoBehaviour>.IsReadOnly InspectorList<MonoBehaviour>.IndexOf(MonoBehaviour) InspectorList<MonoBehaviour>.Insert(int, MonoBehaviour) InspectorList<MonoBehaviour>.RemoveAt(int) InspectorList<MonoBehaviour>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, IComparer<TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int, IComparer<TElement>) CollectionExtensions.IsEmpty<T>(ICollection<T>) PoolExtensions.AddAllAvailableFromPool<T>(ICollection<T>, IPool<T>) PoolExtensions.AddFromPool<T>(ICollection<T>, IPool<T>, int) PoolExtensions.TryAddFromPool<T>(ICollection<T>, IPool<T>, int) CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.FilterByType<T, TFilter>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) CollectionExtensions.FillWithDefault<T>(IList<T>) CollectionExtensions.Fill<T>(IList<T>, T) CollectionExtensions.Shuffle<T>(IList<T>) CollectionExtensions.Shuffle<T>(IList<T>, IRandom) ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.MonoBehaviourPool-1.html": {
    "href": "api/RTCube.Extensions.MonoBehaviourPool-1.html",
    "title": "Class MonoBehaviourPool<T> | RTCubeExtensions 文档",
    "keywords": "Class MonoBehaviourPool<T> Namespace RTCube.Extensions A pool suitable for MonoBehaviour objects that can be instantiated from a given prefab. public class MonoBehaviourPool<T> : IPool<T> where T : Component Type Parameters T The MonoBehaviour type of the objects to pool. Inheritance object MonoBehaviourPool<T> Implements IPool<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PoolExtensions.Clear<T>(IPool<T>, bool) PoolExtensions.SetCapacity<T>(IPool<T>, int, bool) PoolExtensions.Trim<T>(IPool<T>) PoolExtensions.TryGet<T>(IPool<T>, out T) ThrowHelper.ThrowIfNull(object, string) Constructors MonoBehaviourPool(T, GameObject, int, Action<T>, Action<T>) Initializes a new instance of the MonoBehaviourPool<T> class. public MonoBehaviourPool(T prefab, GameObject parent, int initialCount, Action<T> wakeUp, Action<T> setToSleep) Parameters prefab T The prefab used to instantiate objects from. parent GameObject The parent object to which the pool objects will be attached. If null the object will be spawned without any parent. initialCount int The initial count of objects to create. wakeUp Action<T> A function called on an object when it is woken up. setToSleep Action<T> A function called on objects when they are put to sleep. Remarks The pool instantiates instances of the prefab to create new objects for the pool, for the first time in this constructor, and later when the pool is grown with IncreaseCapacity(int) or SetCapacity<T>(IPool<T>, int, bool). The game objects of the instances are destroyed when the size of the pool is reduced with DecreaseCapacity(int, bool), SetCapacity<T>(IPool<T>, int, bool), or Clear<T>(IPool<T>, bool). Properties ActiveCount The number of objects that are currently active. [Version(3, 2, 0)] public int ActiveCount { get; } Property Value int Capacity The total number of objects in the pool (active and inactive), the maximum number of objects that can be returned by Get(). public int Capacity { get; } Property Value int The capacity. HasAvailableObject Returns whether there is an inactive object available to get. public bool HasAvailableObject { get; } Property Value bool true if an inactive object is available; otherwise, false. IsObjectAvailable public bool IsObjectAvailable { get; } Property Value bool Methods DecCapacity(int) [Obsolete(\"Use DecreaseCapacity instead.\")] public void DecCapacity(int decrement) Parameters decrement int DecreaseCapacity(int, bool) Decreases the capacity of the pool. [Version(3, 2, 0)] public int DecreaseCapacity(int decrement, bool deactivateFirst = false) Parameters decrement int The number of pool objects to destroy. deactivateFirst bool Whether to deactivate (active) objects before destroying them. Returns int Remarks This method may destroy active objects. Exceptions ArgumentOutOfRangeException decrement is negative. Get() Gets a new object from the pool. [Version(3, 2, 0)] public T Get() Returns T A freshly activated object. Exceptions InvalidOperationException No inactive objects are available. GetNewObject() [Obsolete(\"Use Get instead.\")] public T GetNewObject() Returns T IncCapacity(int) [Obsolete(\"Use IncreaseCapacity instead.\")] public void IncCapacity(int increment) Parameters increment int IncreaseCapacity(int) Increases the capacity of the pool. [Version(3, 2, 0)] public void IncreaseCapacity(int increment) Parameters increment int The number of new pool objects to add. Exceptions ArgumentOutOfRangeException increment is negative. Release(T) Releases the specified object back to the pool. [Version(3, 2, 0)] public void Release(T obj) Parameters obj T The object to release. We do not restrict the pool from containing null objects, therefore obj can be null if the create action passed into the constructor can produce null elements. This is an unusual use case though. Exceptions ArgumentException obj is not in the pool. InvalidOperationException obj is already inactive. ReleaseAll() Releases all objects in the pool. [Version(3, 2, 0)] public void ReleaseAll() ReleaseObject(T) [Obsolete(\"Use Release instead.\")] public void ReleaseObject(T obj) Parameters obj T"
  },
  "api/RTCube.Extensions.MonoSingleton-1.html": {
    "href": "api/RTCube.Extensions.MonoSingleton-1.html",
    "title": "Class MonoSingleton<T> | RTCubeExtensions 文档",
    "keywords": "Class MonoSingleton<T> Namespace RTCube.Extensions public class MonoSingleton<T> : MonoBehaviour where T : Component Type Parameters T Inheritance object MonoSingleton<T> Derived AssetLoader Extension Methods ThrowHelper.ThrowIfNull(object, string) Properties Instance public static T Instance { get; } Property Value T Methods Awake() public virtual void Awake()"
  },
  "api/RTCube.Extensions.NonNegativeAttribute.html": {
    "href": "api/RTCube.Extensions.NonNegativeAttribute.html",
    "title": "Class NonNegativeAttribute | RTCubeExtensions 文档",
    "keywords": "Class NonNegativeAttribute Namespace RTCube.Extensions Mark numeric values that should always be non-negative. [Version(1, 0, 0)] [Obsolete(\"Use ValidateNonNegativeAttribute instead.\")] public class NonNegativeAttribute : ValidateNotNegativeAttribute Inheritance object ValidationAttribute ValidateNotNegativeAttribute NonNegativeAttribute Inherited Members ValidationAttribute.ForceValue ValidationAttribute.WarnInConsole ValidationAttribute.WarnInInspector ValidationAttribute.Message ValidationAttribute.Color ValidationAttribute.HexColor Extension Methods ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.NotImplementedByException.html": {
    "href": "api/RTCube.Extensions.NotImplementedByException.html",
    "title": "Class NotImplementedByException | RTCubeExtensions 文档",
    "keywords": "Class NotImplementedByException Namespace RTCube.Extensions A version of NotImplementedException that takes the throwing type as argument. This is useful in class hierarchies where methods are meant to be overridden by derived types but cannot be made abstract (for example, because of Unity limitations). The exception, when thrown, indicates which class should have implemented the method, but hasn't. public class NotImplementedByException : NotImplementedException, ISerializable Inheritance object Exception SystemException NotImplementedException NotImplementedByException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ThrowHelper.ThrowIfNull(object, string) Examples In the following example, the derived class does not override the method Method. When Method is called on an instance of DerivedClass, a NotImplementedBy exception will be thrown with DerivedType as parameter, making it easy to see DerivedClass needs to implement Method. <pre><code class=\"lang-csharp\">[Abstract] public class BaseClass { [Abstract] public virtual void Method() { throw new NotImplementedBy(GetType()); } } public class DerivedClass : BaseClass { }</code></pre> Remarks This is a develop-time exception, and should generally not be caught. Constructors NotImplementedByException(Type) Initializes a new instance of the NotImplementedByException class. public NotImplementedByException(Type type) Parameters type Type The type of the class that throws this exception. See Also NotImplementedException"
  },
  "api/RTCube.Extensions.ObjectList.html": {
    "href": "api/RTCube.Extensions.ObjectList.html",
    "title": "Class ObjectList | RTCubeExtensions 文档",
    "keywords": "Class ObjectList Namespace RTCube.Extensions An InspectorList of type Object. [Version(1, 0, 0)] [Serializable] public class ObjectList : InspectorList<UnityEngine.Object>, IList<UnityEngine.Object>, ICollection<UnityEngine.Object>, IEnumerable<UnityEngine.Object>, IEnumerable Inheritance object InspectorList InspectorList<UnityEngine.Object> ObjectList Implements IList<UnityEngine.Object> ICollection<UnityEngine.Object> IEnumerable<UnityEngine.Object> IEnumerable Inherited Members InspectorList<UnityEngine.Object>.GetEnumerator() InspectorList<UnityEngine.Object>.Add(UnityEngine.Object) InspectorList<UnityEngine.Object>.AddRange(IEnumerable<UnityEngine.Object>) InspectorList<UnityEngine.Object>.Clear() InspectorList<UnityEngine.Object>.Contains(UnityEngine.Object) InspectorList<UnityEngine.Object>.CopyTo(UnityEngine.Object[], int) InspectorList<UnityEngine.Object>.Remove(UnityEngine.Object) InspectorList<UnityEngine.Object>.Count InspectorList<UnityEngine.Object>.IsReadOnly InspectorList<UnityEngine.Object>.IndexOf(UnityEngine.Object) InspectorList<UnityEngine.Object>.Insert(int, UnityEngine.Object) InspectorList<UnityEngine.Object>.RemoveAt(int) InspectorList<UnityEngine.Object>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, IComparer<TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int, IComparer<TElement>) CollectionExtensions.IsEmpty<T>(ICollection<T>) PoolExtensions.AddAllAvailableFromPool<T>(ICollection<T>, IPool<T>) PoolExtensions.AddFromPool<T>(ICollection<T>, IPool<T>, int) PoolExtensions.TryAddFromPool<T>(ICollection<T>, IPool<T>, int) CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.FilterByType<T, TFilter>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) CollectionExtensions.FillWithDefault<T>(IList<T>) CollectionExtensions.Fill<T>(IList<T>, T) CollectionExtensions.Shuffle<T>(IList<T>) CollectionExtensions.Shuffle<T>(IList<T>, IRandom) ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.ObjectPool-1.html": {
    "href": "api/RTCube.Extensions.ObjectPool-1.html",
    "title": "Class ObjectPool<T> | RTCubeExtensions 文档",
    "keywords": "Class ObjectPool<T> Namespace RTCube.Extensions public class ObjectPool<T> where T : new() Type Parameters T Inheritance object ObjectPool<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors ObjectPool(UnityAction<T>, UnityAction<T>) public ObjectPool(UnityAction<T> actionOnGet, UnityAction<T> actionOnRelease) Parameters actionOnGet UnityAction<T> actionOnRelease UnityAction<T> Properties CountActive public int CountActive { get; } Property Value int CountAll public int CountAll { get; } Property Value int CountInactive public int CountInactive { get; } Property Value int Methods Clear() public void Clear() Get() public T Get() Returns T Release(T) public void Release(T element) Parameters element T"
  },
  "api/RTCube.Extensions.ObservedValue-1.html": {
    "href": "api/RTCube.Extensions.ObservedValue-1.html",
    "title": "Class ObservedValue<T> | RTCubeExtensions 文档",
    "keywords": "Class ObservedValue<T> Namespace RTCube.Extensions Wrapper that can raise an event when a value changes. public sealed class ObservedValue<T> : ValueSnapshot<T> Type Parameters T The type of value to track. Inheritance object ValueSnapshot<T> ObservedValue<T> Inherited Members ValueSnapshot<T>.PreviousValue ValueSnapshot<T>.HasValue ValueSnapshot<T>.HasPreviousValue ValueSnapshot<T>.Reset() ValueSnapshot<T>.Reset(T) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors ObservedValue(IEqualityComparer<T>) Initializes a new instance of the ObservedValue<T> class. public ObservedValue(IEqualityComparer<T> comparer = null) Parameters comparer IEqualityComparer<T> The comparer used tp compare values. If not provided, the Default will be used. Remarks OnValueChangewill not be raised the first time Value is being assigned. TrackingEnabled is true initially. ObservedValue(T, IEqualityComparer<T>) Initializes a new instance of the ObservedValue<T> class. public ObservedValue(T initialValue, IEqualityComparer<T> comparer = null) Parameters initialValue T The value this change detector is initialized to. comparer IEqualityComparer<T> The comparer used tp compare values. If not provided, the Default will be used. Remarks TrackingEnabled is true initially. Properties TrackingEnabled Gets or sets a value indicating whether tracking is enabled for this ObservedValue<T>. public bool TrackingEnabled { get; set; } Property Value bool Remarks When false, OnValueChange will not be raised when the value of these ObservedValue<T> changes. Value Gets or sets and sets the value of this ObservedValue<T>, and fire the OnValueChange event if the event has changed from its last value if TrackingEnabled is true. public override T Value { get; set; } Property Value T Remarks If this ObservedValue<T> has been constructed or reset without an initial value, setting the value for the first time will not raise the OnValueChange. Methods SetSilently(T) Sets the value without notification. public void SetSilently(T value) Parameters value T The value. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Events OnValueChange Raised when Value has changed from its previous value and TrackingEnabled is true. public event Action OnValueChange Event Type Action"
  },
  "api/RTCube.Extensions.Optional-1.html": {
    "href": "api/RTCube.Extensions.Optional-1.html",
    "title": "Class Optional<T> | RTCubeExtensions 文档",
    "keywords": "Class Optional<T> Namespace RTCube.Extensions Useful for displaying optional values in the inspector. [Serializable] public class Optional<T> : Optional Type Parameters T The type of the optional value. Inheritance object Optional Optional<T> Derived OptionalFloat OptionalGameObject OptionalInt OptionalMonoBehaviour OptionalString OptionalVector2 OptionalVector3 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks For this class to be displayable in the inspector you cannot use it directly. You have to use one of the provided subclasses (or derive your own). Properties UseValue Gets or sets whether to use the value of this instance. public bool UseValue { get; set; } Property Value bool true if this value should be used; otherwise, false. Value The value of this instance. It should only be used if UseValue is true. Otherwise, some other value should be used, or code that does not need it must be executed instead. public T Value { get; set; } Property Value T The value of this Optional instance. Examples This shows a typical example of how to use this class. if (optionalMaterial.UseValue) { renderer.material = material; } //else do not modify the material. Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RTCube.Extensions.Optional.html": {
    "href": "api/RTCube.Extensions.Optional.html",
    "title": "Class Optional | RTCubeExtensions 文档",
    "keywords": "Class Optional Namespace RTCube.Extensions The base class of the generic Optional class. public class Optional Inheritance object Optional Derived Optional<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks This is an empty class; the reason it exists is so that a single property drawer can be used for all classes that derive from the generic Optional class."
  },
  "api/RTCube.Extensions.OptionalFloat.html": {
    "href": "api/RTCube.Extensions.OptionalFloat.html",
    "title": "Class OptionalFloat | RTCubeExtensions 文档",
    "keywords": "Class OptionalFloat Namespace RTCube.Extensions Represents an optional float value. [Serializable] public class OptionalFloat : Optional<float> Inheritance object Optional Optional<float> OptionalFloat Inherited Members Optional<float>.UseValue Optional<float>.Value Optional<float>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ThrowHelper.ThrowIfNull(object, string) See Also Optional<T>"
  },
  "api/RTCube.Extensions.OptionalGameObject.html": {
    "href": "api/RTCube.Extensions.OptionalGameObject.html",
    "title": "Class OptionalGameObject | RTCubeExtensions 文档",
    "keywords": "Class OptionalGameObject Namespace RTCube.Extensions Represents an optional GameObject. [Serializable] public class OptionalGameObject : Optional<GameObject> Inheritance object Optional Optional<GameObject> OptionalGameObject Inherited Members Optional<GameObject>.UseValue Optional<GameObject>.Value Optional<GameObject>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ThrowHelper.ThrowIfNull(object, string) See Also Optional<T>"
  },
  "api/RTCube.Extensions.OptionalInt.html": {
    "href": "api/RTCube.Extensions.OptionalInt.html",
    "title": "Class OptionalInt | RTCubeExtensions 文档",
    "keywords": "Class OptionalInt Namespace RTCube.Extensions Represents an optional int value. [Serializable] public class OptionalInt : Optional<int> Inheritance object Optional Optional<int> OptionalInt Inherited Members Optional<int>.UseValue Optional<int>.Value Optional<int>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ThrowHelper.ThrowIfNull(object, string) See Also Optional<T>"
  },
  "api/RTCube.Extensions.OptionalMonoBehaviour.html": {
    "href": "api/RTCube.Extensions.OptionalMonoBehaviour.html",
    "title": "Class OptionalMonoBehaviour | RTCubeExtensions 文档",
    "keywords": "Class OptionalMonoBehaviour Namespace RTCube.Extensions Represents an optional MonoBehaviour. [Serializable] public class OptionalMonoBehaviour : Optional<MonoBehaviour> Inheritance object Optional Optional<MonoBehaviour> OptionalMonoBehaviour Inherited Members Optional<MonoBehaviour>.UseValue Optional<MonoBehaviour>.Value Optional<MonoBehaviour>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ThrowHelper.ThrowIfNull(object, string) See Also Optional<T>"
  },
  "api/RTCube.Extensions.OptionalString.html": {
    "href": "api/RTCube.Extensions.OptionalString.html",
    "title": "Class OptionalString | RTCubeExtensions 文档",
    "keywords": "Class OptionalString Namespace RTCube.Extensions Represents an optional string value. [Serializable] public class OptionalString : Optional<string> Inheritance object Optional Optional<string> OptionalString Inherited Members Optional<string>.UseValue Optional<string>.Value Optional<string>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ThrowHelper.ThrowIfNull(object, string) See Also Optional<T>"
  },
  "api/RTCube.Extensions.OptionalVector2.html": {
    "href": "api/RTCube.Extensions.OptionalVector2.html",
    "title": "Class OptionalVector2 | RTCubeExtensions 文档",
    "keywords": "Class OptionalVector2 Namespace RTCube.Extensions Represents an optional Vector2 value. [Serializable] public class OptionalVector2 : Optional<Vector2> Inheritance object Optional Optional<Vector2> OptionalVector2 Inherited Members Optional<Vector2>.UseValue Optional<Vector2>.Value Optional<Vector2>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ThrowHelper.ThrowIfNull(object, string) See Also Optional<T>"
  },
  "api/RTCube.Extensions.OptionalVector3.html": {
    "href": "api/RTCube.Extensions.OptionalVector3.html",
    "title": "Class OptionalVector3 | RTCubeExtensions 文档",
    "keywords": "Class OptionalVector3 Namespace RTCube.Extensions Represents an optional Vector3 value. [Serializable] public class OptionalVector3 : Optional<Vector3> Inheritance object Optional Optional<Vector3> OptionalVector3 Inherited Members Optional<Vector3>.UseValue Optional<Vector3>.Value Optional<Vector3>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ThrowHelper.ThrowIfNull(object, string) See Also Optional<T>"
  },
  "api/RTCube.Extensions.Pool-1.html": {
    "href": "api/RTCube.Extensions.Pool-1.html",
    "title": "Class Pool<T> | RTCubeExtensions 文档",
    "keywords": "Class Pool<T> Namespace RTCube.Extensions public static class Pool<T> where T : new() Type Parameters T Inheritance object Pool<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Get() public static T Get() Returns T Release(T) public static void Release(T element) Parameters element T"
  },
  "api/RTCube.Extensions.PoolExtensions.html": {
    "href": "api/RTCube.Extensions.PoolExtensions.html",
    "title": "Class PoolExtensions | RTCubeExtensions 文档",
    "keywords": "Class PoolExtensions Namespace RTCube.Extensions public static class PoolExtensions Inheritance object PoolExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAllAvailableFromPool<T>(ICollection<T>, IPool<T>) Adds all available objects from the pool to the collection, activating each of them. public static void AddAllAvailableFromPool<T>(this ICollection<T> collection, IPool<T> pool) Parameters collection ICollection<T> The collection to add objects to. pool IPool<T> The pool to get objects from. Type Parameters T The type of the objects in the pool. Remarks Similar to AddFromPool<T>(ICollection<T>, IPool<T>, int), but adds all available objects from the pool. AddFromPool<T>(ICollection<T>, IPool<T>, int) Gets a number of objects from a pool, and adds them to the given collection. public static void AddFromPool<T>(this ICollection<T> collection, IPool<T> pool, int count) Parameters collection ICollection<T> The collection to add objects to. pool IPool<T> The pool to get objects from. count int The number of objects to get. Type Parameters T The type of the objects in the pool. Remarks The idea with this method is that you may often want a bunch of object from a pool, but we do not want to create new objects (which may defy the point of pooling in the first place). Therefore, this method adds it directly to your collection. Exceptions ArgumentOutOfRangeException count is negative. ArgumentNullException collection is null. InvalidOperationException The pool does not have enough objects to satisfy the request. See Also TryAddFromPool<T>(ICollection<T>, IPool<T>, int) Clear<T>(IPool<T>, bool) Destroys all objects in the pool, reducing the capacity to zero. public static void Clear<T>(this IPool<T> pool, bool deactivateFirst = false) Parameters pool IPool<T> The pool to clear. deactivateFirst bool Whether deactivate the object before destroying them. Type Parameters T GetHashPool<T>(int, Func<T>, Action<T>, Action<T>, Action<T>) Gets a hash pool for any type - hashable or not. public static IPool<IPoolObject<T>> GetHashPool<T>(int initialCapacity, Func<T> create, Action<T> destroy = null, Action<T> activate = null, Action<T> deactivate = null) Parameters initialCapacity int The initial capacity of the pool. create Func<T> The function that creates a new object of type T. This should create objects in the active state; they will be deactivated by the pool. destroy Action<T> The function that destroys an object of type T. If it is an ordinary C# object, you do not need to provide a destroy method - the object will be removed from the pool, and (provided you do not have references to it), it will be released naturally like any C# object. If T is a Unity object, or a component whose game object you want to be destroyed, this action should do that. Also consider using the MonoBehaviourPool<T> class instead. activate Action<T> A function called when an object is activated, when it is acquired. deactivate Action<T> A function called when an object is deactivated, either when releasing it, or when it is created for the first time. Returns IPool<IPoolObject<T>> A new hash pool. Type Parameters T The type of the objects to pool. Remarks Objects acquired from this pool will be wrapped in a PoolExtensions.PoolObject<T> object. Access the original object using RTCube.Extensions.PoolExtensions.PoolObject<T>.Value. SetCapacity<T>(IPool<T>, int, bool) Sets the capacity of the pool. If the new capacity is less than the current capacity, the pool will be reduced to the new capacity by destroying objects. If the new capacity is greater than the current capacity, new objects will be created to fill the pool. public static void SetCapacity<T>(this IPool<T> pool, int newCapacity, bool deactivateFirst = false) Parameters pool IPool<T> The pool to set the capacity of. newCapacity int The new capacity. deactivateFirst bool Whether to deactivate the object before destroying them. Type Parameters T The type of the objects in the pool. Trim<T>(IPool<T>) Sets the capacity of the pool to the current active count. public static void Trim<T>(this IPool<T> pool) Parameters pool IPool<T> The pool to trim. Type Parameters T The type of the objects in the pool. TryAddFromPool<T>(ICollection<T>, IPool<T>, int) Gets a number of objects from a pool, and adds them to the given collection. public static int TryAddFromPool<T>(this ICollection<T> collection, IPool<T> pool, int count) Parameters collection ICollection<T> The collection to add objects to. pool IPool<T> The pool to get objects from. count int The number of objects to get. Returns int The number of objects that were added to the collection. Type Parameters T The type of the objects in the pool. TryGet<T>(IPool<T>, out T) Gets an item from the pool if one is available. public static bool TryGet<T>(this IPool<T> pool, out T obj) Parameters pool IPool<T> The pool to get an object from. obj T The object that was acquired, or the default value of T if no object was available. Returns bool true if an object was acquired, false otherwise. Type Parameters T The type of the objects in the pool."
  },
  "api/RTCube.Extensions.PopupListAttribute.html": {
    "href": "api/RTCube.Extensions.PopupListAttribute.html",
    "title": "Class PopupListAttribute | RTCubeExtensions 文档",
    "keywords": "Class PopupListAttribute Namespace RTCube.Extensions The base class for all popup list attributes. [Version(1, 0, 0)] public abstract class PopupListAttribute : PropertyAttribute Inheritance object PopupListAttribute Derived ColorPopupAttribute IntPopupAttribute LayerPopupAttribute StringPopupAttribute TagPopupAttribute Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks You can extend from this class if you want to create a custom popup list attribute. Constructors PopupListAttribute(PopupListData) protected PopupListAttribute(PopupListData popupListData) Parameters popupListData PopupListData Properties PopupListData public PopupListData PopupListData { get; set; } Property Value PopupListData RetrievalMethod public ValuesRetrievalMethod RetrievalMethod { get; } Property Value ValuesRetrievalMethod"
  },
  "api/RTCube.Extensions.PopupListData-1.html": {
    "href": "api/RTCube.Extensions.PopupListData-1.html",
    "title": "Class PopupListData<T> | RTCubeExtensions 文档",
    "keywords": "Class PopupListData<T> Namespace RTCube.Extensions Data used to draw a popup list of a specific type. [Version(1, 0, 0)] public class PopupListData<T> : PopupListData Type Parameters T The type of the values in the list. Inheritance object PopupListData PopupListData<T> Inherited Members PopupListData.RetrievalMethod PopupListData.ValuesRetrieverKey PopupListData.ValidateRetrievalMethod(ValuesRetrievalMethod) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks This class is used to implement property drawers for popup lists. You should generally only have use for this class if you want to implement your own property drawer. See Property Drawers. This class stores pieces of data that depends on which ValuesRetrievalMethod is used. ValuesRetrievalMethod Usage ValueList Use Values to get the list of values. Func Use ListRetriever to get the function that can retrieve the values, and call it. FuncKey Use ValuesRetrieverKey to get the key used to retrieve the values, and get the retriever function from GetValues<T>(string). Other Subclasses that are not part of the library can return this value if they use a method other than one of the ones above. Constructors PopupListData(Func<IEnumerable<T>>) Initializes a new instance of the PopupListData<T> class stores the given function to retrieve the list of values. public PopupListData(Func<IEnumerable<T>> listRetriever) Parameters listRetriever Func<IEnumerable<T>> The function used to retrieve the list of values for this popup list. Remarks ValuesRetrievalMethod will be set to Func. PopupListData(string) Creates a new instance of PopupListData<T> that stores the list retriever key. public PopupListData(string valuesRetrieverKey) Parameters valuesRetrieverKey string The key of the list retriever used to retrieve the list of values for this popup list. Remarks ValuesRetrievalMethod will be set to FuncKey. PopupListData(T[]) Creates a new instance of PopupListData<T> that stores the given list of values. public PopupListData(T[] values) Parameters values T[] The list of values for this popup list. Remarks ValuesRetrievalMethod will be set to ValueList. Properties ListRetriever Gets the function used to retrieve the list of values for this popup list, if ValuesRetrievalMethod is Func. public Func<IEnumerable<T>> ListRetriever { get; } Property Value Func<IEnumerable<T>> Exceptions InvalidOperationException ValuesRetrievalMethod is not Func. Values Gets the list of values for this popup list, if ValuesRetrievalMethod is ValueList. public T[] Values { get; } Property Value T[] Exceptions InvalidOperationException ValuesRetrievalMethod is not ValueList."
  },
  "api/RTCube.Extensions.PopupListData.html": {
    "href": "api/RTCube.Extensions.PopupListData.html",
    "title": "Class PopupListData | RTCubeExtensions 文档",
    "keywords": "Class PopupListData Namespace RTCube.Extensions Data used to draw a popup list. [Version(1, 0, 0)] public class PopupListData Inheritance object PopupListData Derived PopupListData<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks This class is used to implement property drawers for popup lists. You should generally only need it if you implement a custom drawer, as explained in Property Drawers, but even then you should probably use PopupListData<T>. Constructors PopupListData(ValuesRetrievalMethod) Initializes a new instance of the PopupListData class that indicates that the given method will be used to retrieve values for the popup list. protected PopupListData(ValuesRetrievalMethod retrievalMethod) Parameters retrievalMethod ValuesRetrievalMethod The method used to retrieve the values for the popup list. PopupListData(string) Initializes a new instance of the PopupListData class stores the key used to retrieve the values. public PopupListData(string valuesRetrieverKey) Parameters valuesRetrieverKey string The key used to retrieve the values for the popup list. For the mechanism to work, they retriever should dbe registered with RegisterValuesRetriever<T>(string, Func<IEnumerable<T>>). Remarks RetrievalMethod will be set to FuncKey. Properties RetrievalMethod The method used to retrieve the values for the popup list marked by this attribute. public ValuesRetrievalMethod RetrievalMethod { get; } Property Value ValuesRetrievalMethod ValuesRetrieverKey Gets the key used to retrieve the values for the popup list, if RetrievalMethod is FuncKey. public string ValuesRetrieverKey { get; } Property Value string Exceptions InvalidOperationException RetrievalMethod is not FuncKey. Methods ValidateRetrievalMethod(ValuesRetrievalMethod) Checks that the RetrievalMethod is the expected one. protected void ValidateRetrievalMethod(ValuesRetrievalMethod expectedMethod) Parameters expectedMethod ValuesRetrievalMethod The expected method. Remarks When overriding this class, and you provide properties associated with the retrieval method, you should call this method to ensure that the method is the expected one if that property is accessed. Exceptions InvalidOperationException The RetrievalMethod is not the expected one."
  },
  "api/RTCube.Extensions.PositiveAttribute.html": {
    "href": "api/RTCube.Extensions.PositiveAttribute.html",
    "title": "Class PositiveAttribute | RTCubeExtensions 文档",
    "keywords": "Class PositiveAttribute Namespace RTCube.Extensions Mark fields that should always be positive with this attribute. [Obsolete(\"Use ValidatePositiveAttribute instead.\")] [Version(1, 0, 0)] public class PositiveAttribute : ValidatePositiveAttribute Inheritance object ValidationAttribute ValidatePositiveAttribute PositiveAttribute Inherited Members ValidationAttribute.ForceValue ValidationAttribute.WarnInConsole ValidationAttribute.WarnInInspector ValidationAttribute.Message ValidationAttribute.Color ValidationAttribute.HexColor Extension Methods ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.PropertyDrawerData.html": {
    "href": "api/RTCube.Extensions.PropertyDrawerData.html",
    "title": "Class PropertyDrawerData | RTCubeExtensions 文档",
    "keywords": "Class PropertyDrawerData Namespace RTCube.Extensions Contains static variables and methods that are used by the property drawers. [Version(1, 0, 0)] public static class PropertyDrawerData Inheritance object PropertyDrawerData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks These are meant to be set or called globally when the Editor loads. You can define a class such as PropertyDrawerDataInitializer that initializes these values, and as decorated with the UnityEditor.InitializeOnLoadAttribute. See Property Drawers for more details. Fields ForceValue Whether to force the value to be valid, provided the attributes allows it. public static bool ForceValue Field Value bool HighlightColor Color used to highlight fields in the inspector. public static Color HighlightColor Field Value Color SeparatorColor Color used to draw separators. [Version(1, 0, 0)] public static Color SeparatorColor Field Value Color SeparatorHeight The height used to draw separators. [Version(1, 0, 0)] public static int SeparatorHeight Field Value int ValueIsInvalidMessage public static string ValueIsInvalidMessage Field Value string WarnInConsole Whether to warn in the console when a value is invalid. public static bool WarnInConsole Field Value bool WarnInInspector Whether to warn in the inspector when a value is invalid. public static bool WarnInInspector Field Value bool WarningColor Color used to draw warnings in the inspector. public static Color WarningColor Field Value Color Methods GetValues<T>(string) Gets the list of values associated with the given key. public static T[] GetValues<T>(string key) Parameters key string The key of the values to get. Returns T[] The values associated with the given key. Type Parameters T The type of the values. Exceptions InvalidOperationException No retrievers registered for type T with the key. RegisterValuesRetriever<T>(string, Func<IEnumerable<T>>) Registers a new function to retrieve a list of values of the given type. public static void RegisterValuesRetriever<T>(string key, Func<IEnumerable<T>> retriever) Parameters key string The key to associate with the values that can be used to get the retriever function. retriever Func<IEnumerable<T>> The function that retrieves the list of values. Type Parameters T The type of the values. Remarks This is used by the property drawers of the subclasses of PopupListAttribute>, such as StringPopupAttribute and ColorPopupAttribute."
  },
  "api/RTCube.Extensions.PushdownAutomaton-1.html": {
    "href": "api/RTCube.Extensions.PushdownAutomaton-1.html",
    "title": "Class PushdownAutomaton<TLabel> | RTCubeExtensions 文档",
    "keywords": "Class PushdownAutomaton<TLabel> Namespace RTCube.Extensions This class is a state machine that has the ability to remember previous states and transition back to them (FIFO). [Version(1, 0, 0)] public class PushdownAutomaton<TLabel> : StateMachine<TLabel> Type Parameters TLabel The type of state labels. Inheritance object StateMachine<TLabel> PushdownAutomaton<TLabel> Inherited Members StateMachine<TLabel>.CurrentState StateMachine<TLabel>.Update() StateMachine<TLabel>.AddState(TLabel, Action, Action, Action) StateMachine<TLabel>.AddState(TLabel, Action, Action) StateMachine<TLabel>.AddState(TLabel, Action) StateMachine<TLabel>.AddState(TLabel) StateMachine<TLabel>.AddState<TSubStateLabel>(TLabel, StateMachine<TSubStateLabel>, TSubStateLabel) StateMachine<TLabel>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ThrowHelper.ThrowIfNull(object, string) Methods Pop() Pops a state from the stack and switches to it. public void Pop() Push(TLabel) Pushes the current state onto the stack, and transitions to the next state. public void Push(TLabel nextState) Parameters nextState TLabel"
  },
  "api/RTCube.Extensions.RTCDebug.html": {
    "href": "api/RTCube.Extensions.RTCDebug.html",
    "title": "Class RTCDebug | RTCubeExtensions 文档",
    "keywords": "Class RTCDebug Namespace RTCube.Extensions Class that contains methods useful for debugging. All methods are only compiled if the DEBUG symbol is defined. public static class RTCDebug Inheritance object RTCDebug Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Assert(bool, string, Object) Check whether the condition is true, and print an error message if it is not. [Version(1, 0, 0)] [Conditional(\"DEBUG\")] public static void Assert(bool condition, string message, UnityEngine.Object context = null) Parameters condition bool message string context Object Log(object, Object) [Conditional(\"DEBUG\")] public static void Log(object message, UnityEngine.Object context = null) Parameters message object context Object Log(string, object, Object) [Conditional(\"DEBUG\")] public static void Log(string type, object message, UnityEngine.Object context = null) Parameters type string message object context Object LogError(object, Object) [Conditional(\"DEBUG\")] public static void LogError(object message, UnityEngine.Object context = null) Parameters message object context Object LogError(string, object, Object) [Conditional(\"DEBUG\")] public static void LogError(string type, object message, UnityEngine.Object context = null) Parameters type string message object context Object LogWarning(object, Object) [Conditional(\"DEBUG\")] public static void LogWarning(object message, UnityEngine.Object context = null) Parameters message object context Object LogWarning(string, object, Object) [Conditional(\"DEBUG\")] public static void LogWarning(string type, object message, UnityEngine.Object context = null) Parameters type string message object context Object"
  },
  "api/RTCube.Extensions.RTCMathf.html": {
    "href": "api/RTCube.Extensions.RTCMathf.html",
    "title": "Class RTCMathf | RTCubeExtensions 文档",
    "keywords": "Class RTCMathf Namespace RTCube.Extensions Methods for additional math functions. [Version(1, 0, 0)] public static class RTCMathf Inheritance object RTCMathf Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Sqrt3 public static readonly float Sqrt3 Field Value float Methods Bilerp(float, float, float, float, float, float) Performs bilinear interpolation between four values. [Version(1, 0, 0)] public static float Bilerp(float a, float b, float c, float d, float u, float v) Parameters a float The value at the top-left corner. b float The value at the top-right corner. c float The value at the bottom-left corner. d float The value at the bottom-right corner. u float The horizontal interpolation parameter (between 0 and 1). v float The vertical interpolation parameter (between 0 and 1). Returns float The interpolated value. Div(int, int) [Obsolete(\"Use FloorDiv instead\")] public static int Div(int m, int n) Parameters m int n int Returns int Equal(float, float) Checks if two floating point numbers are equal. public static bool Equal(float a, float b) Parameters a float The first number. b float The second number. Returns bool true if the two numbers are equal, false otherwise. FloorDiv(int, int) Floor division that also work for negative m. [Version(1, 0, 0)] public static int FloorDiv(int m, int n) Parameters m int The m. n int The n. Returns int System.Int32. FloorMod(int, int) Mod operator that also works for negative m. [Version(1, 0, 0)] public static int FloorMod(int m, int n) Parameters m int The m. n int The n. Returns int System.Int32. FloorMod(float, float) Mod operator that also works for negative m. [Version(1, 0, 0)] public static float FloorMod(float m, float n) Parameters m float The m. n float The n. Returns float System.Int32. FloorToInt(float) Returns the highest integer equal to the given float. [Obsolete(\"Use Mathf.FloorToInt\")] public static int FloorToInt(float x) Parameters x float Returns int Frac(float) Returns the fractional part of a floating point number. public static float Frac(float x) Parameters x float The number to get the fractional part of. Returns float The fractional part of the given number. Remarks The result is always the number minus the number's floor. InRange(float, float, float) Tests whether the given value lies in the half-open interval specified by its endpoints, that is, whether the value lies in the interval [closedLeft, openRight). public static bool InRange(float value, float closedLeft, float openRight) Parameters value float The value to check. closedLeft float The left end of the interval. openRight float The right end of the interval. Returns bool true if the given value is equal or greater than closedLeft and smaller than openRight, false otherwise. InRange01(float) Tests whether the given value lies in the range [0, 1). public static bool InRange01(float value) Parameters value float The value to check. Returns bool true if the given value is equal or greater than 0 and smaller than 1, false otherwise. Mod(int, int) [Obsolete(\"Use FloorMod instead\")] public static int Mod(int m, int n) Parameters m int n int Returns int Mod(float, float) [Obsolete(\"Use FloorMod instead\")] public static float Mod(float m, float n) Parameters m float n float Returns float Sign(int) Returns the sign function evaluated at the given value. public static int Sign(int p) Parameters p int Returns int 1 if the given value is positive, -1 if it is negative, and 0 if it is 0. Sign(float) Returns the sign function evaluated at the given value. public static int Sign(float x) Parameters x float Returns int 1 if the given value is positive, -1 if it is negative, and 0 if it is 0. Trilerp(float, float, float, float, float, float, float, float, float, float, float) Performs trilinear interpolation between eight values. [Version(1, 0, 0)] public static float Trilerp(float c000, float c100, float c010, float c110, float c001, float c101, float c011, float c111, float u, float v, float w) Parameters c000 float The value at the corner (0, 0, 0). c100 float The value at the corner (1, 0, 0). c010 float The value at the corner (0, 1, 0). c110 float The value at the corner (1, 1, 0). c001 float The value at the corner (0, 0, 1). c101 float The value at the corner (1, 0, 1). c011 float The value at the corner (0, 1, 1). c111 float The value at the corner (1, 1, 1). u float The interpolation parameter along the x-axis (between 0 and 1). v float The interpolation parameter along the y-axis (between 0 and 1). w float The interpolation parameter along the z-axis (between 0 and 1). Returns float The interpolated value. Wlerp01(float, float, float) Linearly interpolates between two values between 0 and 1 if values wrap around from 1 back to 0. public static float Wlerp01(float v1, float v2, float t) Parameters v1 float v2 float t float Returns float Examples float angleInRad1 = 1; float angleInRad2 = 5; float revolution = Mathf.PI * 2; float interpolation = WLerp(angleInRad1 / revolution, angleInRad2 / revolution, 0.5f); //interpolation == (5 + 1 + Mathf.PI * 2)/2 = 3 + Mathf.PI Remarks This is useful, for example, in lerping between angles. Wrap01(float) [Obsolete(\"Use Frac instead.\")] public static float Wrap01(float value) Parameters value float Returns float"
  },
  "api/RTCube.Extensions.RTCMonoBehaviour.html": {
    "href": "api/RTCube.Extensions.RTCMonoBehaviour.html",
    "title": "Class RTCMonoBehaviour | RTCubeExtensions 文档",
    "keywords": "Class RTCMonoBehaviour Namespace RTCube.Extensions Provides some additional functions for MonoBehaviour. [Version(1, 0, 0)] public class RTCMonoBehaviour : MonoBehaviour Inheritance object RTCMonoBehaviour Derived SingletonSpawner<T> Singleton<T> Extension Methods ThrowHelper.ThrowIfNull(object, string) Methods DestroyUniversal(Object) Destroys given object using either Object.Destroy, or Object.DestroyImmediate, depending on whether Application.isPlaying is true or not. This is useful when writing methods that is used by both editor tools and the game itself. [Version(1, 0, 0)] public static void DestroyUniversal(UnityEngine.Object obj) Parameters obj Object The object to destroy. FindObjectsOfInterface<TInterface>() Similar to FindObjectsOfType, except that it looks for components that implement a specific interface. public static List<TInterface> FindObjectsOfInterface<TInterface>() where TInterface : class Returns List<TInterface> Type Parameters TInterface FindRequiredObjectOfType<T>() Finds a component of the given type in the scene, or fail if no such component can be found. [Version(1, 0, 0)] public static T FindRequiredObjectOfType<T>() where T : UnityEngine.Object Returns T The component of type T if it exists. Type Parameters T The type of component to find. Remarks Use this method when you know the object exists. You do not need to check if it exists, since this method does and throws an exception if it does not. Exceptions InvalidOperationException no component of the required type exist in the scene. GetRequiredComponentInChildren<T>() Gets a component of the given type in one of the children, or fail if no such component is attached to the given component. public T GetRequiredComponentInChildren<T>() where T : Component Returns T A component of type T attached to the given component if it exists. Type Parameters T The type of component to get. Exceptions InvalidOperationException When the no component of the required type exist on any of the given components children. GetRequiredComponent<T>() Gets a component of the given type, or fail if no such component is attached to the given component. public T GetRequiredComponent<T>() where T : Component Returns T A component of type T attached to the given component if it exists. Type Parameters T The type of component to get. Exceptions InvalidOperationException When the no component of the required type exist on the given component. Instantiate(GameObject) Instantiates a prefab. public static GameObject Instantiate(GameObject prefab) Parameters prefab GameObject The object. Returns GameObject GameObject. Instantiate(GameObject, GameObject) Instantiates a prefab and parents it to the root. public static GameObject Instantiate(GameObject prefab, GameObject root) Parameters prefab GameObject The prefab. root GameObject The root. Returns GameObject GameObject. Instantiate(GameObject, GameObject, Vector3, Quaternion) Instantiates a prefab, attaches it to the given root, and sets the local position and rotation. public static GameObject Instantiate(GameObject prefab, GameObject root, Vector3 localPosition, Quaternion localRotation) Parameters prefab GameObject The prefab. root GameObject The root. localPosition Vector3 The local position. localRotation Quaternion The local rotation. Returns GameObject GameObject. Instantiate(GameObject, Vector3, Quaternion) Instantiates the specified prefab. public static GameObject Instantiate(GameObject prefab, Vector3 position, Quaternion rotation) Parameters prefab GameObject position Vector3 rotation Quaternion Returns GameObject Instantiate<T>(T) Instantiates the specified prefab. public static T Instantiate<T>(T prefab) where T : Component Parameters prefab T The object. Returns T T. Type Parameters T Instantiate<T>(T, GameObject) Instantiates a prefab and attaches it to the given root. public static T Instantiate<T>(T prefab, GameObject root) where T : Component Parameters prefab T root GameObject Returns T Type Parameters T Instantiate<T>(T, GameObject, Vector3, Quaternion) Instantiates a prefab, attaches it to the given root, and sets the local position and rotation. public static T Instantiate<T>(T prefab, GameObject root, Vector3 localPosition, Quaternion localRotation) where T : Component Parameters prefab T root GameObject localPosition Vector3 localRotation Quaternion Returns T Type Parameters T Instantiate<T>(T, Vector3, Quaternion) Instantiates an object at the given position in the given orientation. public static T Instantiate<T>(T prefab, Vector3 position, Quaternion rotation) where T : Component Parameters prefab T The prefab to instantiate. position Vector3 The position. rotation Quaternion The rotation. Returns T T. Type Parameters T Invoke(Action, float) [Version(1, 0, 0)] public Coroutine Invoke(Action action, float time) Parameters action Action time float Returns Coroutine InvokeRepeating(Action, IGenerator<float>) [Version(1, 0, 0)] public Coroutine InvokeRepeating(Action action, IGenerator<float> repeatTime) Parameters action Action repeatTime IGenerator<float> Returns Coroutine InvokeRepeating(Action, float, float) [Version(1, 0, 0)] public Coroutine InvokeRepeating(Action action, float time, float repeatTime) Parameters action Action time float repeatTime float Returns Coroutine Tween<T>(T, T, float, Func<T, T, float, T>, Action<T>) [Version(1, 0, 0)] public Coroutine Tween<T>(T start, T finish, float totalTime, Func<T, T, float, T> lerp, Action<T> action) Parameters start T finish T totalTime float lerp Func<T, T, float, T> action Action<T> Returns Coroutine Type Parameters T Tween<T>(T, T, float, Func<T, T, float, T>, Action<T>, Func<float>) [Version(1, 0, 0)] public Coroutine Tween<T>(T start, T finish, float totalTime, Func<T, T, float, T> lerp, Action<T> action, Func<float> deltaTime) Parameters start T finish T totalTime float lerp Func<T, T, float, T> action Action<T> deltaTime Func<float> Returns Coroutine Type Parameters T"
  },
  "api/RTCube.Extensions.RTCPlayerPrefs.html": {
    "href": "api/RTCube.Extensions.RTCPlayerPrefs.html",
    "title": "Class RTCPlayerPrefs | RTCubeExtensions 文档",
    "keywords": "Class RTCPlayerPrefs Namespace RTCube.Extensions An alternative to PlayerPrefs that provides methods for setting bool and array preferences. [Version(1, 0, 0)] public class RTCPlayerPrefs Inheritance object RTCPlayerPrefs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Methods DeleteAll() public static void DeleteAll() DeleteArray(string, string) public static void DeleteArray(string scope, string key) Parameters scope string key string DeleteKey(string, string) public static void DeleteKey(string scope, string key) Parameters scope string key string GetBool(string, string, bool) public static bool GetBool(string scope, string key, bool defaultValue = false) Parameters scope string key string defaultValue bool Returns bool GetBoolArray(string, string) public static bool[] GetBoolArray(string scope, string key) Parameters scope string key string Returns bool[] GetFloat(string, string, float) public static float GetFloat(string scope, string key, float defaultValue = 0) Parameters scope string key string defaultValue float Returns float GetFloatArray(string, string) public static float[] GetFloatArray(string scope, string key) Parameters scope string key string Returns float[] GetInt(string, string, int) public static int GetInt(string scope, string key, int defaultValue = 0) Parameters scope string key string defaultValue int Returns int GetIntArray(string, string) public static int[] GetIntArray(string scope, string key) Parameters scope string key string Returns int[] GetString(string, string, string) public static string GetString(string scope, string key, string defaultValue = \"\") Parameters scope string key string defaultValue string Returns string GetStringArray(string, string) public static string[] GetStringArray(string scope, string key) Parameters scope string key string Returns string[] HasKey(string, string) public static bool HasKey(string scope, string key) Parameters scope string key string Returns bool Save() public static void Save() SetBool(string, string, bool) public static void SetBool(string scope, string key, bool val) Parameters scope string key string val bool SetBoolArray(string, string, bool[]) public static void SetBoolArray(string scope, string key, bool[] values) Parameters scope string key string values bool[] SetFloat(string, string, float) public static void SetFloat(string scope, string key, float val) Parameters scope string key string val float SetFloatArray(string, string, float[]) public static void SetFloatArray(string scope, string key, float[] values) Parameters scope string key string values float[] SetInt(string, string, int) public static void SetInt(string scope, string key, int val) Parameters scope string key string val int SetIntArray(string, string, int[]) public static void SetIntArray(string scope, string key, int[] values) Parameters scope string key string values int[] SetString(string, string, string) public static void SetString(string scope, string key, string value) Parameters scope string key string value string SetStringArray(string, string, string[]) public static void SetStringArray(string scope, string key, string[] values) Parameters scope string key string values string[]"
  },
  "api/RTCube.Extensions.RTCPool-1.html": {
    "href": "api/RTCube.Extensions.RTCPool-1.html",
    "title": "Class RTCPool<T> | RTCubeExtensions 文档",
    "keywords": "Class RTCPool<T> Namespace RTCube.Extensions A light-weight pool class for objects that cannot be hashed. public class RTCPool<T> : IPool<T> where T : class Type Parameters T The type of the objects to pool. Since the methods defined by the interface would copy instances of pool objects if T was a struct, T must be a class. Inheritance object RTCPool<T> Implements IPool<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PoolExtensions.Clear<T>(IPool<T>, bool) PoolExtensions.SetCapacity<T>(IPool<T>, int, bool) PoolExtensions.Trim<T>(IPool<T>) PoolExtensions.TryGet<T>(IPool<T>, out T) ThrowHelper.ThrowIfNull(object, string) Remarks When the pool is created, it is filled up to capacity with objects that are newly created. A pool object can be active or inactive. When an object is active, it can be used by the client. When it is inactive, it should not be used, but the system has no checks for this. Objects are set to inactive when they are created for the first time. To get an object that you can use, call Get(). This will activate one of the pool objects up for your use. When you are done with it, call Release(T). This will deactivate the object, and allow it to be reused. Acquiring an object or releasing it does not destroy or create any objects, and pool objects always remain in the pool unless the capacity is reduced. We recommend implementing a bool isActive field in the object you want to pool, and maintain it in the activate and deactivate actions you provide in the constructor. You can then perform asserts in your code on this field to ensure you do not accidentally use objects that are inactive. Constructors RTCPool(int, Func<T>, Action<T>, Action<T>, Action<T>) Initializes a new instance of the RTCPool<T> class. public RTCPool(int initialCapacity, Func<T> create, Action<T> destroy, Action<T> activate, Action<T> deactivate) Parameters initialCapacity int The initial capacity of the pool, that is, how many object to create. create Func<T> A function that creates a new object of type T. This should create objects in the active state; they will be deactivated by the pool. This function should (ideally) also instantiate everything the class will need, and do any tasks that do not be repeated each time the object is made active. destroy Action<T> The action that destroys an object of type T. If it is an ordinary C# object, you do not need to provide a destroy method — references to the object from this object will be removed, and (provided you do not have references to it somewhere too), it will be released naturally like any C# object. If T is a Unity UnityEngine.Object, or a Component whose Component.gameObject you want to be destroyed, this action should do that. Also consider using the MonoBehaviourPool<T> class instead. This action is called by methods that allow you to specify whether to deactivate objects first, so this action need not do any tasks that are already done by deactivate action. activate Action<T> A function called when an object is activated, when it is acquired. deactivate Action<T> A function called when an object is activated, either when releasing it, or when it is created for the first time. If your object accumulate references to other objects while it is active, and they cannot be re-used, you should remove them in this action, so that these objects do not hog memory while they are inactive. Properties ActiveCount The number of objects that are currently active. [Version(3, 2, 0)] public int ActiveCount { get; } Property Value int Capacity The total number of objects in the pool (active and inactive), the maximum number of objects that can be returned by Get(). public int Capacity { get; } Property Value int The capacity. HasAvailableObject Returns whether there is an inactive object available to get. public bool HasAvailableObject { get; } Property Value bool true if an inactive object is available; otherwise, false. Methods DecCapacity(int, bool) Decreases the capacity of the pool. [Obsolete(\"Use DecreaseCapacity instead.\")] public int DecCapacity(int decrement, bool deactivateFirst = false) Parameters decrement int The number of pool objects to destroy. deactivateFirst bool Whether to deactivate (active) objects before destroying them. Returns int Remarks This method may destroy active objects. Exceptions ArgumentOutOfRangeException decrement is negative. DecreaseCapacity(int, bool) Decreases the capacity of the pool. [Version(3, 2, 0)] public int DecreaseCapacity(int decrement, bool deactivateFirst = false) Parameters decrement int The number of pool objects to destroy. deactivateFirst bool Whether to deactivate (active) objects before destroying them. Returns int Remarks This method may destroy active objects. Exceptions ArgumentOutOfRangeException decrement is negative. Get() Gets a new object from the pool. [Version(3, 2, 0)] public T Get() Returns T A freshly activated object. Exceptions InvalidOperationException No inactive objects are available. GetNewObject() Gets a new object from the pool. [Obsolete(\"Use Get instead.\")] public T GetNewObject() Returns T A freshly activated object. Exceptions InvalidOperationException No inactive objects are available. IncCapacity(int) Increases the capacity of the pool. [Obsolete(\"Use IncreaseCapacity instead.\")] public void IncCapacity(int increment) Parameters increment int The number of new pool objects to add. Exceptions ArgumentOutOfRangeException increment is negative. IncreaseCapacity(int) Increases the capacity of the pool. [Version(3, 2, 0)] public void IncreaseCapacity(int increment) Parameters increment int The number of new pool objects to add. Exceptions ArgumentOutOfRangeException increment is negative. Release(T) Releases the specified object back to the pool. public void Release(T obj) Parameters obj T The object to release. We do not restrict the pool from containing null objects, therefore obj can be null if the create action passed into the constructor can produce null elements. This is an unusual use case though. Exceptions ArgumentException obj is not in the pool. InvalidOperationException obj is already inactive. ReleaseAll() Releases all objects in the pool. [Version(3, 2, 0)] public void ReleaseAll() See Also HashPool<T>"
  },
  "api/RTCube.Extensions.RTCRandom.html": {
    "href": "api/RTCube.Extensions.RTCRandom.html",
    "title": "Class RTCRandom | RTCubeExtensions 文档",
    "keywords": "Class RTCRandom Namespace RTCube.Extensions Some convenience functions for random bools and integers. [Version(1, 0, 0)] public static class RTCRandom Inheritance object RTCRandom Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields GlobalRandom Globally accessible Random object for random calls public static readonly IRandom GlobalRandom Field Value IRandom Methods Bool(float) Generates a random bool, true with the given probability. public static bool Bool(float probability) Parameters probability float Returns bool GetRandom() Gets a new random generator. public static IRandom GetRandom() Returns IRandom A new random generator GetRandom(int) Gets a new random generator. public static IRandom GetRandom(int seed) Parameters seed int The seed to instantiate the generator with. Returns IRandom A seeded instance of a random generator. RandomOffset(float, float) Gives a random value within a given range centered around a given value. public static float RandomOffset(float value, float range) Parameters value float The value around which the random values will be centered. range float The range of the returned value. Returns float A random value between value - range/2 and value + range/2. Range(int) Generates a Random integer between 0 inclusive and the given max, exclusive. public static int Range(int max) Parameters max int Returns int Range(int, int) Generates a Random integer between the given min inclusive and the given max, exclusive. public static int Range(int min, int max) Parameters min int max int Returns int Range(float) Generates a Random float between 0.0f inclusive and the given max public static float Range(float max) Parameters max float Returns float Range(float, float) Generates a Random float between the given min inclusive and the given max, exclusive. public static float Range(float min, float max) Parameters min float max float Returns float Sign() Generates either -1.0f or 1.0f randomly. public static float Sign() Returns float"
  },
  "api/RTCube.Extensions.ReadOnlyAttribute.html": {
    "href": "api/RTCube.Extensions.ReadOnlyAttribute.html",
    "title": "Class ReadOnlyAttribute | RTCubeExtensions 文档",
    "keywords": "Class ReadOnlyAttribute Namespace RTCube.Extensions Used to mark inspectable fields as read-only (that is, making them uneditable, even if they are visible). [Version(1, 0, 0)] [AttributeUsage(AttributeTargets.Field)] public class ReadOnlyAttribute : PropertyAttribute Inheritance object ReadOnlyAttribute Extension Methods ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.ResourceNotFoundException.html": {
    "href": "api/RTCube.Extensions.ResourceNotFoundException.html",
    "title": "Class ResourceNotFoundException | RTCubeExtensions 文档",
    "keywords": "Class ResourceNotFoundException Namespace RTCube.Extensions Thrown when trying to load a resource (using UnityEngine.Resources.Load(string) and variants) but the resource is not found. public class ResourceNotFoundException : Exception, ISerializable Inheritance object Exception ResourceNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors ResourceNotFoundException() public ResourceNotFoundException() ResourceNotFoundException(string) public ResourceNotFoundException(string resourceName) Parameters resourceName string ResourceNotFoundException(string, string) public ResourceNotFoundException(string resourceName, string resourcePath) Parameters resourceName string resourcePath string ResourceNotFoundException(string, string, string) public ResourceNotFoundException(string resourceName, string resourcePath, string message) Parameters resourceName string resourcePath string message string Fields resourceName public string resourceName Field Value string resourcePath public string resourcePath Field Value string See Also Exception"
  },
  "api/RTCube.Extensions.ScreenshotTaker.html": {
    "href": "api/RTCube.Extensions.ScreenshotTaker.html",
    "title": "Class ScreenshotTaker | RTCubeExtensions 文档",
    "keywords": "Class ScreenshotTaker Namespace RTCube.Extensions Provides a generic implementation of a singleton-like pattern for MonoBehaviour classes. This class automatically searches for an existing instance in the scene or logs an error if none or more than one are found. public sealed class ScreenshotTaker : Singleton<ScreenshotTaker> Inheritance object RTCMonoBehaviour Singleton<ScreenshotTaker> ScreenshotTaker Inherited Members Singleton<ScreenshotTaker>.Instance Singleton<ScreenshotTaker>.IsReady Singleton<ScreenshotTaker>.HasInstanceInOpenScenes Singleton<ScreenshotTaker>.OnDestroy() Singleton<ScreenshotTaker>.FindAndConnectInstance() RTCMonoBehaviour.Instantiate<T>(T) RTCMonoBehaviour.Instantiate<T>(T, Vector3, Quaternion) RTCMonoBehaviour.Instantiate<T>(T, GameObject) RTCMonoBehaviour.Instantiate<T>(T, GameObject, Vector3, Quaternion) RTCMonoBehaviour.Instantiate(GameObject) RTCMonoBehaviour.Instantiate(GameObject, Vector3, Quaternion) RTCMonoBehaviour.Instantiate(GameObject, GameObject) RTCMonoBehaviour.Instantiate(GameObject, GameObject, Vector3, Quaternion) RTCMonoBehaviour.FindObjectsOfInterface<TInterface>() RTCMonoBehaviour.FindRequiredObjectOfType<T>() RTCMonoBehaviour.Invoke(Action, float) RTCMonoBehaviour.InvokeRepeating(Action, float, float) RTCMonoBehaviour.InvokeRepeating(Action, IGenerator<float>) RTCMonoBehaviour.Tween<T>(T, T, float, Func<T, T, float, T>, Action<T>, Func<float>) RTCMonoBehaviour.Tween<T>(T, T, float, Func<T, T, float, T>, Action<T>) RTCMonoBehaviour.GetRequiredComponent<T>() RTCMonoBehaviour.GetRequiredComponentInChildren<T>() RTCMonoBehaviour.DestroyUniversal(UnityEngine.Object) Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks Singletons usually manage their own creation, but it is common in Unity projects to have a singleton already placed in the scene. In this sense, this class really checks whether an instance can be used as a singleton, and then provides access to the instance. If you want to create a singleton that is not already placed in the scene, you can use put <xref href=\"RTCube.Extensions.SingletonSpawner%601\" data-throw-if-not-resolved=\"false\"></xref> in the scene instead. Methods Start() public void Start() Exceptions InvalidOperationException there are none or more than one instance in the scene. Take() public static void Take() Exceptions InvalidOperationException there are none or more than one instance in the scene. TakeClean() public static void TakeClean() Exceptions InvalidOperationException there are none or more than one instance in the scene. TakeTexture() public static Texture2D TakeTexture() Returns Texture2D Exceptions InvalidOperationException there are none or more than one instance in the scene. Update() public void Update() Exceptions InvalidOperationException there are none or more than one instance in the scene."
  },
  "api/RTCube.Extensions.SeparatorAttribute.html": {
    "href": "api/RTCube.Extensions.SeparatorAttribute.html",
    "title": "Class SeparatorAttribute | RTCubeExtensions 文档",
    "keywords": "Class SeparatorAttribute Namespace RTCube.Extensions [Version(1, 0, 0)] public class SeparatorAttribute : PropertyAttribute Inheritance object SeparatorAttribute Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors SeparatorAttribute() public SeparatorAttribute() SeparatorAttribute(int) public SeparatorAttribute(int height) Parameters height int SeparatorAttribute(string) public SeparatorAttribute(string color) Parameters color string SeparatorAttribute(string, int) public SeparatorAttribute(string color, int height) Parameters color string height int Properties Color public Color Color { get; } Property Value Color Height public int Height { get; } Property Value int"
  },
  "api/RTCube.Extensions.SignalBus.html": {
    "href": "api/RTCube.Extensions.SignalBus.html",
    "title": "Class SignalBus | RTCubeExtensions 文档",
    "keywords": "Class SignalBus Namespace RTCube.Extensions public class SignalBus Inheritance object SignalBus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Methods Fire<TSignal>() public void Fire<TSignal>() Type Parameters TSignal Fire<TSignal>(TSignal) public void Fire<TSignal>(TSignal signal) Parameters signal TSignal Type Parameters TSignal Subscribe<T>(Action<T>) public IDisposable Subscribe<T>(Action<T> value) Parameters value Action<T> Returns IDisposable Type Parameters T"
  },
  "api/RTCube.Extensions.Singleton-1.html": {
    "href": "api/RTCube.Extensions.Singleton-1.html",
    "title": "Class Singleton<T> | RTCubeExtensions 文档",
    "keywords": "Class Singleton<T> Namespace RTCube.Extensions Provides a generic implementation of a singleton-like pattern for MonoBehaviour classes. This class automatically searches for an existing instance in the scene or logs an error if none or more than one are found. [Version(1, 0, 0)] public class Singleton<T> : RTCMonoBehaviour where T : MonoBehaviour Type Parameters T The type of the Singleton class derived from MonoBehaviour. Inheritance object RTCMonoBehaviour Singleton<T> Derived ScreenshotTaker Inherited Members RTCMonoBehaviour.Instantiate<T>(T) RTCMonoBehaviour.Instantiate<T>(T, Vector3, Quaternion) RTCMonoBehaviour.Instantiate<T>(T, GameObject) RTCMonoBehaviour.Instantiate<T>(T, GameObject, Vector3, Quaternion) RTCMonoBehaviour.Instantiate(GameObject) RTCMonoBehaviour.Instantiate(GameObject, Vector3, Quaternion) RTCMonoBehaviour.Instantiate(GameObject, GameObject) RTCMonoBehaviour.Instantiate(GameObject, GameObject, Vector3, Quaternion) RTCMonoBehaviour.FindObjectsOfInterface<TInterface>() RTCMonoBehaviour.FindRequiredObjectOfType<T>() RTCMonoBehaviour.Invoke(Action, float) RTCMonoBehaviour.InvokeRepeating(Action, float, float) RTCMonoBehaviour.InvokeRepeating(Action, IGenerator<float>) RTCMonoBehaviour.Tween<T>(T, T, float, Func<T, T, float, T>, Action<T>, Func<float>) RTCMonoBehaviour.Tween<T>(T, T, float, Func<T, T, float, T>, Action<T>) RTCMonoBehaviour.GetRequiredComponent<T>() RTCMonoBehaviour.GetRequiredComponentInChildren<T>() RTCMonoBehaviour.DestroyUniversal(UnityEngine.Object) Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks Singletons usually manage their own creation, but it is common in Unity projects to have a singleton already placed in the scene. In this sense, this class really checks whether an instance can be used as a singleton, and then provides access to the instance. If you want to create a singleton that is not already placed in the scene, you can use put <xref href=\"RTCube.Extensions.SingletonSpawner%601\" data-throw-if-not-resolved=\"false\"></xref> in the scene instead. Fields instance protected static T instance Field Value T Exceptions InvalidOperationException there are none or more than one instance in the scene. Properties HasInstanceInOpenScenes Gets a value indicating whether this singleton has a unique instance in open scenes. [Version(1, 0, 0)] public static bool HasInstanceInOpenScenes { get; } Property Value bool Exceptions InvalidOperationException there are none or more than one instance in the scene. Instance Returns the instance of this singleton. [Version(1, 0, 0)] public static T Instance { get; } Property Value T Exceptions InvalidOperationException there are none or more than one instance in the scene. IsReady Gets a value indicating whether this singleton is ready, that is, a unique instance is available in the scene. [Version(1, 0, 0)] public static bool IsReady { get; } Property Value bool Exceptions InvalidOperationException there are none or more than one instance in the scene. Methods FindAndConnectInstance() Finds an instance of the given type in the open scenes and assign it to the instance field of the Singleton<T>. [Version(1, 0, 0)] public static Singleton.FindResult FindAndConnectInstance() Returns Singleton.FindResult The result of the search. Only FoundOne is considered a success. Remarks You should generally not need to call this method; this is used by code that span prefabs. Exceptions InvalidOperationException there are none or more than one instance in the scene. OnDestroy() [Version(1, 0, 0)] public void OnDestroy() Exceptions InvalidOperationException there are none or more than one instance in the scene."
  },
  "api/RTCube.Extensions.Singleton.FindResult.html": {
    "href": "api/RTCube.Extensions.Singleton.FindResult.html",
    "title": "Enum Singleton.FindResult | RTCubeExtensions 文档",
    "keywords": "Enum Singleton.FindResult Namespace RTCube.Extensions The result of the search for an instance of the singleton. [Version(1, 0, 0)] public enum Singleton.FindResult Extension Methods ThrowHelper.ThrowIfNull(object, string) Fields FoundMoreThanOne = 2 More than one instance was found in the open scenes. FoundNone = 0 No instance was found in the open scenes. FoundOne = 1 A single instance was found in the open scenes."
  },
  "api/RTCube.Extensions.Singleton.html": {
    "href": "api/RTCube.Extensions.Singleton.html",
    "title": "Class Singleton | RTCubeExtensions 文档",
    "keywords": "Class Singleton Namespace RTCube.Extensions Provides support for Singleton<T>. [Version(1, 0, 0)] public static class Singleton Inheritance object Singleton Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/RTCube.Extensions.SingletonSpawner-1.html": {
    "href": "api/RTCube.Extensions.SingletonSpawner-1.html",
    "title": "Class SingletonSpawner<T> | RTCubeExtensions 文档",
    "keywords": "Class SingletonSpawner<T> Namespace RTCube.Extensions [Version(1, 0, 0)] public class SingletonSpawner<T> : RTCMonoBehaviour where T : MonoBehaviour Type Parameters T Inheritance object RTCMonoBehaviour SingletonSpawner<T> Inherited Members RTCMonoBehaviour.Instantiate<T>(T) RTCMonoBehaviour.Instantiate<T>(T, Vector3, Quaternion) RTCMonoBehaviour.Instantiate<T>(T, GameObject) RTCMonoBehaviour.Instantiate<T>(T, GameObject, Vector3, Quaternion) RTCMonoBehaviour.Instantiate(GameObject) RTCMonoBehaviour.Instantiate(GameObject, Vector3, Quaternion) RTCMonoBehaviour.Instantiate(GameObject, GameObject) RTCMonoBehaviour.Instantiate(GameObject, GameObject, Vector3, Quaternion) RTCMonoBehaviour.FindObjectsOfInterface<TInterface>() RTCMonoBehaviour.FindRequiredObjectOfType<T>() RTCMonoBehaviour.Invoke(Action, float) RTCMonoBehaviour.InvokeRepeating(Action, float, float) RTCMonoBehaviour.InvokeRepeating(Action, IGenerator<float>) RTCMonoBehaviour.Tween<T>(T, T, float, Func<T, T, float, T>, Action<T>, Func<float>) RTCMonoBehaviour.Tween<T>(T, T, float, Func<T, T, float, T>, Action<T>) RTCMonoBehaviour.GetRequiredComponent<T>() RTCMonoBehaviour.GetRequiredComponentInChildren<T>() RTCMonoBehaviour.DestroyUniversal(UnityEngine.Object) Extension Methods ThrowHelper.ThrowIfNull(object, string) Methods Awake() public void Awake()"
  },
  "api/RTCube.Extensions.StateMachine-1.html": {
    "href": "api/RTCube.Extensions.StateMachine-1.html",
    "title": "Class StateMachine<TLabel> | RTCubeExtensions 文档",
    "keywords": "Class StateMachine<TLabel> Namespace RTCube.Extensions A lightweight state machine. [Version(1, 0, 0)] public class StateMachine<TLabel> Type Parameters TLabel The label type of this state machine. Enums are common, but strings or int are other possibilities. Inheritance object StateMachine<TLabel> Derived PushdownAutomaton<TLabel> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks To use it: Define your own label. Enums are probably the best choice. Construct a new state machine, typically in a MonoBehaviour's Start method. Add the various states with the appropriate delegates. Call the state machine's Update method from the MonoBehaviour's Update method. Set the CurrentState property on the state machine to transition. (You can either set it from one of the state delegates, or from anywhere else. When a state is changed, the OnStop on existing state is called, then the OnStart of the new state, and from there on OnUpdate of the new state each time the update is called. Constructors StateMachine() Constructs a new StateMachine. public StateMachine() Properties CurrentState Returns the label of the current state. public TLabel CurrentState { get; set; } Property Value TLabel Methods AddState(TLabel) Adds a state. public void AddState(TLabel label) Parameters label TLabel The name of the state to add. AddState(TLabel, Action) Adds a state, and the delegates that should run when the state starts. Any delegate can be null, and wont be executed. public void AddState(TLabel label, Action onStart) Parameters label TLabel The name of the state to add. onStart Action The action performed when the state is entered. AddState(TLabel, Action, Action) Adds a state, and the delegates that should run when the state starts, and when the state machine is updated. Any delegate can be null, and wont be executed. public void AddState(TLabel label, Action onStart, Action onUpdate) Parameters label TLabel The name of the state to add. onStart Action The action performed when the state is entered. onUpdate Action The action performed when the state machine is updated in the given state. AddState(TLabel, Action, Action, Action) Adds a state, and the delegates that should run when the state starts, stops, and when the state machine is updated. Any delegate can be null, and wont be executed. public void AddState(TLabel label, Action onStart, Action onUpdate, Action onStop) Parameters label TLabel The name of the state to add. onStart Action The action performed when the state is entered. onUpdate Action The action performed when the state machine is updated in the given state. onStop Action The action performed when the state machine is left. AddState<TSubStateLabel>(TLabel, StateMachine<TSubStateLabel>, TSubStateLabel) Adds a sub state machine for the given state. The sub state machine need not be updated, as long as this state machine is being updated. [Version(1, 4, 0)] public void AddState<TSubStateLabel>(TLabel label, StateMachine<TSubStateLabel> subMachine, TSubStateLabel subMachineStartState) Parameters label TLabel The name of the state to add. subMachine StateMachine<TSubStateLabel> The sub-machine that will run during the given state. subMachineStartState TSubStateLabel The starting state of the sub-machine. Type Parameters TSubStateLabel The type of the sub-machine. ToString() Returns the current state name public override string ToString() Returns string Update() This method should be called every frame. public void Update()"
  },
  "api/RTCube.Extensions.StateTracker-1.html": {
    "href": "api/RTCube.Extensions.StateTracker-1.html",
    "title": "Class StateTracker<TStateData> | RTCubeExtensions 文档",
    "keywords": "Class StateTracker<TStateData> Namespace RTCube.Extensions Tracks a number of states. Events are raised when any state is started, and when all has stopped. public class StateTracker<TStateData> Type Parameters TStateData The type of the t state data. Inheritance object StateTracker<TStateData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks A loading bar is a typical use case. The loading bar should be displayed when any of a number of load processes has started; it should be removed when all has stopped. Another use-case is keeping track of poisoning, when the poisoning can be caused by a number of poisons, and each poison is cured independently. Constructors StateTracker() Initializes a new instance of the StateTracker<TStateData> class. public StateTracker() Properties ActiveTokens Returns all the active tokens: tokens returned when states has been started that has not yet been stopped. public IEnumerable<IStateToken<TStateData>> ActiveTokens { get; } Property Value IEnumerable<IStateToken<TStateData>> The active tokens. IsActive Gets a value indicating whether this tracker is active, that is, whether any state has been started that has not been stopped. public bool IsActive { get; } Property Value bool true if this tracker is active; otherwise, false. Methods StartState(TStateData) Starts a state, and returns a token that can be used to stop it again. public IStateToken<TStateData> StartState(TStateData stateData) Parameters stateData TStateData Custom state data. This is useful in cases where all the active states needs to be examined. For example, this data can be used to identify states externally. Returns IStateToken<TStateData> A token that wraps the custom state data and can be used to stop the state started with this method. StopState(IStateToken<TStateData>) Stops the state associated with the token. The token must be one that was returned when the state was started. public void StopState(IStateToken<TStateData> token) Parameters token IStateToken<TStateData> The token of the state to stop. Exceptions ArgumentNullException token InvalidOperationException The given token is not from this state tracker or the given token is not active Events OnStateActive Occurs when this tracker is inactive and a state is started (so that this tracker becomes active). public event Action OnStateActive Event Type Action OnStateInactive Occurs when all active states are stopped, that is, when this tracker is active and becomes inactive. public event Action OnStateInactive Event Type Action"
  },
  "api/RTCube.Extensions.StringList.html": {
    "href": "api/RTCube.Extensions.StringList.html",
    "title": "Class StringList | RTCubeExtensions 文档",
    "keywords": "Class StringList Namespace RTCube.Extensions An InspectorList of type string. [Version(1, 0, 0)] [Serializable] public class StringList : InspectorList<string>, IList<string>, ICollection<string>, IEnumerable<string>, IEnumerable Inheritance object InspectorList InspectorList<string> StringList Implements IList<string> ICollection<string> IEnumerable<string> IEnumerable Inherited Members InspectorList<string>.GetEnumerator() InspectorList<string>.Add(string) InspectorList<string>.AddRange(IEnumerable<string>) InspectorList<string>.Clear() InspectorList<string>.Contains(string) InspectorList<string>.CopyTo(string[], int) InspectorList<string>.Remove(string) InspectorList<string>.Count InspectorList<string>.IsReadOnly InspectorList<string>.IndexOf(string) InspectorList<string>.Insert(int, string) InspectorList<string>.RemoveAt(int) InspectorList<string>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, IComparer<TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int, IComparer<TElement>) CollectionExtensions.IsEmpty<T>(ICollection<T>) PoolExtensions.AddAllAvailableFromPool<T>(ICollection<T>, IPool<T>) PoolExtensions.AddFromPool<T>(ICollection<T>, IPool<T>, int) PoolExtensions.TryAddFromPool<T>(ICollection<T>, IPool<T>, int) Combinatorial.MultiRadixTuples<T>(IEnumerable<IEnumerable<T>>) CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.FilterByType<T, TFilter>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) CollectionExtensions.FillWithDefault<T>(IList<T>) CollectionExtensions.Fill<T>(IList<T>, T) CollectionExtensions.Shuffle<T>(IList<T>) CollectionExtensions.Shuffle<T>(IList<T>, IRandom) ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.StringPopupAttribute.html": {
    "href": "api/RTCube.Extensions.StringPopupAttribute.html",
    "title": "Class StringPopupAttribute | RTCubeExtensions 文档",
    "keywords": "Class StringPopupAttribute Namespace RTCube.Extensions Used to mark a string field that should be drawn as a popup list. [Version(1, 0, 0)] public class StringPopupAttribute : PopupListAttribute Inheritance object PopupListAttribute StringPopupAttribute Inherited Members PopupListAttribute.PopupListData PopupListAttribute.RetrievalMethod Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors StringPopupAttribute(string) Marks a string field that should be drawn as a popup list using the given key to retrieve the values. public StringPopupAttribute(string key) Parameters key string The key used to retrieve the values for the popup list. The retriever function should be registered with RegisterValuesRetriever<T>(string, Func<IEnumerable<T>>). See (Property Drawers)[PropertyDrawers.md] for more details. StringPopupAttribute(string[]) Marks a string field that should be drawn as a popup list using the given list of values. public StringPopupAttribute(string[] values) Parameters values string[]"
  },
  "api/RTCube.Extensions.Support.Branding.Hex.html": {
    "href": "api/RTCube.Extensions.Support.Branding.Hex.html",
    "title": "Class Branding.Hex | RTCubeExtensions 文档",
    "keywords": "Class Branding.Hex Namespace RTCube.Extensions.Support Provides the branding color's Hex values. [Version(1, 0, 0)] public static class Branding.Hex Inheritance object Branding.Hex Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Among other things, this is useful for specifying colors in attributes. Fields Apple public const string Apple = \"#76C83D\" Field Value string AppleDark public const string AppleDark = \"#1A902D\" Field Value string AppleLight public const string AppleLight = \"#A3DB7D\" Field Value string Aqua public const string Aqua = \"#7BD9E1\" Field Value string AquaDark public const string AquaDark = \"#37BBD1\" Field Value string AquaLight public const string AquaLight = \"#B3E9EF\" Field Value string Azure public const string Azure = \"#0297FE\" Field Value string AzureDark public const string AzureDark = \"#0154C7\" Field Value string AzureLight public const string AzureLight = \"#52B9FE\" Field Value string Black public const string Black = \"#000\" Field Value string Carrot public const string Carrot = \"#F9A332\" Field Value string CarrotDark public const string CarrotDark = \"#F88318\" Field Value string CarrotLight public const string CarrotLight = \"#FABC68\" Field Value string Coral public const string Coral = \"#FF716F\" Field Value string CoralDark public const string CoralDark = \"#FF3C36\" Field Value string CoralLight public const string CoralLight = \"#FFA5A5\" Field Value string Gray3 [Version(1, 0, 0)] public const string Gray3 = \"#333\" Field Value string Gray6 [Version(1, 0, 0)] public const string Gray6 = \"#666\" Field Value string Gray9 [Version(1, 0, 0)] public const string Gray9 = \"#999\" Field Value string GrayA [Version(1, 0, 0)] public const string GrayA = \"#AAA\" Field Value string GrayC [Version(1, 0, 0)] public const string GrayC = \"#CCC\" Field Value string Indigo public const string Indigo = \"#30287A\" Field Value string IndigoDark public const string IndigoDark = \"#1B123A\" Field Value string IndigoLight public const string IndigoLight = \"#5F52C8\" Field Value string Lemon public const string Lemon = \"#F9EE34\" Field Value string LemonDark public const string LemonDark = \"#F0D506\" Field Value string LemonLight public const string LemonLight = \"#FCF79A\" Field Value string White public const string White = \"#FFF\" Field Value string"
  },
  "api/RTCube.Extensions.Support.Branding.html": {
    "href": "api/RTCube.Extensions.Support.Branding.html",
    "title": "Class Branding | RTCubeExtensions 文档",
    "keywords": "Class Branding Namespace RTCube.Extensions.Support Provides a set of colors that can be used for branding, mostly to be used in examples. [Version(1, 0, 0)] public static class Branding Inheritance object Branding Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Apple public static readonly Color Apple Field Value Color AppleDark public static readonly Color AppleDark Field Value Color AppleLight public static readonly Color AppleLight Field Value Color Aqua public static readonly Color Aqua Field Value Color AquaDark public static readonly Color AquaDark Field Value Color AquaLight public static readonly Color AquaLight Field Value Color Azure public static readonly Color Azure Field Value Color AzureDark public static readonly Color AzureDark Field Value Color AzureLight public static readonly Color AzureLight Field Value Color Black [Version(1, 0, 0)] public static readonly Color Black Field Value Color Carrot public static readonly Color Carrot Field Value Color CarrotDark public static readonly Color CarrotDark Field Value Color CarrotLight public static readonly Color CarrotLight Field Value Color Coral public static readonly Color Coral Field Value Color CoralDark public static readonly Color CoralDark Field Value Color CoralLight public static readonly Color CoralLight Field Value Color Gray3 [Version(1, 0, 0)] public static readonly Color Gray3 Field Value Color Gray6 [Version(1, 0, 0)] public static readonly Color Gray6 Field Value Color Gray9 [Version(1, 0, 0)] public static readonly Color Gray9 Field Value Color GrayA [Version(1, 0, 0)] public static readonly Color GrayA Field Value Color GrayC [Version(1, 0, 0)] public static readonly Color GrayC Field Value Color Indigo public static readonly Color Indigo Field Value Color IndigoDark public static readonly Color IndigoDark Field Value Color IndigoLight public static readonly Color IndigoLight Field Value Color Lemon public static readonly Color Lemon Field Value Color LemonDark public static readonly Color LemonDark Field Value Color LemonLight public static readonly Color LemonLight Field Value Color White [Version(1, 0, 0)] public static readonly Color White Field Value Color Properties Colors The default colors used in the RTCube examples. public static IReadOnlyList<Color> Colors { get; } Property Value IReadOnlyList<Color>"
  },
  "api/RTCube.Extensions.Support.DoesNotReturn.html": {
    "href": "api/RTCube.Extensions.Support.DoesNotReturn.html",
    "title": "Class DoesNotReturn | RTCubeExtensions 文档",
    "keywords": "Class DoesNotReturn Namespace RTCube.Extensions.Support Specifies that a method will never return under any circumstance. [Version(1, 0, 0)] public class DoesNotReturn : Attribute Inheritance object Attribute DoesNotReturn Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.Support.MemberNotNullWhenAttribute.html": {
    "href": "api/RTCube.Extensions.Support.MemberNotNullWhenAttribute.html",
    "title": "Class MemberNotNullWhenAttribute | RTCubeExtensions 文档",
    "keywords": "Class MemberNotNullWhenAttribute Namespace RTCube.Extensions.Support Specifies that the method or property will ensure that the listed field and property members have non-null values when returning with the specified return value condition. [Version(1, 0, 0)] public class MemberNotNullWhenAttribute : Attribute Inheritance object Attribute MemberNotNullWhenAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors MemberNotNullWhenAttribute(bool, string) public MemberNotNullWhenAttribute(bool value, string member) Parameters value bool member string"
  },
  "api/RTCube.Extensions.Support.MustDisposeResourceAttribute.html": {
    "href": "api/RTCube.Extensions.Support.MustDisposeResourceAttribute.html",
    "title": "Class MustDisposeResourceAttribute | RTCubeExtensions 文档",
    "keywords": "Class MustDisposeResourceAttribute Namespace RTCube.Extensions.Support Specifies that the caller must be disposed of the return value. [Version(1, 0, 0)] public class MustDisposeResourceAttribute : Attribute Inheritance object Attribute MustDisposeResourceAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.Support.PlaceHolderAttribute.html": {
    "href": "api/RTCube.Extensions.Support.PlaceHolderAttribute.html",
    "title": "Class PlaceHolderAttribute | RTCubeExtensions 文档",
    "keywords": "Class PlaceHolderAttribute Namespace RTCube.Extensions.Support Used to mark entities that are implemented in newer versions of .Net, Unity, or Rider. [Version(1, 0, 0)] public class PlaceHolderAttribute : Attribute Inheritance object Attribute PlaceHolderAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks Placeholders are used to make the code easier to compile for different platforms. No attempt is made to mimic the actual behavior of the entities they represent, and therefore placeholders are used for entities that do not typically affect the execution of the application. These are often attributes used to guide code-analysers."
  },
  "api/RTCube.Extensions.Support.SuppressReason.html": {
    "href": "api/RTCube.Extensions.Support.SuppressReason.html",
    "title": "Class SuppressReason | RTCubeExtensions 文档",
    "keywords": "Class SuppressReason Namespace RTCube.Extensions.Support [Version(1, 0, 0)] public class SuppressReason Inheritance object SuppressReason Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Fields EditorInternal This is for things that are exposed for the editor, and have non-conforming names such as __message to discourage use. public const string EditorInternal = \"Editor internal, do not use.\" Field Value string IntentionalFloatingPointComparison Used to justify comparing floats with ==. public const string IntentionalFloatingPointComparison = \"Intnetional floating point comparison.\" Field Value string NameHasMath Used to justify names such as Matrix4x4. public const string NameHasMath = \"Name has math parts.\" Field Value string NeedUnitTests Used to (temporarily) justify very complex methods. public const string NeedUnitTests = \"Need unit tests before we can refactor.\" Field Value string SwitchCannotBeSimplified This is for marking methods that contains giant switch statements that cannot be reasonably be simplified. public const string SwitchCannotBeSimplified = \"Switch cannot be simplified.\" Field Value string Remarks In some cases giant switch statements can be simplified by the use of dictionaries, in which case that refactoring should be done and this justification cannot be used. However, if this would result in the dictionary containing a bunch of lambda expressions, it is better to leave the switch statement, and use this justification to suppress the warning if necessary."
  },
  "api/RTCube.Extensions.Support.Warning.html": {
    "href": "api/RTCube.Extensions.Support.Warning.html",
    "title": "Class Warning | RTCubeExtensions 文档",
    "keywords": "Class Warning Namespace RTCube.Extensions.Support This class contains strings used to justify suppressions of warnings. [Version(1, 0, 0)] [Obsolete(\"Use SuppressReason instead.\")] public static class Warning Inheritance object Warning Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields EditorInternal This is for things that are exposed for the editor, and have non-conforming names such as __message to discourage use. public const string EditorInternal = \"Editor internal, do not use.\" Field Value string IntentionalFloatingPointComparison Used to justify comparing floats with ==. public const string IntentionalFloatingPointComparison = \"Intnetional floating point comparison.\" Field Value string NameHasMath Used to justify names such as Matrix4x4. public const string NameHasMath = \"Name has math parts.\" Field Value string NeedUnitTests Used to (temporarily) justify very complex methods. public const string NeedUnitTests = \"Need unit tests before we can refactor.\" Field Value string"
  },
  "api/RTCube.Extensions.Support.html": {
    "href": "api/RTCube.Extensions.Support.html",
    "title": "Namespace RTCube.Extensions.Support | RTCubeExtensions 文档",
    "keywords": "Namespace RTCube.Extensions.Support Classes Branding Provides a set of colors that can be used for branding, mostly to be used in examples. Branding.Hex Provides the branding color's Hex values. DoesNotReturn Specifies that a method will never return under any circumstance. MemberNotNullWhenAttribute Specifies that the method or property will ensure that the listed field and property members have non-null values when returning with the specified return value condition. MustDisposeResourceAttribute Specifies that the caller must be disposed of the return value. PlaceHolderAttribute Used to mark entities that are implemented in newer versions of .Net, Unity, or Rider. SuppressReason Warning This class contains strings used to justify suppressions of warnings."
  },
  "api/RTCube.Extensions.TagPopupAttribute.html": {
    "href": "api/RTCube.Extensions.TagPopupAttribute.html",
    "title": "Class TagPopupAttribute | RTCubeExtensions 文档",
    "keywords": "Class TagPopupAttribute Namespace RTCube.Extensions An attribute used to mark a string field that should be drawn as a popup list of tags in the Unity editor. [Version(1, 0, 0)] public class TagPopupAttribute : PopupListAttribute Inheritance object PopupListAttribute TagPopupAttribute Inherited Members PopupListAttribute.PopupListData PopupListAttribute.RetrievalMethod Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors TagPopupAttribute() Marks a string field that should be drawn as a popup list containing the tags defined in the Unity project. public TagPopupAttribute()"
  },
  "api/RTCube.Extensions.ThrowHelper.html": {
    "href": "api/RTCube.Extensions.ThrowHelper.html",
    "title": "Class ThrowHelper | RTCubeExtensions 文档",
    "keywords": "Class ThrowHelper Namespace RTCube.Extensions Class that provides helper methods for throwing exceptions. [Version(1, 0, 0)] public static class ThrowHelper Inheritance object ThrowHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ThrowIfNegative(int, string) Throws a ArgumentOutOfRange exception if the integer is negative. public static void ThrowIfNegative(this int argument, string argName) Parameters argument int The integer to check. argName string The name of the argument. Exceptions ArgumentOutOfRangeException ThrowIfNegative(float, string) Throws a ArgumentOutOfRange exception if the float is negative. public static void ThrowIfNegative(this float argument, string argName) Parameters argument float The float to check. argName string The name of the argument. Exceptions ArgumentOutOfRangeException ThrowIfNull(object, string) Throws a NullReferenceException if the given argument is null. public static void ThrowIfNull(this object argument, string argName) Parameters argument object An argument to check. argName string The name of the argument. Exceptions ArgumentNullException ThrowIfOutOfRange(int, int, int, string) Throws a ArgumentOutOfRange exception if the integer is out of range. public static void ThrowIfOutOfRange(this int argument, int minInclusive, int maxExclusive, string argName) Parameters argument int The integer to check. minInclusive int The minimum value of the range, included. maxExclusive int The maximum value of the range, not included. argName string The name of the argument."
  },
  "api/RTCube.Extensions.TimedStateTracker-1.html": {
    "href": "api/RTCube.Extensions.TimedStateTracker-1.html",
    "title": "Class TimedStateTracker<TStateData> | RTCubeExtensions 文档",
    "keywords": "Class TimedStateTracker<TStateData> Namespace RTCube.Extensions The same as StateTracker, but states can also time out. public class TimedStateTracker<TStateData> Type Parameters TStateData The type of the t state data. Inheritance object TimedStateTracker<TStateData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks Time-outs are managed by this class: when the state times out, it is stopped, and an event is raised. This tracker must be updated (typically in a mono-behaviour Update method). Constructors TimedStateTracker() Initializes a new instance of the TimedStateTracker<TStateData> class. public TimedStateTracker() Properties ActiveTokens Returns all the active tokens: tokens returned when states has been started that has not yet been stopped. public IEnumerable<IStateToken<TStateData>> ActiveTokens { get; } Property Value IEnumerable<IStateToken<TStateData>> The active tokens. IsActive Gets a value indicating whether this tracker is active, that is, whether any state has been started that has not been stopped. public bool IsActive { get; } Property Value bool true if this tracker is active; otherwise, false. IsPaused Gets a value indicating whether this tracker is paused. public bool IsPaused { get; } Property Value bool true if this tracker is paused; otherwise, false. Methods Pause() Pauses this tracker. public void Pause() Remarks When paused, the time for timeouts is not advanced. StartState(TStateData, float) Starts a state, and returns a token that can be used to stop it again. public IStateToken<TStateData> StartState(TStateData stateData, float maxTime) Parameters stateData TStateData Custom state data. This is useful in cases where all the active states needs to be examined. For example, this data can be used to identify states externally. maxTime float The maximum amount of time this state should survive past the current time. Returns IStateToken<TStateData> A token that wraps the custom state data and can be used to stop the state started with this method. Remarks For a state to time out, it is necessary for the Update method to be called regularly (for example, in a MonoBehaviours Update method). StartState(TStateData, float, Action) Starts a state, and returns a token that can be used to stop it again. public IStateToken<TStateData> StartState(TStateData stateData, float maxTime, Action onTimeOut) Parameters stateData TStateData Custom state data. This is useful in cases where all the active states needs to be examined. For example, this data can be used to identify states externally. maxTime float The maximum amount of time this state should survive past the current time. onTimeOut Action The action to perform when timing out. Returns IStateToken<TStateData> A token that wraps the custom state data and can be used to stop the state started with this method. Remarks For a state to time out, it is necessary for the Update method to be called regularly (for example, in a MonoBehaviours Update method). StopState(IStateToken<TStateData>) Stops the state associated with the token. The token must be one that was returned when the state was started. public void StopState(IStateToken<TStateData> token) Parameters token IStateToken<TStateData> The token of the state to stop. Exceptions ArgumentNullException token InvalidOperationException The given token is not from this state tracker or the given token is not active Unpause() Unpauses this tracker. public void Unpause() Update(float) Updates this tracker with the specified current time. public void Update(float deltaTime) Parameters deltaTime float The current delta time. Events OnStateActive Occurs when this tracker is inactive and a state is started (so that this tracker becomes active). public event Action OnStateActive Event Type Action OnStateInactive Occurs when all active states are stopped, that is, when this tracker is active and becomes inactive. public event Action OnStateInactive Event Type Action"
  },
  "api/RTCube.Extensions.TransformExtensions.html": {
    "href": "api/RTCube.Extensions.TransformExtensions.html",
    "title": "Class TransformExtensions | RTCubeExtensions 文档",
    "keywords": "Class TransformExtensions Namespace RTCube.Extensions Contains useful extensions for Select. [Version(1, 0, 0)] public static class TransformExtensions Inheritance object TransformExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DestroyChildren(Transform) public static void DestroyChildren(this Transform transform) Parameters transform Transform DestroyChildrenImmediate(Transform) public static void DestroyChildrenImmediate(this Transform transform) Parameters transform Transform DestroyChildrenUniversal(Transform) public static void DestroyChildrenUniversal(this Transform transform) Parameters transform Transform FlipPositive(Transform) Sets all scale values to the absolute values. public static void FlipPositive(this Transform transform) Parameters transform Transform FlipX(Transform) Negates the X scale. public static void FlipX(this Transform transform) Parameters transform Transform FlipXY(Transform) Negates the X and Y scale. public static void FlipXY(this Transform transform) Parameters transform Transform FlipXYZ(Transform) Negates the X, Y and Z scale. public static void FlipXYZ(this Transform transform) Parameters transform Transform FlipXZ(Transform) Negates the X and Z scale. public static void FlipXZ(this Transform transform) Parameters transform Transform FlipY(Transform) Negates the Y scale. public static void FlipY(this Transform transform) Parameters transform Transform FlipYZ(Transform) Negates the Y and Z scale. public static void FlipYZ(this Transform transform) Parameters transform Transform FlipZ(Transform) Negates the Z scale. public static void FlipZ(this Transform transform) Parameters transform Transform GetChildren(Transform) public static List<Transform> GetChildren(this Transform transform) Parameters transform Transform Returns List<Transform> Reset(Transform) Resets the position, rotation, and local scale. public static void Reset(this Transform transform) Parameters transform Transform ResetLocal(Transform) Resets the ;local position, local rotation, and local scale. public static void ResetLocal(this Transform transform) Parameters transform Transform ResetLocalPosition(Transform) Sets the local position to 0, 0, 0. public static void ResetLocalPosition(this Transform transform) Parameters transform Transform ResetLocalRotation(Transform) Resets the local rotation to 0, 0, 0. public static void ResetLocalRotation(this Transform transform) Parameters transform Transform ResetPosition(Transform) Sets the position to 0, 0, 0. public static void ResetPosition(this Transform transform) Parameters transform Transform ResetRotation(Transform) Resets the rotation to 0, 0, 0. public static void ResetRotation(this Transform transform) Parameters transform Transform ResetScale(Transform) Resets the local scale of this transform in to 1 1 1. public static void ResetScale(this Transform transform) Parameters transform Transform RotateAroundX(Transform, float) Rotates the transform around the X axis. public static void RotateAroundX(this Transform transform, float angle) Parameters transform Transform angle float RotateAroundY(Transform, float) Rotates the transform around the Y axis. public static void RotateAroundY(this Transform transform, float angle) Parameters transform Transform angle float RotateAroundZ(Transform, float) Rotates the transform around the Z axis. public static void RotateAroundZ(this Transform transform, float angle) Parameters transform Transform angle float ScaleByX(Transform, float) Scale this transform in the X direction. public static void ScaleByX(this Transform transform, float x) Parameters transform Transform x float ScaleByXY(Transform, float) Scale this transform in the X and Y directions. public static void ScaleByXY(this Transform transform, float r) Parameters transform Transform r float ScaleByXY(Transform, float, float) Scale this transform in the X, Y direction. public static void ScaleByXY(this Transform transform, float x, float y) Parameters transform Transform x float y float ScaleByXYZ(Transform, float) Scale this transform in the X, Y and Z directions. public static void ScaleByXYZ(this Transform transform, float r) Parameters transform Transform r float ScaleByXYZ(Transform, float, float, float) Scale this transform in the X, Y and Z directions. public static void ScaleByXYZ(this Transform transform, float x, float y, float z) Parameters transform Transform x float y float z float ScaleByXZ(Transform, float) Scale this transform in the X and Z directions. public static void ScaleByXZ(this Transform transform, float r) Parameters transform Transform r float ScaleByXZ(Transform, float, float) Scale this transform in the X, Z directions. public static void ScaleByXZ(this Transform transform, float x, float z) Parameters transform Transform x float z float ScaleByY(Transform, float) Scale this transform in the Y direction. public static void ScaleByY(this Transform transform, float y) Parameters transform Transform y float ScaleByYZ(Transform, float) Scale this transform in the Y and Z directions. public static void ScaleByYZ(this Transform transform, float r) Parameters transform Transform r float ScaleByYZ(Transform, float, float) Scale this transform in the Y and Z directions. public static void ScaleByYZ(this Transform transform, float y, float z) Parameters transform Transform y float z float ScaleByZ(Transform, float) Scale this transform in the Z direction. public static void ScaleByZ(this Transform transform, float z) Parameters transform Transform z float SelfAndAllChildren(Transform) A lazy enumerable of this objects transform, and all it's children down the hierarchy. public static IEnumerable<Transform> SelfAndAllChildren(this Transform transform) Parameters transform Transform Returns IEnumerable<Transform> SetLocalRotationX(Transform, float) Sets the local X rotation. public static void SetLocalRotationX(this Transform transform, float angle) Parameters transform Transform angle float SetLocalRotationY(Transform, float) Sets the local Y rotation. public static void SetLocalRotationY(this Transform transform, float angle) Parameters transform Transform angle float SetLocalRotationZ(Transform, float) Sets the local Z rotation. public static void SetLocalRotationZ(this Transform transform, float angle) Parameters transform Transform angle float SetLocalX(Transform, float) Sets the local X position of this transform. public static void SetLocalX(this Transform transform, float x) Parameters transform Transform x float SetLocalXY(Transform, float, float) Sets the local X and Y position of this transform. public static void SetLocalXY(this Transform transform, float x, float y) Parameters transform Transform x float y float SetLocalXYZ(Transform, float, float, float) Sets the local X, Y and Z position of this transform. public static void SetLocalXYZ(this Transform transform, float x, float y, float z) Parameters transform Transform x float y float z float SetLocalXZ(Transform, float, float) Sets the local X and Z position of this transform. public static void SetLocalXZ(this Transform transform, float x, float z) Parameters transform Transform x float z float SetLocalY(Transform, float) Sets the local Y position of this transform. public static void SetLocalY(this Transform transform, float y) Parameters transform Transform y float SetLocalYZ(Transform, float, float) Sets the local Y and Z position of this transform. public static void SetLocalYZ(this Transform transform, float y, float z) Parameters transform Transform y float z float SetLocalZ(Transform, float) Sets the local Z position of this transform. public static void SetLocalZ(this Transform transform, float z) Parameters transform Transform z float SetRotationX(Transform, float) Sets the X rotation. public static void SetRotationX(this Transform transform, float angle) Parameters transform Transform angle float SetRotationY(Transform, float) Sets the Y rotation. public static void SetRotationY(this Transform transform, float angle) Parameters transform Transform angle float SetRotationZ(Transform, float) Sets the Z rotation. public static void SetRotationZ(this Transform transform, float angle) Parameters transform Transform angle float SetScaleX(Transform, float) Sets the local X scale of this transform. public static void SetScaleX(this Transform transform, float x) Parameters transform Transform x float SetScaleXY(Transform, float, float) Sets the local X and Y scale of this transform. public static void SetScaleXY(this Transform transform, float x, float y) Parameters transform Transform x float y float SetScaleXYZ(Transform, float, float, float) Sets the local X, Y and Z scale of this transform. public static void SetScaleXYZ(this Transform transform, float x, float y, float z) Parameters transform Transform x float y float z float SetScaleXZ(Transform, float, float) Sets the local X and Z scale of this transform. public static void SetScaleXZ(this Transform transform, float x, float z) Parameters transform Transform x float z float SetScaleY(Transform, float) Sets the local Y scale of this transform. public static void SetScaleY(this Transform transform, float y) Parameters transform Transform y float SetScaleYZ(Transform, float, float) Sets the local Y and Z scale of this transform. public static void SetScaleYZ(this Transform transform, float y, float z) Parameters transform Transform y float z float SetScaleZ(Transform, float) Sets the local Z scale of this transform. public static void SetScaleZ(this Transform transform, float z) Parameters transform Transform z float SetX(Transform, float) Sets the X position of this transform. public static void SetX(this Transform transform, float x) Parameters transform Transform x float SetXY(Transform, float, float) Sets the X and Y position of this transform. public static void SetXY(this Transform transform, float x, float y) Parameters transform Transform x float y float SetXYZ(Transform, float, float, float) Sets the X, Y and Z position of this transform. public static void SetXYZ(this Transform transform, float x, float y, float z) Parameters transform Transform x float y float z float SetXZ(Transform, float, float) Sets the X and Z position of this transform. public static void SetXZ(this Transform transform, float x, float z) Parameters transform Transform x float z float SetY(Transform, float) Sets the Y position of this transform. public static void SetY(this Transform transform, float y) Parameters transform Transform y float SetYZ(Transform, float, float) Sets the Y and Z position of this transform. public static void SetYZ(this Transform transform, float y, float z) Parameters transform Transform y float z float SetZ(Transform, float) Sets the Z position of this transform. public static void SetZ(this Transform transform, float z) Parameters transform Transform z float Sort(Transform, Func<Transform, IComparable>) public static void Sort(this Transform transform, Func<Transform, IComparable> sortFunction) Parameters transform Transform sortFunction Func<Transform, IComparable> SortAlphabetically(Transform) public static void SortAlphabetically(this Transform transform) Parameters transform Transform TranslateX(Transform, float) Translates this transform along the X axis. public static void TranslateX(this Transform transform, float x) Parameters transform Transform x float TranslateXY(Transform, float, float) Translates this transform along the X and Y axes. public static void TranslateXY(this Transform transform, float x, float y) Parameters transform Transform x float y float TranslateXYZ(Transform, float, float, float) Translates this transform along the X, Y and Z axis. public static void TranslateXYZ(this Transform transform, float x, float y, float z) Parameters transform Transform x float y float z float TranslateXZ(Transform, float, float) Translates this transform along the X and Z axes. public static void TranslateXZ(this Transform transform, float x, float z) Parameters transform Transform x float z float TranslateY(Transform, float) Translates this transform along the Y axis. public static void TranslateY(this Transform transform, float y) Parameters transform Transform y float TranslateYZ(Transform, float, float) Translates this transform along the Y and Z axes. public static void TranslateYZ(this Transform transform, float y, float z) Parameters transform Transform y float z float TranslateZ(Transform, float) Translates this transform along the Z axis. public static void TranslateZ(this Transform transform, float z) Parameters transform Transform z float WithIndices(Transform) public static IEnumerable<(Transform, int)> WithIndices(this Transform transform) Parameters transform Transform Returns IEnumerable<(Transform, int)>"
  },
  "api/RTCube.Extensions.TypeArgumentException.html": {
    "href": "api/RTCube.Extensions.TypeArgumentException.html",
    "title": "Class TypeArgumentException | RTCubeExtensions 文档",
    "keywords": "Class TypeArgumentException Namespace RTCube.Extensions Thrown when a method is called with illegal type parameters, or a class is constructed with illegal type parameters. public class TypeArgumentException : Exception, ISerializable Inheritance object Exception TypeArgumentException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks Normally, it is preferable to use type constraints, but in some cases this is not possible. This exception can be thrown in such cases. Constructors TypeArgumentException(string) public TypeArgumentException(string message) Parameters message string TypeArgumentException(string, string) public TypeArgumentException(string parameterName, string message) Parameters parameterName string message string Fields parameterName public readonly string parameterName Field Value string"
  },
  "api/RTCube.Extensions.UnityGameObjectPool.html": {
    "href": "api/RTCube.Extensions.UnityGameObjectPool.html",
    "title": "Class UnityGameObjectPool | RTCubeExtensions 文档",
    "keywords": "Class UnityGameObjectPool Namespace RTCube.Extensions public abstract class UnityGameObjectPool : IDisposable Inheritance object UnityGameObjectPool Implements IDisposable Derived MappingGameObjectPool<Key> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Fields m_Pool protected IObjectPool<GameObject> m_Pool Field Value IObjectPool<GameObject> Properties assetPath protected abstract string assetPath { get; } Property Value string collectionChecks public virtual bool collectionChecks { get; } Property Value bool defaultCap protected virtual int defaultCap { get; } Property Value int maxCount protected virtual int maxCount { get; } Property Value int parent public Transform parent { get; } Property Value Transform parentName protected abstract string parentName { get; } Property Value string Methods CreatePooledItem() protected virtual GameObject CreatePooledItem() Returns GameObject Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public virtual void Dispose() Get() public virtual GameObject Get() Returns GameObject Init() public virtual void Init() Init(Transform) public virtual void Init(Transform parent) Parameters parent Transform Release(GameObject) public virtual void Release(GameObject obj) Parameters obj GameObject"
  },
  "api/RTCube.Extensions.UnityGameObjectPoolGroups-1.html": {
    "href": "api/RTCube.Extensions.UnityGameObjectPoolGroups-1.html",
    "title": "Class UnityGameObjectPoolGroups<Key> | RTCubeExtensions 文档",
    "keywords": "Class UnityGameObjectPoolGroups<Key> Namespace RTCube.Extensions public abstract class UnityGameObjectPoolGroups<Key> : IDisposable Type Parameters Key Inheritance object UnityGameObjectPoolGroups<Key> Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ThrowHelper.ThrowIfNull(object, string) Fields go protected GameObject go Field Value GameObject parent protected Transform parent Field Value Transform Properties assetPaths protected abstract Dictionary<Key, string> assetPaths { get; set; } Property Value Dictionary<Key, string> parentName protected abstract string parentName { get; } Property Value string Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public virtual void Dispose() Get(Key) public virtual GameObject Get(Key key) Parameters key Key Returns GameObject Init() public virtual void Init() Release(Key, GameObject) public virtual void Release(Key key, GameObject obj) Parameters key Key obj GameObject"
  },
  "api/RTCube.Extensions.UnsafePool-1.html": {
    "href": "api/RTCube.Extensions.UnsafePool-1.html",
    "title": "Class UnsafePool<T> | RTCubeExtensions 文档",
    "keywords": "Class UnsafePool<T> Namespace RTCube.Extensions An unsafe pool class that is used for benchmarking. public class UnsafePool<T> : IPool<T> Type Parameters T Inheritance object UnsafePool<T> Implements IPool<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PoolExtensions.Clear<T>(IPool<T>, bool) PoolExtensions.SetCapacity<T>(IPool<T>, int, bool) PoolExtensions.Trim<T>(IPool<T>) PoolExtensions.TryGet<T>(IPool<T>, out T) ThrowHelper.ThrowIfNull(object, string) Remarks For the most part, this class works similar to Pool<T>, except that it does not keep references to active objects, so when they are released no checks as to their validity is performed. Also, ReleaseAll() is not supported, and DecreaseCapacity(int, bool) cannot drecrease the capacity below the number of currently inactive objects. In general, you should use a HashPool<T>; this unsafe pool os only very marginally faster. Constructors UnsafePool(int, Func<T>, Action<T>, Action<T>, Action<T>) public UnsafePool(int initialCapacity, Func<T> create, Action<T> destroy = null, Action<T> activate = null, Action<T> deactivate = null) Parameters initialCapacity int create Func<T> destroy Action<T> activate Action<T> deactivate Action<T> Properties ActiveCount The number of objects that are currently active. public int ActiveCount { get; } Property Value int Capacity The total number of objects in the pool (active and inactive), the maximum number of objects that can be returned by Get(). public int Capacity { get; } Property Value int The capacity. HasAvailableObject Returns whether there is an inactive object available to get. public bool HasAvailableObject { get; } Property Value bool true if an inactive object is available; otherwise, false. Methods DecreaseCapacity(int, bool) Decreases the capacity of the pool. public int DecreaseCapacity(int decrement, bool deactivateFirst = false) Parameters decrement int The number of pool objects to destroy. deactivateFirst bool Whether to deactivate objects before destroying them. Since this pool does not keep track of active objects, no active objects will be destroyed, so this parameter is not relevant. Returns int The number of objects that were destroyed. Remarks This method will not decrease the capacity below the number of currently inactive objects, in other words active objects will not be destroyed. Therefor, deactivateFirst is not relevant. Get() Gets a new object from the pool. public T Get() Returns T A freshly activated object. Exceptions InvalidOperationException No inactive objects are available. IncreaseCapacity(int) Increases the capacity of the pool. public void IncreaseCapacity(int increment) Parameters increment int The number of new pool objects to add. Exceptions ArgumentOutOfRangeException increment is negative. Release(T) Returns the object to the pool. public void Release(T obj) Parameters obj T The object to return to the pool. Remarks This method does not check if the object is already inactive, and will not deactivate it if it is. This method will also not check if this object does not belong in the pool at all (that is, was never acquired from this), and will not throw an exception if this is the case. Exceptions InvalidOperationException The pool is full. ReleaseAll() public void ReleaseAll() Exceptions NotSupportedException"
  },
  "api/RTCube.Extensions.ValidateMatchRegularExpressionAttribute.html": {
    "href": "api/RTCube.Extensions.ValidateMatchRegularExpressionAttribute.html",
    "title": "Class ValidateMatchRegularExpressionAttribute | RTCubeExtensions 文档",
    "keywords": "Class ValidateMatchRegularExpressionAttribute Namespace RTCube.Extensions Marks a string field to indicate it should match a regular expression. [AttributeUsage(AttributeTargets.Field)] [Version(1, 0, 0)] public class ValidateMatchRegularExpressionAttribute : ValidationAttribute Inheritance object ValidationAttribute ValidateMatchRegularExpressionAttribute Derived ValidateNotWhiteSpaceOrEmpty Inherited Members ValidationAttribute.ForceValue ValidationAttribute.WarnInConsole ValidationAttribute.WarnInInspector ValidationAttribute.Message ValidationAttribute.Color ValidationAttribute.HexColor Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors ValidateMatchRegularExpressionAttribute(string) Initializes a new instance of the ValidateMatchRegularExpressionAttribute class. public ValidateMatchRegularExpressionAttribute(string pattern) Parameters pattern string The regular expression pattern to match."
  },
  "api/RTCube.Extensions.ValidateNotEmptyAttribute.html": {
    "href": "api/RTCube.Extensions.ValidateNotEmptyAttribute.html",
    "title": "Class ValidateNotEmptyAttribute | RTCubeExtensions 文档",
    "keywords": "Class ValidateNotEmptyAttribute Namespace RTCube.Extensions Marks a string field that should not be empty. [Version(1, 0, 0)] public class ValidateNotEmptyAttribute : ValidationAttribute Inheritance object ValidationAttribute ValidateNotEmptyAttribute Inherited Members ValidationAttribute.ForceValue ValidationAttribute.WarnInConsole ValidationAttribute.WarnInInspector ValidationAttribute.Message ValidationAttribute.Color ValidationAttribute.HexColor Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors ValidateNotEmptyAttribute() public ValidateNotEmptyAttribute()"
  },
  "api/RTCube.Extensions.ValidateNotNegativeAttribute.html": {
    "href": "api/RTCube.Extensions.ValidateNotNegativeAttribute.html",
    "title": "Class ValidateNotNegativeAttribute | RTCubeExtensions 文档",
    "keywords": "Class ValidateNotNegativeAttribute Namespace RTCube.Extensions Attribute used to mark fields that should not be negative. [AttributeUsage(AttributeTargets.Field)] [Version(1, 0, 0)] public class ValidateNotNegativeAttribute : ValidationAttribute Inheritance object ValidationAttribute ValidateNotNegativeAttribute Derived NonNegativeAttribute Inherited Members ValidationAttribute.ForceValue ValidationAttribute.WarnInConsole ValidationAttribute.WarnInInspector ValidationAttribute.Message ValidationAttribute.Color ValidationAttribute.HexColor Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks Can be applied to int and float fields."
  },
  "api/RTCube.Extensions.ValidateNotNullAttribute.html": {
    "href": "api/RTCube.Extensions.ValidateNotNullAttribute.html",
    "title": "Class ValidateNotNullAttribute | RTCubeExtensions 文档",
    "keywords": "Class ValidateNotNullAttribute Namespace RTCube.Extensions Attribute used to mark fields that should not be null. [AttributeUsage(AttributeTargets.Field)] [Version(1, 0, 0)] public class ValidateNotNullAttribute : ValidationAttribute Inheritance object ValidationAttribute ValidateNotNullAttribute Derived WarningIfNullAttribute Inherited Members ValidationAttribute.ForceValue ValidationAttribute.WarnInConsole ValidationAttribute.WarnInInspector ValidationAttribute.Message ValidationAttribute.Color ValidationAttribute.HexColor Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors ValidateNotNullAttribute() public ValidateNotNullAttribute()"
  },
  "api/RTCube.Extensions.ValidateNotWhiteSpaceOrEmpty.html": {
    "href": "api/RTCube.Extensions.ValidateNotWhiteSpaceOrEmpty.html",
    "title": "Class ValidateNotWhiteSpaceOrEmpty | RTCubeExtensions 文档",
    "keywords": "Class ValidateNotWhiteSpaceOrEmpty Namespace RTCube.Extensions Marks a string field that should not be empty or whitespace. [Version(1, 0, 0)] public class ValidateNotWhiteSpaceOrEmpty : ValidateMatchRegularExpressionAttribute Inheritance object ValidationAttribute ValidateMatchRegularExpressionAttribute ValidateNotWhiteSpaceOrEmpty Inherited Members ValidationAttribute.ForceValue ValidationAttribute.WarnInConsole ValidationAttribute.WarnInInspector ValidationAttribute.Message ValidationAttribute.Color ValidationAttribute.HexColor Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors ValidateNotWhiteSpaceOrEmpty() public ValidateNotWhiteSpaceOrEmpty()"
  },
  "api/RTCube.Extensions.ValidatePositiveAttribute.html": {
    "href": "api/RTCube.Extensions.ValidatePositiveAttribute.html",
    "title": "Class ValidatePositiveAttribute | RTCubeExtensions 文档",
    "keywords": "Class ValidatePositiveAttribute Namespace RTCube.Extensions Attribute used to mark fields that should be positive. [AttributeUsage(AttributeTargets.Field)] [Version(1, 0, 0)] public class ValidatePositiveAttribute : ValidationAttribute Inheritance object ValidationAttribute ValidatePositiveAttribute Derived PositiveAttribute Inherited Members ValidationAttribute.ForceValue ValidationAttribute.WarnInConsole ValidationAttribute.WarnInInspector ValidationAttribute.Message ValidationAttribute.Color ValidationAttribute.HexColor Extension Methods ThrowHelper.ThrowIfNull(object, string) Constructors ValidatePositiveAttribute() Initializes a new instance of the ValidatePositiveAttribute class. public ValidatePositiveAttribute()"
  },
  "api/RTCube.Extensions.ValidateRangeAttribute.html": {
    "href": "api/RTCube.Extensions.ValidateRangeAttribute.html",
    "title": "Class ValidateRangeAttribute | RTCubeExtensions 文档",
    "keywords": "Class ValidateRangeAttribute Namespace RTCube.Extensions Attribute used to mark fields that should have a specific range. [AttributeUsage(AttributeTargets.Field)] [Version(1, 0, 0)] public class ValidateRangeAttribute : ValidationAttribute Inheritance object ValidationAttribute ValidateRangeAttribute Inherited Members ValidationAttribute.ForceValue ValidationAttribute.WarnInConsole ValidationAttribute.WarnInInspector ValidationAttribute.Message ValidationAttribute.Color ValidationAttribute.HexColor Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks Works fields of type int and float. Constructors ValidateRangeAttribute(float, float) public ValidateRangeAttribute(float min, float max) Parameters min float max float"
  },
  "api/RTCube.Extensions.ValidationAttribute.html": {
    "href": "api/RTCube.Extensions.ValidationAttribute.html",
    "title": "Class ValidationAttribute | RTCubeExtensions 文档",
    "keywords": "Class ValidationAttribute Namespace RTCube.Extensions The base class for properties that can be validated. [AttributeUsage(AttributeTargets.Field)] [Version(1, 0, 0)] public abstract class ValidationAttribute : PropertyAttribute Inheritance object ValidationAttribute Derived ValidateMatchRegularExpressionAttribute ValidateNotEmptyAttribute ValidateNotNegativeAttribute ValidateNotNullAttribute ValidatePositiveAttribute ValidateRangeAttribute Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks The default behaviour is determined by booleans in PropertyDrawerData: ForceValue, WarnInConsole, and WarnInInspector, but can be overriden for an attribute by setting the properties define in this attribute: ForceValue, WarnInConsole, and WarnInInspector. And since these properties are public, they can be set by the attribute user to override them for a specific field. This attribute may be applied to multiple types. It is up to subclasses to use the right implement the methods correctly for the types that apply. Custom System.SerializableAttribute types are not supported, and an error will be thrown in the editor when you apply this attribute to a field of a custom type. See Property Drawers for more details. Properties Color Gets and sets the color to use when drawing the property in the inspector when the value is invalid. public Color Color { get; protected set; } Property Value Color Remarks Only effective when not being forced, and WarnInInspector is true. ForceValue Gets and sets whether to force the value to be valid, provided the attributes allows it. public bool ForceValue { get; set; } Property Value bool HexColor Gets and sets the color to use when drawing the property in the inspector when the value is invalid. public string HexColor { get; set; } Property Value string Remarks Only effective when not being forced, and WarnInInspector is true. See ParseHex(string) for details on the format of the string. Message Gets and set the message to display in the inspector or console when the value is invalid. public string Message { get; set; } Property Value string Remarks Only effective when not being forced, and WarnInConsole or WarnInInspector is true. WarnInConsole Gets and sets whether to warn in the console when a value is invalid. public bool WarnInConsole { get; set; } Property Value bool Remarks Only effective when not being forced. WarnInInspector Gets and sets whether to warn in the inspector when a value is invalid. public bool WarnInInspector { get; set; } Property Value bool Remarks Only effective when not being forced."
  },
  "api/RTCube.Extensions.ValueSnapshot-1.html": {
    "href": "api/RTCube.Extensions.ValueSnapshot-1.html",
    "title": "Class ValueSnapshot<T> | RTCubeExtensions 文档",
    "keywords": "Class ValueSnapshot<T> Namespace RTCube.Extensions Represents a snapshot of a value, capturing its current and previous states. [Version(1, 0, 0)] public class ValueSnapshot<T> Type Parameters T The type of the value being tracked. Inheritance object ValueSnapshot<T> Derived Differentiator ObservedValue<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ThrowHelper.ThrowIfNull(object, string) Remarks This type is mostly useful as a base for other types. See for example ObservedValue<T>. Constructors ValueSnapshot() Initializes a new instance of the ValueSnapshot<T> class. public ValueSnapshot() ValueSnapshot(T) Initializes a new instance of the ValueSnapshot<T> class with an initial value. public ValueSnapshot(T initialValue) Parameters initialValue T The initial value to set. Properties HasPreviousValue Gets a value indicating whether the Value has been set more than once, and thus has a PreviousValue. [MemberNotNullWhen(true, \"PreviousValue\")] public bool HasPreviousValue { get; } Property Value bool HasValue Gets a value indicating whether the Value has been set. [MemberNotNullWhen(true, \"Value\")] public bool HasValue { get; } Property Value bool PreviousValue Gets the previous value assigned to this snapshot. public T PreviousValue { get; } Property Value T Exceptions InvalidOperationException Thrown when trying to get a previous value that hasn't been set yet. Value Gets or sets the current value of this snapshot. public virtual T Value { get; set; } Property Value T Remarks If this snapshot has been constructed or reset without an initial value, setting the value for the first time will not raise any events. Exceptions InvalidOperationException Thrown when trying to get a value that hasn't been set yet. Methods Reset() Resets the value of this snapshot to its initial state. public void Reset() Remarks HasValue will be false until Value has been assigned. Reset(T) Resets the value of this snapshot with an initial value. public void Reset(T initialValue) Parameters initialValue T The value this snapshot is initialized to. Remarks HasValue will be true, but HasPreviousValue will be false until Value has been assigned again. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RTCube.Extensions.ValuesRetrievalMethod.html": {
    "href": "api/RTCube.Extensions.ValuesRetrievalMethod.html",
    "title": "Enum ValuesRetrievalMethod | RTCubeExtensions 文档",
    "keywords": "Enum ValuesRetrievalMethod Namespace RTCube.Extensions How the values for the popup list should be retrieved. [Version(1, 0, 0)] public enum ValuesRetrievalMethod Extension Methods ThrowHelper.ThrowIfNull(object, string) Fields Func = 2 Retrieved calling a Func<TResult>. FuncKey = 0 Retrieved by calling a Func<TResult> registered with RegisterValuesRetriever<T>(string, Func<IEnumerable<T>>) using a key. Other = 3 Retrieved using a different method. ValueList = 1 Retrieved directly from a list of values."
  },
  "api/RTCube.Extensions.Vector2List.html": {
    "href": "api/RTCube.Extensions.Vector2List.html",
    "title": "Class Vector2List | RTCubeExtensions 文档",
    "keywords": "Class Vector2List Namespace RTCube.Extensions An InspectorList of type Vector2. [Version(1, 0, 0)] [Serializable] public class Vector2List : InspectorList<Vector2>, IList<Vector2>, ICollection<Vector2>, IEnumerable<Vector2>, IEnumerable Inheritance object InspectorList InspectorList<Vector2> Vector2List Implements IList<Vector2> ICollection<Vector2> IEnumerable<Vector2> IEnumerable Inherited Members InspectorList<Vector2>.GetEnumerator() InspectorList<Vector2>.Add(Vector2) InspectorList<Vector2>.AddRange(IEnumerable<Vector2>) InspectorList<Vector2>.Clear() InspectorList<Vector2>.Contains(Vector2) InspectorList<Vector2>.CopyTo(Vector2[], int) InspectorList<Vector2>.Remove(Vector2) InspectorList<Vector2>.Count InspectorList<Vector2>.IsReadOnly InspectorList<Vector2>.IndexOf(Vector2) InspectorList<Vector2>.Insert(int, Vector2) InspectorList<Vector2>.RemoveAt(int) InspectorList<Vector2>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, IComparer<TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int, IComparer<TElement>) CollectionExtensions.IsEmpty<T>(ICollection<T>) PoolExtensions.AddAllAvailableFromPool<T>(ICollection<T>, IPool<T>) PoolExtensions.AddFromPool<T>(ICollection<T>, IPool<T>, int) PoolExtensions.TryAddFromPool<T>(ICollection<T>, IPool<T>, int) CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.FilterByType<T, TFilter>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) CollectionExtensions.FillWithDefault<T>(IList<T>) CollectionExtensions.Fill<T>(IList<T>, T) CollectionExtensions.Shuffle<T>(IList<T>) CollectionExtensions.Shuffle<T>(IList<T>, IRandom) ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.Vector3List.html": {
    "href": "api/RTCube.Extensions.Vector3List.html",
    "title": "Class Vector3List | RTCubeExtensions 文档",
    "keywords": "Class Vector3List Namespace RTCube.Extensions An InspectorList of type Vector3. [Version(1, 0, 0)] [Serializable] public class Vector3List : InspectorList<Vector3>, IList<Vector3>, ICollection<Vector3>, IEnumerable<Vector3>, IEnumerable Inheritance object InspectorList InspectorList<Vector3> Vector3List Implements IList<Vector3> ICollection<Vector3> IEnumerable<Vector3> IEnumerable Inherited Members InspectorList<Vector3>.GetEnumerator() InspectorList<Vector3>.Add(Vector3) InspectorList<Vector3>.AddRange(IEnumerable<Vector3>) InspectorList<Vector3>.Clear() InspectorList<Vector3>.Contains(Vector3) InspectorList<Vector3>.CopyTo(Vector3[], int) InspectorList<Vector3>.Remove(Vector3) InspectorList<Vector3>.Count InspectorList<Vector3>.IsReadOnly InspectorList<Vector3>.IndexOf(Vector3) InspectorList<Vector3>.Insert(int, Vector3) InspectorList<Vector3>.RemoveAt(int) InspectorList<Vector3>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, IComparer<TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int, IComparer<TElement>) CollectionExtensions.IsEmpty<T>(ICollection<T>) PoolExtensions.AddAllAvailableFromPool<T>(ICollection<T>, IPool<T>) PoolExtensions.AddFromPool<T>(ICollection<T>, IPool<T>, int) PoolExtensions.TryAddFromPool<T>(ICollection<T>, IPool<T>, int) CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.FilterByType<T, TFilter>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) CollectionExtensions.FillWithDefault<T>(IList<T>) CollectionExtensions.Fill<T>(IList<T>, T) CollectionExtensions.Shuffle<T>(IList<T>) CollectionExtensions.Shuffle<T>(IList<T>, IRandom) ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.Vector4List.html": {
    "href": "api/RTCube.Extensions.Vector4List.html",
    "title": "Class Vector4List | RTCubeExtensions 文档",
    "keywords": "Class Vector4List Namespace RTCube.Extensions An InspectorList of type Vector4. [Version(1, 0, 0)] [Serializable] public class Vector4List : InspectorList<Vector4>, IList<Vector4>, ICollection<Vector4>, IEnumerable<Vector4>, IEnumerable Inheritance object InspectorList InspectorList<Vector4> Vector4List Implements IList<Vector4> ICollection<Vector4> IEnumerable<Vector4> IEnumerable Inherited Members InspectorList<Vector4>.GetEnumerator() InspectorList<Vector4>.Add(Vector4) InspectorList<Vector4>.AddRange(IEnumerable<Vector4>) InspectorList<Vector4>.Clear() InspectorList<Vector4>.Contains(Vector4) InspectorList<Vector4>.CopyTo(Vector4[], int) InspectorList<Vector4>.Remove(Vector4) InspectorList<Vector4>.Count InspectorList<Vector4>.IsReadOnly InspectorList<Vector4>.IndexOf(Vector4) InspectorList<Vector4>.Insert(int, Vector4) InspectorList<Vector4>.RemoveAt(int) InspectorList<Vector4>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, IComparer<TElement>) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int) CollectionExtensions.BinarySearch<TCollection, TElement>(ICollection<TCollection>, TElement, Func<TCollection, TElement>, int, int, IComparer<TElement>) CollectionExtensions.IsEmpty<T>(ICollection<T>) PoolExtensions.AddAllAvailableFromPool<T>(ICollection<T>, IPool<T>) PoolExtensions.AddFromPool<T>(ICollection<T>, IPool<T>, int) PoolExtensions.TryAddFromPool<T>(ICollection<T>, IPool<T>, int) CollectionExtensions.Aggregate<T>(IEnumerable<T>, Func<T, T, T>, Func<T, T, T>) CollectionExtensions.AsCountable<T>(IEnumerable<T>) CollectionExtensions.AsList<T>(IEnumerable<T>) CollectionExtensions.ButFirst<T>(IEnumerable<T>) CollectionExtensions.ButLast<T>(IEnumerable<T>) CollectionExtensions.FilterByType<T, TFilter>(IEnumerable<T>) CollectionExtensions.HasSameElementsAs<T>(IEnumerable<T>, IEnumerable<T>) CollectionExtensions.HasSingle<T>(IEnumerable<T>) CollectionExtensions.ListToString<T>(IEnumerable<T>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MaxBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MaxItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) CollectionExtensions.MinBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>) CollectionExtensions.MinItemsBy<T, TComparable>(IEnumerable<T>, Func<T, TComparable>, Comparer<TComparable>) CollectionExtensions.RandomItem<T>(IEnumerable<T>) CollectionExtensions.RandomItem<T>(IEnumerable<T>, IRandom) CollectionExtensions.RotateLeft<T>(IEnumerable<T>) CollectionExtensions.RotateRight<T>(IEnumerable<T>) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int) CollectionExtensions.SampleRandom<T>(IEnumerable<T>, int, IRandom) CollectionExtensions.SlidingWindow<T>(IEnumerable<T>, int) CollectionExtensions.TakeHalf<T>(IEnumerable<T>) CollectionExtensions.TakeLast<T>(IEnumerable<T>, int) CollectionExtensions.TryFirst<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryFirst<T>(IEnumerable<T>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, Func<T, bool>, out T) CollectionExtensions.TryLast<T>(IEnumerable<T>, out T) CollectionExtensions.TrySingle<T>(IEnumerable<T>, out T) CollectionExtensions.WithIndices<T>(IEnumerable<T>) Combinatorial.Combinations<T>(IEnumerable<T>, int) Combinatorial.Partitions<T>(IEnumerable<T>) Combinatorial.Permutations<T>(IEnumerable<T>) Combinatorial.PowerSet<T>(IEnumerable<T>) Combinatorial.Tuples<T>(IEnumerable<T>) CollectionExtensions.FillWithDefault<T>(IList<T>) CollectionExtensions.Fill<T>(IList<T>, T) CollectionExtensions.Shuffle<T>(IList<T>) CollectionExtensions.Shuffle<T>(IList<T>, IRandom) ThrowHelper.ThrowIfNull(object, string)"
  },
  "api/RTCube.Extensions.VectorExtensions.html": {
    "href": "api/RTCube.Extensions.VectorExtensions.html",
    "title": "Class VectorExtensions | RTCubeExtensions 文档",
    "keywords": "Class VectorExtensions Namespace RTCube.Extensions Contains useful extension methods for vectors. [Version(1, 0, 0)] public static class VectorExtensions Inheritance object VectorExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ClampMagnitude(Vector4, float) Clamps the vector to the given magnitude. public static Vector4 ClampMagnitude(this Vector4 vector, float maxLength) Parameters vector Vector4 The vector to clamp. maxLength float The maximum length of the vector. Returns Vector4 The clamped vector. Remarks Unity provides ClampMagnitude for Vector2, and Vector3: Vector2.ClampMagnitude and Vector3.ClampMagnitude. This method provides the same functionality for Vector4. Dot(Vector2, Vector2) Equivalent to Vector2.Dot(v1, v2). public static float Dot(this Vector2 vector1, Vector2 vector2) Parameters vector1 Vector2 The first operand. vector2 Vector2 The second operand. Returns float Vector2. Dot(Vector3, Vector3) Equivalent to Vector3.Dot(v1, v2). public static float Dot(this Vector3 vector1, Vector3 vector2) Parameters vector1 Vector3 The first operand. vector2 Vector3 The second operand. Returns float Vector3. Dot(Vector4, Vector4) Equivalent to Vector4.Dot(v1, v2). public static float Dot(this Vector4 vector1, Vector4 vector2) Parameters vector1 Vector4 The first operand. vector2 Vector4 The second operand. Returns float Vector4. HadamardDiv(Vector2, Vector2) Divides one vector component by another. [Version(1, 0, 0)] public static Vector2 HadamardDiv(this Vector2 thisVector, Vector2 otherVector) Parameters thisVector Vector2 otherVector Vector2 Returns Vector2 HadamardDiv(Vector3, Vector3) Divides one vector component by another. [Version(1, 0, 0)] public static Vector3 HadamardDiv(this Vector3 thisVector, Vector3 otherVector) Parameters thisVector Vector3 otherVector Vector3 Returns Vector3 HadamardDiv(Vector4, Vector4) Divides one vector component by another. [Version(1, 0, 0)] public static Vector4 HadamardDiv(this Vector4 thisVector, Vector4 otherVector) Parameters thisVector Vector4 otherVector Vector4 Returns Vector4 HadamardMod(Vector2, Vector2) Multiplies component by component. [Version(1, 0, 0)] public static Vector2 HadamardMod(this Vector2 thisVector, Vector2 otherVector) Parameters thisVector Vector2 The this vector. otherVector Vector2 The other vector. Returns Vector2 HadamardMod(Vector3, Vector3) Multiplies component by component. [Version(1, 0, 0)] public static Vector3 HadamardMod(this Vector3 thisVector, Vector3 otherVector) Parameters thisVector Vector3 The this vector. otherVector Vector3 The other vector. Returns Vector3 HadamardMod(Vector4, Vector4) Multiplies component by component. [Version(1, 0, 0)] public static Vector4 HadamardMod(this Vector4 thisVector, Vector4 otherVector) Parameters thisVector Vector4 The this vector. otherVector Vector4 The other vector. Returns Vector4 HadamardMul(Vector2, Vector2) Multiplies one vector componentwise by another. [Version(1, 0, 0)] public static Vector2 HadamardMul(this Vector2 thisVector, Vector2 otherVector) Parameters thisVector Vector2 otherVector Vector2 Returns Vector2 HadamardMul(Vector3, Vector3) Multiplies one vector component by another. [Version(1, 0, 0)] public static Vector3 HadamardMul(this Vector3 thisVector, Vector3 otherVector) Parameters thisVector Vector3 otherVector Vector3 Returns Vector3 HadamardMul(Vector4, Vector4) Multiplies one vector component by another. [Version(1, 0, 0)] public static Vector4 HadamardMul(this Vector4 thisVector, Vector4 otherVector) Parameters thisVector Vector4 otherVector Vector4 Returns Vector4 Perp(Vector2) Returns the vector rotated 90 degrees counter-clockwise. public static Vector2 Perp(this Vector2 vector) Parameters vector Vector2 Returns Vector2 Remarks The returned vector is always perpendicular to the given vector. The perp dot product can be calculated using this: var perpDotProduct = Vector2.Dot(v1.Perp(), v2); PerpDot(Vector2, Vector2) Equivalent to Vector2.Dot(v1.Perp(), v2). public static float PerpDot(this Vector2 vector1, Vector2 vector2) Parameters vector1 Vector2 The first operand. vector2 Vector2 The second operand. Returns float Vector2. PerpXY(Vector3) Turns the vector 90 degrees anticlockwise as viewed from the front (keeping the z coordinate intact). Equivalent to v.To2DXY().Perp().To3DXY(v.z); public static Vector3 PerpXY(this Vector3 v) Parameters v Vector3 Returns Vector3 PerpXZ(Vector3) Turns the vector 90 degrees anticlockwise as viewed from the top (keeping the y coordinate intact). Equivalent to v.To2DXZ().Perp().To3DXZ(v.y); public static Vector3 PerpXZ(this Vector3 v) Parameters v Vector3 Returns Vector3 Proj(Vector2, Vector2) Returns the projection of this vector onto the given base. public static Vector2 Proj(this Vector2 vector, Vector2 baseVector) Parameters vector Vector2 baseVector Vector2 Returns Vector2 Proj(Vector3, Vector3) Returns the projection of this vector onto the given base. public static Vector3 Proj(this Vector3 vector, Vector3 baseVector) Parameters vector Vector3 baseVector Vector3 Returns Vector3 Proj(Vector4, Vector4) Returns the projection of this vector onto the given base. public static Vector4 Proj(this Vector4 vector, Vector4 baseVector) Parameters vector Vector4 baseVector Vector4 Returns Vector4 ReflectAboutX(Vector2) Reflects the vector about x-axis. [Version(1, 0, 0)] public static Vector2 ReflectAboutX(this Vector2 vector) Parameters vector Vector2 Returns Vector2 ReflectAboutY(Vector2) Reflects the vector about y-axis. [Version(1, 0, 0)] public static Vector2 ReflectAboutY(this Vector2 vector) Parameters vector Vector2 Returns Vector2 Rej(Vector2, Vector2) Returns the rejection of this vector onto the given base. public static Vector2 Rej(this Vector2 vector, Vector2 baseVector) Parameters vector Vector2 baseVector Vector2 Returns Vector2 Remarks The sum of a vector's projection and rejection on a base is equal to the original vector. Rej(Vector3, Vector3) Returns the rejection of this vector onto the given base. public static Vector3 Rej(this Vector3 vector, Vector3 baseVector) Parameters vector Vector3 baseVector Vector3 Returns Vector3 Remarks The sum of a vector's projection and rejection on a base is equal to the original vector. Rej(Vector4, Vector4) Returns the rejection of this vector onto the given base. The sum of a vector's projection and rejection on a base is equal to the original vector. public static Vector4 Rej(this Vector4 vector, Vector4 baseVector) Parameters vector Vector4 baseVector Vector4 Returns Vector4 Rotate(Vector2, float) Rotates a vector by a given angle. public static Vector2 Rotate(this Vector2 vector, float angleInDeg) Parameters vector Vector2 vector to rotate angleInDeg float angle in degrees. Returns Vector2 Rotated vector. Rotate180(Vector2) Rotates a vector by 180 degrees. public static Vector2 Rotate180(this Vector2 vector) Parameters vector Vector2 Returns Vector2 Rotate270(Vector2) Rotates a vector by 270 degrees. public static Vector2 Rotate270(this Vector2 vector) Parameters vector Vector2 Returns Vector2 Rotate90(Vector2) Rotates a vector by 90 degrees. public static Vector2 Rotate90(this Vector2 vector) Parameters vector Vector2 Returns Vector2 RotateAround(Vector2, float, Vector2) Rotates a vector by a given angle around a given point. public static Vector2 RotateAround(this Vector2 vector, float angleInDeg, Vector2 axisPosition) Parameters vector Vector2 angleInDeg float axisPosition Vector2 Returns Vector2 To2DXY(Vector3) Converts a 3D vector to a 2D vector taking the x and y coordinates. public static Vector2 To2DXY(this Vector3 vector) Parameters vector Vector3 Returns Vector2 To2DXZ(Vector3) Converts a 3D vector to a 2D vector taking the x and z coordinates. public static Vector2 To2DXZ(this Vector3 vector) Parameters vector Vector3 Returns Vector2 To2DYZ(Vector3) Converts a 3D vector to a 2D vector taking the y and z coordinates. public static Vector2 To2DYZ(this Vector3 vector) Parameters vector Vector3 Returns Vector2 To3DXY(Vector2) Converts a 2D vector to a 3D vector using the vector for the x and y coordinates, and 0 for the z coordinate. public static Vector3 To3DXY(this Vector2 vector) Parameters vector Vector2 Returns Vector3 To3DXY(Vector2, float) Converts a 2D vector to a 3D vector using the vector for the x and y coordinates, and the given value for the z coordinate. public static Vector3 To3DXY(this Vector2 vector, float z) Parameters vector Vector2 z float Returns Vector3 To3DXZ(Vector2) Converts a 2D vector to a 3D vector using the vector for the x and z coordinates, and 0 for the y coordinate. public static Vector3 To3DXZ(this Vector2 vector) Parameters vector Vector2 Returns Vector3 To3DXZ(Vector2, float) Converts a 2D vector to a 3D vector using the vector for the x and z coordinates, and the given value for the y coordinate. public static Vector3 To3DXZ(this Vector2 vector, float y) Parameters vector Vector2 y float Returns Vector3 To3DYZ(Vector2) Converts a 2D vector to a 3D vector using the vector for the y and z coordinates, and 0 for the x coordinate. public static Vector3 To3DYZ(this Vector2 vector) Parameters vector Vector2 Returns Vector3 To3DYZ(Vector2, float) Converts a 2D vector to a 3D vector using the vector for the y and z coordinates, and the given value for the x coordinate. public static Vector3 To3DYZ(this Vector2 vector, float x) Parameters vector Vector2 x float Returns Vector3 WithIncX(Vector2, float) Returns a copy of the vector with the x-coordinate incremented with the given value. public static Vector2 WithIncX(this Vector2 vector, float xInc) Parameters vector Vector2 xInc float Returns Vector2 WithIncX(Vector3, float) Returns a copy of the vector with the x-coordinate incremented with the given value. public static Vector3 WithIncX(this Vector3 vector, float xInc) Parameters vector Vector3 xInc float Returns Vector3 WithIncY(Vector2, float) Returns a copy of the vector with the y-coordinate incremented with the given value. public static Vector2 WithIncY(this Vector2 vector, float yInc) Parameters vector Vector2 yInc float Returns Vector2 WithIncY(Vector3, float) Returns a copy of the vector with the y-coordinate incremented with the given value. public static Vector3 WithIncY(this Vector3 vector, float yInc) Parameters vector Vector3 yInc float Returns Vector3 WithIncZ(Vector3, float) Returns a copy of the vector with the z-coordinate incremented with the given value. public static Vector3 WithIncZ(this Vector3 vector, float zInc) Parameters vector Vector3 zInc float Returns Vector3 WithX(Vector2, float) Returns a copy of this vector with the given x-coordinate. [Version(1, 0, 0)] public static Vector2 WithX(this Vector2 vector, float x) Parameters vector Vector2 x float Returns Vector2 WithX(Vector3, float) Returns a copy of this vector with the given x-coordinate. [Version(1, 0, 0)] public static Vector3 WithX(this Vector3 vector, float x) Parameters vector Vector3 x float Returns Vector3 WithY(Vector2, float) Returns a copy of this vector with the given y-coordinate. [Version(1, 0, 0)] public static Vector2 WithY(this Vector2 vector, float y) Parameters vector Vector2 y float Returns Vector2 WithY(Vector3, float) Returns a copy of this vector with the given y-coordinate. [Version(1, 0, 0)] public static Vector3 WithY(this Vector3 vector, float y) Parameters vector Vector3 y float Returns Vector3 WithZ(Vector3, float) Returns a copy of this vector with the given z-coordinate. [Version(1, 0, 0)] public static Vector3 WithZ(this Vector3 vector, float z) Parameters vector Vector3 z float Returns Vector3 XZY(Vector3) Creates a new vector by permuting the given vector's coordinates in the order XZY. public static Vector3 XZY(this Vector3 vector) Parameters vector Vector3 Returns Vector3 YX(Vector2) Swaps the x and y coordinates of the vector. public static Vector2 YX(this Vector2 vector) Parameters vector Vector2 Returns Vector2 YXZ(Vector3) Creates a new vector by permuting the given vector's coordinates in the order YXZ. [Version(1, 0, 0)] public static Vector3 YXZ(this Vector3 vector) Parameters vector Vector3 Returns Vector3 YZX(Vector3) Creates a new vector by permuting the given vector's coordinates in the order YZX. public static Vector3 YZX(this Vector3 vector) Parameters vector Vector3 Returns Vector3 ZXY(Vector3) Creates a new vector by permuting the given vector's coordinates in the order ZXY. public static Vector3 ZXY(this Vector3 vector) Parameters vector Vector3 Returns Vector3 ZYX(Vector3) Creates a new vector by permuting the given vector's coordinates in the order ZYX. [Version(1, 0, 0)] public static Vector3 ZYX(this Vector3 vector) Parameters vector Vector3 Returns Vector3"
  },
  "api/RTCube.Extensions.WarningIfNullAttribute.html": {
    "href": "api/RTCube.Extensions.WarningIfNullAttribute.html",
    "title": "Class WarningIfNullAttribute | RTCubeExtensions 文档",
    "keywords": "Class WarningIfNullAttribute Namespace RTCube.Extensions Mark fields in a MonoBehaviour with this attribute to give a specific warning when the field is not set. [AttributeUsage(AttributeTargets.Field)] [Obsolete(\"Use ValidateNotNullAttribute instead.\")] public class WarningIfNullAttribute : ValidateNotNullAttribute Inheritance object ValidationAttribute ValidateNotNullAttribute WarningIfNullAttribute Inherited Members ValidationAttribute.ForceValue ValidationAttribute.WarnInConsole ValidationAttribute.WarnInInspector ValidationAttribute.Message ValidationAttribute.Color ValidationAttribute.HexColor Extension Methods ThrowHelper.ThrowIfNull(object, string) Examples public class MyMonoBehaviour : MonoBehaviour { [WarningIfNull(\"Assign the prefab\")] public GameObject playerPrefab; //... } Constructors WarningIfNullAttribute() Initializes a new instance of the WarningIfNullAttribute class. public WarningIfNullAttribute() WarningIfNullAttribute(string) Initializes a new instance of the WarningIfNullAttribute class with a custom warning message. public WarningIfNullAttribute(string message) Parameters message string The custom warning message."
  },
  "api/RTCube.Extensions.html": {
    "href": "api/RTCube.Extensions.html",
    "title": "Namespace RTCube.Extensions | RTCubeExtensions 文档",
    "keywords": "Namespace RTCube.Extensions Classes AssetLoader Clock Represents a clock that expires after a given time. ColorExtensions Provides some utility functions for Colors. ColorList An InspectorList of type Color. ColorPopupAttribute An attribute used to mark a color field that should be drawn as a popup list in the Unity editor. CommentAttribute Used to mark a field to add a comment above the field in the inspector. DiskCache<TKey, TValue> A cache maintained on disk. DummyAttribute Used to mark the last field in a MonoBehaviour as a dummy so that it is not drawn. This is useful to add a decorator that should be displayed below all fields. FixedSizeMemoryCache<TKey, TValue> A cache maintained in memory that stays fixed in size. FloatList An InspectorList of type float. FpsCounter Component for displaying the median frame time, maximum frame time, and frame rate. GameObjectExtensions Provides useful extension methods for GameObjects. Geometry Provides utility methods for doing geometry. HashPool<T> A light-weight pool class for objects that can be hashed. HighlightAttribute Mark simple types to be highligted in the inspector. ImageExtensions Provides extension methods for Unity's Image class. ImplementationFactory<TBase> A factory class for creating instances of types derived from TBase. ImplementationFactory<T1, TBase> A factory class for creating instances of types derived from TBase. ImplementationFactory<T1, T2, TBase> A factory class for creating instances of types derived from TBase. ImplementationFactory<T1, T2, T3, TBase> A factory class for creating instances of types derived from TBase. ImplementationFactory<T1, T2, T3, T4, TBase> A factory class for creating instances of types derived from TBase. InspectorButtonAttribute RTCube.Extensions.Editor.Internal.GLEditor`1.DrawInspectorButtons draws a button for each method marked with this attribute. This is also used by RTCube.Extensions.Editor.GLMonoBehaviourEditor. InspectorFlagsAttribute Mark fields that should be displayed as bit field mask in the inspector InspectorList The base class for the generic InspectorList. This class exists so that a single property drawer can be used for all subclasses. InspectorList<T> Exactly the same as generic List, but has a custom property drawer that draws a re-orderable list in the inspector. IntList An InspectorList of type int. IntPopupAttribute An attribute used to mark an int field that should be drawn as a popup list in the Unity editor. LabelFieldAttribute Specifies a field to use as label for an item in the inspector. This is especially useful for arrays of compound types. LayerPopupAttribute An attribute used to mark a string field that should be drawn as a popup list of layers in the Unity editor. LayeredCache<TKey, TValue> Represents a cache made out of two layers: a fast primary cache and a slow secondary cache. Things requested that are in the slow cache gets moved to the fast cache, and the oldest item in the fast cache moves to the slow cache. New things are always added to the primary cache. The oldest item is moved to the slow cache if the primary cache is full. LifeCycleEventExtensions Provides extension methods for LifeCycleEvent. MappingGameObjectPool<Key> MinMaxFloat Class for representing a bounded range. MinMaxInt Class for representing a bounded range. MinMaxRangeAttribute Use this attribute to specify the range for a MinMaxFloat field, property, parameter or return value. MonoBehaviourExtensions Provides useful extension methods for MonoBehaviours. MonoBehaviourList An InspectorList of type MonoBehaviour. MonoBehaviourPool<T> A pool suitable for MonoBehaviour objects that can be instantiated from a given prefab. MonoSingleton<T> NonNegativeAttribute Mark numeric values that should always be non-negative. NotImplementedByException A version of NotImplementedException that takes the throwing type as argument. This is useful in class hierarchies where methods are meant to be overridden by derived types but cannot be made abstract (for example, because of Unity limitations). The exception, when thrown, indicates which class should have implemented the method, but hasn't. ObjectList An InspectorList of type Object. ObjectPool<T> ObservedValue<T> Wrapper that can raise an event when a value changes. Optional The base class of the generic Optional class. OptionalFloat Represents an optional float value. OptionalGameObject Represents an optional GameObject. OptionalInt Represents an optional int value. OptionalMonoBehaviour Represents an optional MonoBehaviour. OptionalString Represents an optional string value. OptionalVector2 Represents an optional Vector2 value. OptionalVector3 Represents an optional Vector3 value. Optional<T> Useful for displaying optional values in the inspector. PoolExtensions Pool<T> PopupListAttribute The base class for all popup list attributes. PopupListData Data used to draw a popup list. PopupListData<T> Data used to draw a popup list of a specific type. PositiveAttribute Mark fields that should always be positive with this attribute. PropertyDrawerData Contains static variables and methods that are used by the property drawers. PushdownAutomaton<TLabel> This class is a state machine that has the ability to remember previous states and transition back to them (FIFO). RTCDebug Class that contains methods useful for debugging. All methods are only compiled if the DEBUG symbol is defined. RTCMathf Methods for additional math functions. RTCMonoBehaviour Provides some additional functions for MonoBehaviour. RTCPlayerPrefs An alternative to PlayerPrefs that provides methods for setting bool and array preferences. RTCPool<T> A light-weight pool class for objects that cannot be hashed. RTCRandom Some convenience functions for random bools and integers. ReadOnlyAttribute Used to mark inspectable fields as read-only (that is, making them uneditable, even if they are visible). ResourceNotFoundException Thrown when trying to load a resource (using UnityEngine.Resources.Load(string) and variants) but the resource is not found. ScreenshotTaker Provides a generic implementation of a singleton-like pattern for MonoBehaviour classes. This class automatically searches for an existing instance in the scene or logs an error if none or more than one are found. SeparatorAttribute SignalBus Singleton Provides support for Singleton<T>. SingletonSpawner<T> Singleton<T> Provides a generic implementation of a singleton-like pattern for MonoBehaviour classes. This class automatically searches for an existing instance in the scene or logs an error if none or more than one are found. StateMachine<TLabel> A lightweight state machine. StateTracker<TStateData> Tracks a number of states. Events are raised when any state is started, and when all has stopped. StringList An InspectorList of type string. StringPopupAttribute Used to mark a string field that should be drawn as a popup list. TagPopupAttribute An attribute used to mark a string field that should be drawn as a popup list of tags in the Unity editor. ThrowHelper Class that provides helper methods for throwing exceptions. TimedStateTracker<TStateData> The same as StateTracker, but states can also time out. TransformExtensions Contains useful extensions for Select. TypeArgumentException Thrown when a method is called with illegal type parameters, or a class is constructed with illegal type parameters. UnityGameObjectPool UnityGameObjectPoolGroups<Key> UnsafePool<T> An unsafe pool class that is used for benchmarking. ValidateMatchRegularExpressionAttribute Marks a string field to indicate it should match a regular expression. ValidateNotEmptyAttribute Marks a string field that should not be empty. ValidateNotNegativeAttribute Attribute used to mark fields that should not be negative. ValidateNotNullAttribute Attribute used to mark fields that should not be null. ValidateNotWhiteSpaceOrEmpty Marks a string field that should not be empty or whitespace. ValidatePositiveAttribute Attribute used to mark fields that should be positive. ValidateRangeAttribute Attribute used to mark fields that should have a specific range. ValidationAttribute The base class for properties that can be validated. ValueSnapshot<T> Represents a snapshot of a value, capturing its current and previous states. Vector2List An InspectorList of type Vector2. Vector3List An InspectorList of type Vector3. Vector4List An InspectorList of type Vector4. VectorExtensions Contains useful extension methods for vectors. WarningIfNullAttribute Mark fields in a MonoBehaviour with this attribute to give a specific warning when the field is not set. Interfaces ICache<TKey, TValue> A data structure that can be used as a cache. IFactory IInitializable IPoolObject<T> IPool<T> Represents a pool of objects, with the idea to reuse objects instead of creating and destroying them. IRandom Represents a random generator. IStateToken<TStateData> When a new state is started in a tracker, a token is created that wraps custom data, and can be used to stop the state later. Enums LifeCycleEvent Flags for Unity lifecycle events. Singleton.FindResult The result of the search for an instance of the singleton. ValuesRetrievalMethod How the values for the popup list should be retrieved."
  },
  "index.html": {
    "href": "index.html",
    "title": "RTCExtensions | RTCubeExtensions 文档",
    "keywords": "RTCExtensions DocFX usage example for Unity projects DocFX tool generates a clean documentation that looks like the Unity documentation with a manual (written in Markdown) and a scripting API (from the C# scripts of the project). This repository contains a simple Unity example project which documentation is automatically generated and deployed online: https://normanderwan.github.io/DocFxForUnity/. It references both C# API and Unity API. DocFxForUnity documentation manual DocFxForUnity documentation scripting API Setup your documentation Install DocFX. Copy the Documentation/ folder to your Unity project: . ├── Assets + ├── Documentation ├── Package ├── ProjectSettings └── README.md Edit the following properties in Documentation/docfx.json, keep the others as it is: { \"build\": { \"globalMetadata\": // Edit your documentation website info, see: https://dotnet.github.io/docfx/tutorial/docfx.exe_user_manual.html#322-reserved-metadata { \"_appTitle\": \"Example Unity documentation\", \"_appFooter\": \"Example Unity documentation\", \"_enableSearch\": true }, \"sitemap\": { \"baseUrl\": \"https://normanderwan.github.io/DocFxForUnity\" // The URL of your documentation website } } It's the configuration file of your documentation. See https://dotnet.github.io/docfx/tutorial/docfx.exe_user_manual.html#3-docfxjson-format for more details. Edit Documentation/filterConfig.yml: apiRules: - include: # The namespaces to generate uidRegex: ^Your\\.Namespace1 type: Namespace - include: uidRegex: ^Your\\.Namespace2 type: Namespace - exclude: uidRegex: .* # Every other namespaces are ignored type: Namespace It tells DocFX which namespaces you want to generate the documentation. See https://dotnet.github.io/docfx/tutorial/howto_filter_out_unwanted_apis_attributes.html for more details. Document your classes and methods. See https://docs.microsoft.com/en-us/dotnet/csharp/codedoc for more details. (Optional) Add your manual pages: Write a Markdown file for each page in Documentation/manual/. Keep a list of these pages on Documentation/manual/toc.yml. (Optional) Add resources such as images: Copy them to Documentation/resources/. Reference them on your docs or manual pages. See https://dotnet.github.io/docfx/tutorial/links_and_cross_references.html#link-to-a-file-using-relative-path for more details. (Optional) Document your namespaces: For each namespace, add a Assets/Scripts/Your/Namespace1/Your.Namespace1.md file: --- uid: Your.Namespace1 summary: Description of the Your.Namespace1 namespace. --- See https://dotnet.github.io/docfx/tutorial/intro_overwrite_files.html to know how it works. Generate your documentation: On a command line opened on your project, run: cp README.md Documentation/index.md docfx Documentation/docfx.json --serve The generated website will be visible at http://localhost:8080. If you want to have a more similar look to the Unity documentation, see this UnityFX template for DocFX: https://github.com/code-beans/UnityFX. Generate automatically your documentation If you're using GitHub: Copy the .github/workflows/documentation.yml workflow to your Unity project: . + ├── .github + | └── workflows + | └── documentation.yml ├── Assets ├── Documentation ├── Package ├── ProjectSettings └── README.md Next push on main branch will build and deploy your documentation to https://<USERNAME>.github.io/<REPOSITORY>/! If you're using GitLab, use the provided .gitlab-ci.yml. Generated website is pushed to a public/ directory. See the GitLab Pages documentation for more details. Troubleshooting / FAQ DocFX outputs: Warning:[ExtractMetadata]No project detected for extracting metadata. Solution: On Unity, click Asset > Open C# Project to generate the required .csproj. DocFX outputs: Warning:[ExtractMetadata]No metadata is generated for Assembly-CSharp,Assembly-CSharp-Editor. Solution: Make sure your included your namespace in Documentation/filterConfig.yml: - include: uidRegex: ^Your\\.Namespace1 type: Namespace If you want to reference a specific version of Unity, change this line on your docfx.json: \"xref\": [ \"https://normanderwan.github.io/UnityXrefMaps/<version>/xrefmap.yml\" ], where <version> is a Unity version in the form of YYYY.x (e.g. 2017.4, 2018.4, 2019.3). Disclaimer This repository is not sponsored by or affiliated with Unity Technologies or its affiliates. “Unity” is a trademark or registered trademark of Unity Technologies or its affiliates in the U.S. and elsewhere."
  },
  "manual/coniunctis.html": {
    "href": "manual/coniunctis.html",
    "title": "Coniunctis nec qui et lanient monticolae vitae | RTCubeExtensions 文档",
    "keywords": "Coniunctis nec qui et lanient monticolae vitae Opem ille Lorem markdownum cavis exululat inutile. Illi quem caeli, vola patruo difficili Iuppiter Patraeque, est ardebant ingeniis Troica intus Amore tibi mirantem superfusis, multum. Ut Achilles Et sitim Tibi modo ait temptant crinita daret Pariter in removi offensasque Lenaeo damno terra Phoebes ut damnosa classis ignes templo; tua ulla capillos ultima. Videre percusso plectro templa fuit diva minimum debere, quid nomen Philomela animis. Verbis istis flagrat vulnera inpediique ignes. Gravi filo obvius arte Amphionis Panes emisitque iubet. Latona te timens Latentia ante, eundem meritorum sunto! Elige in timuit templa ferrea, qui arma ligati stagnum turbant. Fraternaque aeternus, dedisse, naufragus corripiens ranas Amathunta et quod laetior culpa nec semper scorpius fuit vicem corpora ardere. Fallit in artus primordia, fratres per aliis, ipsi manu Asiae quod marmorea. mountain(googleVga, pngIphone); var radcabBitrate = dnsCronRecursion; gui(2); ipImageAix += vle(drm_cisc, horizontal + computer_key); jre(vaporware_adc_multi); Lumina ut tamen praesentia vidistis nymphae auroque Bromumque in portant furorem. Visa init resurgere praevitiat canibus et, dedignata turea, ilia. Pisenore mensura insula aere nec per o gladium causa: Alcidae. Veris sentes pallet, alta melius nostra amborum probant, deam. Iuventae dedimus nitidaque hunc traxisse sermonibus pectine flecti an pateres, hac ore gelidis foret semper. Sithon pelle. Bracchia Hippason videntur fateri hosti: palpitat animo est reliquit anne nam confusaque. Interea rex altis munera quem quae quoque rorant, rauco albescere scopulo moriensque parvo, pectus illa, quadrupedes. Notavit haec. Vertit pars quem Euryte casu usta iterum! Ablatum pectus corripiunt neu humus tamquam; ducens stellarum amore. Pulsisque latet, ad tamen victor fulva Tirynthius posco; qui inque in poena quidem enses!"
  },
  "manual/etiam.html": {
    "href": "manual/etiam.html",
    "title": "Etiam nantemque exul | RTCubeExtensions 文档",
    "keywords": "Etiam nantemque exul Cum tulit Lorem markdownum quos stimulosque altos. Putat nubes molle Troiae vero dea; nostraque plurima. Vos de mihi, credidit: salibus et iacuit, volvitur sunt unda fronti deriguisse refert. Sumpsisse viso Nubila nomine. Purpura se o et causa parva ripas, adsonat saevaque; quid modo ambo et venere voveo. Sine et esse, illa tempore, sive tibi roseo, ministerio altos. Trepident medicamine, primasque cum et peregit dapibusque quoslibet hominis quoque insula. Tepentibus ut Cecropios ab turba, est auro ferventi aliter duratos feres differtis Ausoniis potes, non noctis Laertaque iuvenes. Caelumque vestigia Et promissa fila sentiet leges; Phrygiae et levatus ferire? Salutifer coniugis fierent ante fecissent post vultumque ultima, per radios currere; tandem. Fuerat qua, ne foedera reformatus nunc diu dea audet nonne. Ut utinam mitia tenuerunt movent spectans Mavortis nulla ite, somnos exsiccata dixit Aeetias. Binas Trinacriam album ex ipse. Quoque una utraque tardius placetque gerere; mariti sed dare ludunt memorante Delphice corpora. Caret quantum intellegat venis gaudent eurus. Et suos crista; has et ferarum quid audit omine; mea cum praemia quae duris, suspicor. Adflati qui Spiro conata supprimit diemque; ora oblitus ensem alti non quo lacrimis ferunt, ageret Cebrenida rutilis delendaque? Terras lata modus: nec fas, misi utque adpositis Iunonis. Fide vidit, ferox Schoeneia mundi, voce, tellus pariterque pedum, sic Celadon securior corpora partesque posito. Potest faxo unda pendulaque ille rostro, haesit pars: formidine captat, viseret simulaverat! Sequi est peragit flumineae pallent simulatas formae avulsa, imagine undis; formam. Et nec sed adeunt, huic aequa et ignes nec, medere terram. Move ipsum abnuat retemptat retinebat duabus diu Iovi est pluma. Tecum non deducit Pelops Inachus: arcet aliquemque, regia telo. Tollens altore nec semel qui voce Palatinae Apertis et dei duo inquit; luna secundo, fervida terret. In haec dextra septima Tydides tibi: congelat hospes nativum radice tegumenque membris Hesperio ne Libys, est vocabula siqua. Dumque stet mulces, ut fontem dea atricolor, est pronos, clarissimus poterat cum intrare sidere templi. cut_metadata(whitelistSequenceUnit.thick.of_bezel_cdma( address_suffix_troubleshooting), sram_trojan(4, hdmi_network - 1)); flash.apache -= web_gps_plug; if (offline.dac_bridge(scrollEbookRom, parameter.internal_target_superscalar(2)) < qwerty + 2 - ipvCgiContextual) { certificateIdeAsp = overclocking + app; supplyCard = siteRaster; } Sagitta curvum quoque petisti opibusque proximitas in, illa vestrum, mihi domum nescia flexit sacra in. Magni vive sim crescente causam saxo voluit, mens, quod. Tela ter ulterius similis illos nato refugit ait verbaque nec fatigatum penates iaculatricemque cecidit pinnas, cum. Misso contigit caelo dedissent lumina; nympha ad vobis occidat, malo sacra utrumque cunctos Diomedeos addita. Virgineus autumnos, ait mitissima curru: fuit sed fessi se habebat hactenus Ultor; meus."
  }
}